//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

@class NSMapTable;

@interface JSVirtualMachine : NSObject
{
    struct OpaqueJSContextGroup *m_group;
    // Error parsing type: {Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"AC}}}, name: m_externalDataMutex
    NSMapTable *m_externalObjectGraph;
    NSMapTable *m_externalRememberedSet;
}

+ (void)setCrashOnVMCreation:(BOOL)arg1;
+ (unsigned long long)setNumberOfFTLCompilerThreads:(unsigned long long)arg1;
+ (unsigned long long)setNumberOfDFGCompilerThreads:(unsigned long long)arg1;
+ (id)virtualMachineWithContextGroupRef:(struct OpaqueJSContextGroup *)arg1;
- (id).cxx_construct;
- (void)removeManagedReference:(id)arg1 withOwner:(id)arg2;
- (void)addManagedReference:(id)arg1 withOwner:(id)arg2;
- (void)addExternalRememberedObject:(id)arg1;
- (_Bool)isOldExternalObject:(id)arg1;
- (void)dealloc;
- (id)initWithContextGroupRef:(struct OpaqueJSContextGroup *)arg1;
- (id)init;
-     // Error parsing type: ^{VM={atomic<unsigned int>=AI}I{RefPtr<JSC::JSLock, WTF::DumbPtrTraits<JSC::JSLock> >=^{JSLock}}{RetainPtr<__CFRunLoop *>=^v}{Heap={HashMap<JSC::JSImmutableButterfly *, JSC::JSString *, WTF::PtrHash<JSC::JSImmutableButterfly *>, WTF::HashTraits<JSC::JSImmutableButterfly *>, WTF::HashTraits<JSC::JSString *> >={HashTable<JSC::JSImmutableButterfly *, WTF::KeyValuePair<JSC::JSImmutableButterfly *, JSC::JSString *>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSImmutableButterfly *, JSC::JSString *> >, WTF::PtrHash<JSC::JSImmutableButterfly *>, WTF::HashMap<JSC::JSImmutableButterfly *, JSC::JSString *, WTF::PtrHash<JSC::JSImmutableButterfly *>, WTF::HashTraits<JSC::JSImmutableButterfly *>, WTF::HashTraits<JSC::JSString *> >::KeyValuePairTraits, WTF::HashTraits<JSC::JSImmutableButterfly *> >=^{KeyValuePair<JSC::JSImmutableButterfly *, JSC::JSString *>}IIII}}iiQQQQQQQQQQQQQQdB{Markable<JSC::CollectionScope, WTF::EnumMarkableTraits<JSC::CollectionScope, '\xFF'> >=C}{Markable<JSC::CollectionScope, WTF::EnumMarkableTraits<JSC::CollectionScope, '\xFF'> >=C}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{StructureIDTable={Vector<std::__1::unique_ptr<JSC::StructureIDTable::StructureOrOffset [], WTF::FastFree<JSC::StructureIDTable::StructureOrOffset []> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::StructureIDTable::StructureOrOffset [], WTF::FastFree<JSC::StructureIDTable::StructureOrOffset []> >}II}II{unique_ptr<JSC::StructureIDTable::StructureOrOffset [], WTF::FastFree<JSC::StructureIDTable::StructureOrOffset []> >={__compressed_pair<JSC::StructureIDTable::StructureOrOffset *, WTF::FastFree<JSC::StructureIDTable::StructureOrOffset []> >=^(StructureOrOffset)}}QQ{WeakRandom=IQQ}}{MarkedSpace={Vector<JSC::Subspace *, 0, WTF::CrashOnOverflow, 16>=^^{Subspace}II}{Vector<JSC::LargeAllocation *, 0, WTF::CrashOnOverflow, 16>=^^{LargeAllocation}II}IIII^^{LargeAllocation}^^{LargeAllocation}^{Heap}QIIBB{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{MarkedBlockSet={TinyBloomFilter=Q}{HashSet<JSC::MarkedBlock *, WTF::MarkedBlockHash, WTF::HashTraits<JSC::MarkedBlock *> >={HashTable<JSC::MarkedBlock *, JSC::MarkedBlock *, WTF::IdentityExtractor, WTF::MarkedBlockHash, WTF::HashTraits<JSC::MarkedBlock *>, WTF::HashTraits<JSC::MarkedBlock *> >=^^{MarkedBlock}IIII}}}{SentinelLinkedList<JSC::WeakSet, WTF::BasicRawSentinelNode<JSC::WeakSet> >={BasicRawSentinelNode<JSC::WeakSet>=^{BasicRawSentinelNode<JSC::WeakSet>}^{BasicRawSentinelNode<JSC::WeakSet>}}{BasicRawSentinelNode<JSC::WeakSet>=^{BasicRawSentinelNode<JSC::WeakSet>}^{BasicRawSentinelNode<JSC::WeakSet>}}}{SentinelLinkedList<JSC::WeakSet, WTF::BasicRawSentinelNode<JSC::WeakSet> >={BasicRawSentinelNode<JSC::WeakSet>=^{BasicRawSentinelNode<JSC::WeakSet>}^{BasicRawSentinelNode<JSC::WeakSet>}}{BasicRawSentinelNode<JSC::WeakSet>=^{BasicRawSentinelNode<JSC::WeakSet>}^{BasicRawSentinelNode<JSC::WeakSet>}}}{SinglyLinkedListWithTail<JSC::BlockDirectory>=^{BlockDirectory}^{BlockDirectory}}}{GCIncomingRefCountedSet<JSC::ArrayBuffer>={Vector<JSC::ArrayBuffer *, 0, WTF::CrashOnOverflow, 16>=^^{ArrayBuffer}II}Q}QQ{HashSet<const JSC::JSCell *, WTF::PtrHash<const JSC::JSCell *>, WTF::HashTraits<const JSC::JSCell *> >={HashTable<const JSC::JSCell *, const JSC::JSCell *, WTF::IdentityExtractor, WTF::PtrHash<const JSC::JSCell *>, WTF::HashTraits<const JSC::JSCell *>, WTF::HashTraits<const JSC::JSCell *> >=^^{JSCell}IIII}}{HashCountedSet<JSC::JSCell *, WTF::PtrHash<JSC::JSCell *>, WTF::HashTraits<JSC::JSCell *> >={HashMap<JSC::JSCell *, unsigned int, WTF::PtrHash<JSC::JSCell *>, WTF::HashTraits<JSC::JSCell *>, WTF::HashTraits<unsigned int> >={HashTable<JSC::JSCell *, WTF::KeyValuePair<JSC::JSCell *, unsigned int>, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::JSCell *, unsigned int> >, WTF::PtrHash<JSC::JSCell *>, WTF::HashMap<JSC::JSCell *, unsigned int, WTF::PtrHash<JSC::JSCell *>, WTF::HashTraits<JSC::JSCell *>, WTF::HashTraits<unsigned int> >::KeyValuePairTraits, WTF::HashTraits<JSC::JSCell *> >=^{KeyValuePair<JSC::JSCell *, unsigned int>}IIII}}}{unique_ptr<WTF::HashSet<JSC::MarkedArgumentBuffer *, WTF::PtrHash<JSC::MarkedArgumentBuffer *>, WTF::HashTraits<JSC::MarkedArgumentBuffer *> >, std::__1::default_delete<WTF::HashSet<JSC::MarkedArgumentBuffer *, WTF::PtrHash<JSC::MarkedArgumentBuffer *>, WTF::HashTraits<JSC::MarkedArgumentBuffer *> > > >={__compressed_pair<WTF::HashSet<JSC::MarkedArgumentBuffer *, WTF::PtrHash<JSC::MarkedArgumentBuffer *>, WTF::HashTraits<JSC::MarkedArgumentBuffer *> > *, std::__1::default_delete<WTF::HashSet<JSC::MarkedArgumentBuffer *, WTF::PtrHash<JSC::MarkedArgumentBuffer *>, WTF::HashTraits<JSC::MarkedArgumentBuffer *> > > >=^{HashSet<JSC::MarkedArgumentBuffer *, WTF::PtrHash<JSC::MarkedArgumentBuffer *>, WTF::HashTraits<JSC::MarkedArgumentBuffer *> >}}}{unique_ptr<JSC::MachineThreads, std::__1::default_delete<JSC::MachineThreads> >={__compressed_pair<JSC::MachineThreads *, std::__1::default_delete<JSC::MachineThreads> >=^{MachineThreads}}}{unique_ptr<JSC::SlotVisitor, std::__1::default_delete<JSC::SlotVisitor> >={__compressed_pair<JSC::SlotVisitor *, std::__1::default_delete<JSC::SlotVisitor> >=^{SlotVisitor}}}{unique_ptr<JSC::SlotVisitor, std::__1::default_delete<JSC::SlotVisitor> >={__compressed_pair<JSC::SlotVisitor *, std::__1::default_delete<JSC::SlotVisitor> >=^{SlotVisitor}}}{unique_ptr<JSC::MarkStackArray, std::__1::default_delete<JSC::MarkStackArray> >={__compressed_pair<JSC::MarkStackArray *, std::__1::default_delete<JSC::MarkStackArray> >=^{MarkStackArray}}}{unique_ptr<JSC::MarkStackArray, std::__1::default_delete<JSC::MarkStackArray> >={__compressed_pair<JSC::MarkStackArray *, std::__1::default_delete<JSC::MarkStackArray> >=^{MarkStackArray}}}{unique_ptr<JSC::MarkingConstraintSet, std::__1::default_delete<JSC::MarkingConstraintSet> >={__compressed_pair<JSC::MarkingConstraintSet *, std::__1::default_delete<JSC::MarkingConstraintSet> >=^{MarkingConstraintSet}}}{Vector<std::__1::unique_ptr<JSC::SlotVisitor, std::__1::default_delete<JSC::SlotVisitor> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::SlotVisitor, std::__1::default_delete<JSC::SlotVisitor> >}II}{Vector<JSC::SlotVisitor *, 0, WTF::CrashOnOverflow, 16>=^^{SlotVisitor}II}{HandleSet=^{VM}{DoublyLinkedList<JSC::HandleBlock>=^{HandleBlock}^{HandleBlock}}{SentinelLinkedList<JSC::HandleNode, JSC::HandleNode>={HandleNode={JSValue=(EncodedValueDescriptor=q^{JSCell}{?=ii})}^{HandleNode}^{HandleNode}}{HandleNode={JSValue=(EncodedValueDescriptor=q^{JSCell}{?=ii})}^{HandleNode}^{HandleNode}}}{SentinelLinkedList<JSC::HandleNode, JSC::HandleNode>={HandleNode={JSValue=(EncodedValueDescriptor=q^{JSCell}{?=ii})}^{HandleNode}^{HandleNode}}{HandleNode={JSValue=(EncodedValueDescriptor=q^{JSCell}{?=ii})}^{HandleNode}^{HandleNode}}}{SinglyLinkedList<JSC::HandleNode>=^{HandleNode}}}{unique_ptr<JSC::CodeBlockSet, std::__1::default_delete<JSC::CodeBlockSet> >={__compressed_pair<JSC::CodeBlockSet *, std::__1::default_delete<JSC::CodeBlockSet> >=^{CodeBlockSet}}}{unique_ptr<JSC::JITStubRoutineSet, std::__1::default_delete<JSC::JITStubRoutineSet> >={__compressed_pair<JSC::JITStubRoutineSet *, std::__1::default_delete<JSC::JITStubRoutineSet> >=^{JITStubRoutineSet}}}{FinalizerOwner=^^?}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}BBBI^{VM}{Seconds=d}{Seconds=d}{Vector<JSC::WeakBlock *, 0, WTF::CrashOnOverflow, 16>=^^{WeakBlock}II}Q{RefPtr<JSC::FullGCActivityCallback, WTF::DumbPtrTraits<JSC::FullGCActivityCallback> >=^{FullGCActivityCallback}}{RefPtr<JSC::GCActivityCallback, WTF::DumbPtrTraits<JSC::GCActivityCallback> >=^{GCActivityCallback}}{Ref<JSC::IncrementalSweeper, WTF::DumbPtrTraits<JSC::IncrementalSweeper> >=^{IncrementalSweeper}}{Ref<JSC::StopIfNecessaryTimer, WTF::DumbPtrTraits<JSC::StopIfNecessaryTimer> >=^{StopIfNecessaryTimer}}{Vector<JSC::HeapObserver *, 0, WTF::CrashOnOverflow, 16>=^^{HeapObserver}II}{Vector<JSC::HeapFinalizerCallback, 0, WTF::CrashOnOverflow, 16>=^{HeapFinalizerCallback}II}{unique_ptr<JSC::HeapVerifier, std::__1::default_delete<JSC::HeapVerifier> >={__compressed_pair<JSC::HeapVerifier *, std::__1::default_delete<JSC::HeapVerifier> >=^{HeapVerifier}}}{Vector<WTF::RetainPtr<const void *>, 0, WTF::CrashOnOverflow, 16>=^{RetainPtr<const void *>}II}II{HashSet<JSC::WeakGCMapBase *, WTF::PtrHash<JSC::WeakGCMapBase *>, WTF::HashTraits<JSC::WeakGCMapBase *> >={HashTable<JSC::WeakGCMapBase *, JSC::WeakGCMapBase *, WTF::IdentityExtractor, WTF::PtrHash<JSC::WeakGCMapBase *>, WTF::HashTraits<JSC::WeakGCMapBase *>, WTF::HashTraits<JSC::WeakGCMapBase *> >=^^{WeakGCMapBase}IIII}}{unique_ptr<JSC::MarkStackArray, std::__1::default_delete<JSC::MarkStackArray> >={__compressed_pair<JSC::MarkStackArray *, std::__1::default_delete<JSC::MarkStackArray> >=^{MarkStackArray}}}{unique_ptr<JSC::MarkStackArray, std::__1::default_delete<JSC::MarkStackArray> >={__compressed_pair<JSC::MarkStackArray *, std::__1::default_delete<JSC::MarkStackArray> >=^{MarkStackArray}}}II{ConcurrentPtrHashSet={Vector<std::__1::unique_ptr<WTF::ConcurrentPtrHashSet::Table, std::__1::default_delete<WTF::ConcurrentPtrHashSet::Table> >, 4, WTF::CrashOnOverflow, 16>=^{unique_ptr<WTF::ConcurrentPtrHashSet::Table, std::__1::default_delete<WTF::ConcurrentPtrHashSet::Table> >}II[4{type=[8C]}]}{Atomic<WTF::ConcurrentPtrHashSet::Table *>={atomic<WTF::ConcurrentPtrHashSet::Table *>=A^{Table}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}}{ParallelHelperClient={RefPtr<WTF::ParallelHelperPool, WTF::DumbPtrTraits<WTF::ParallelHelperPool> >=^{ParallelHelperPool}}{RefPtr<WTF::SharedTask<void ()>, WTF::DumbPtrTraits<WTF::SharedTask<void ()> > >=^{SharedTask<void ()>}}I}{RefPtr<WTF::SharedTask<void (JSC::SlotVisitor &)>, WTF::DumbPtrTraits<WTF::SharedTask<void (JSC::SlotVisitor &)> > >=^{SharedTask<void (JSC::SlotVisitor &)>}}QQ{unique_ptr<JSC::MutatorScheduler, std::__1::default_delete<JSC::MutatorScheduler> >={__compressed_pair<JSC::MutatorScheduler *, std::__1::default_delete<JSC::MutatorScheduler> >=^{MutatorScheduler}}}{Atomic<unsigned int>={atomic<unsigned int>=AI}}B{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Condition={Atomic<bool>={atomic<bool>=AB}}}{MonotonicTime=d}{MonotonicTime=d}{MonotonicTime=d}{Deque<JSC::GCRequest, 0>=QQ{VectorBuffer<JSC::GCRequest, 0>=^{GCRequest}II}}{GCRequest={Optional<JSC::CollectionScope>=B(constexpr_storage_t<JSC::CollectionScope>=CC)}{RefPtr<WTF::SharedTask<void ()>, WTF::DumbPtrTraits<WTF::SharedTask<void ()> > >=^{SharedTask<void ()>}}}QQCCCBBBBBQQ{Box<WTF::Lock>={RefPtr<WTF::Box<WTF::Lock>::Data, WTF::DumbPtrTraits<WTF::Box<WTF::Lock>::Data> >=^{Data}}}{Ref<WTF::AutomaticThreadCondition, WTF::DumbPtrTraits<WTF::AutomaticThreadCondition> >=^{AutomaticThreadCondition}}{RefPtr<WTF::AutomaticThread, WTF::DumbPtrTraits<WTF::AutomaticThread> >=^{AutomaticThread}}{RefPtr<WTF::Thread, WTF::DumbPtrTraits<WTF::Thread> >=^{Thread}}{MonotonicTime=d}{MonotonicTime=d}{MonotonicTime=d}{Seconds=d}Q^{CurrentThreadState}^{Thread}B{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Condition={Atomic<bool>={atomic<bool>=AB}}}}{unique_ptr<JSC::FastMallocAlignedMemoryAllocator, std::__1::default_delete<JSC::FastMallocAlignedMemoryAllocator> >={__compressed_pair<JSC::FastMallocAlignedMemoryAllocator *, std::__1::default_delete<JSC::FastMallocAlignedMemoryAllocator> >=^{FastMallocAlignedMemoryAllocator}}}{unique_ptr<JSC::GigacageAlignedMemoryAllocator, std::__1::default_delete<JSC::GigacageAlignedMemoryAllocator> >={__compressed_pair<JSC::GigacageAlignedMemoryAllocator *, std::__1::default_delete<JSC::GigacageAlignedMemoryAllocator> >=^{GigacageAlignedMemoryAllocator}}}{unique_ptr<JSC::GigacageAlignedMemoryAllocator, std::__1::default_delete<JSC::GigacageAlignedMemoryAllocator> >={__compressed_pair<JSC::GigacageAlignedMemoryAllocator *, std::__1::default_delete<JSC::GigacageAlignedMemoryAllocator> >=^{GigacageAlignedMemoryAllocator}}}{unique_ptr<JSC::HeapCellType, std::__1::default_delete<JSC::HeapCellType> >={__compressed_pair<JSC::HeapCellType *, std::__1::default_delete<JSC::HeapCellType> >=^{HeapCellType}}}{unique_ptr<JSC::HeapCellType, std::__1::default_delete<JSC::HeapCellType> >={__compressed_pair<JSC::HeapCellType *, std::__1::default_delete<JSC::HeapCellType> >=^{HeapCellType}}}{unique_ptr<JSC::HeapCellType, std::__1::default_delete<JSC::HeapCellType> >={__compressed_pair<JSC::HeapCellType *, std::__1::default_delete<JSC::HeapCellType> >=^{HeapCellType}}}{unique_ptr<JSC::HeapCellType, std::__1::default_delete<JSC::HeapCellType> >={__compressed_pair<JSC::HeapCellType *, std::__1::default_delete<JSC::HeapCellType> >=^{HeapCellType}}}{unique_ptr<JSC::JSStringHeapCellType, std::__1::default_delete<JSC::JSStringHeapCellType> >={__compressed_pair<JSC::JSStringHeapCellType *, std::__1::default_delete<JSC::JSStringHeapCellType> >=^{JSStringHeapCellType}}}{unique_ptr<JSC::JSDestructibleObjectHeapCellType, std::__1::default_delete<JSC::JSDestructibleObjectHeapCellType> >={__compressed_pair<JSC::JSDestructibleObjectHeapCellType *, std::__1::default_delete<JSC::JSDestructibleObjectHeapCellType> >=^{JSDestructibleObjectHeapCellType}}}{unique_ptr<JSC::JSWebAssemblyCodeBlockHeapCellType, std::__1::default_delete<JSC::JSWebAssemblyCodeBlockHeapCellType> >={__compressed_pair<JSC::JSWebAssemblyCodeBlockHeapCellType *, std::__1::default_delete<JSC::JSWebAssemblyCodeBlockHeapCellType> >=^{JSWebAssemblyCodeBlockHeapCellType}}}{unique_ptr<JSC::WebAssemblyFunctionHeapCellType, std::__1::default_delete<JSC::WebAssemblyFunctionHeapCellType> >={__compressed_pair<JSC::WebAssemblyFunctionHeapCellType *, std::__1::default_delete<JSC::WebAssemblyFunctionHeapCellType> >=^{WebAssemblyFunctionHeapCellType}}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{CompleteSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}{array<JSC::Allocator, 503>=[503{Allocator=^{LocalAllocator}}]}{Vector<std::__1::unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::BlockDirectory, std::__1::default_delete<JSC::BlockDirectory> >}II}{Vector<std::__1::unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >, 0, WTF::CrashOnOverflow, 16>=^{unique_ptr<JSC::LocalAllocator, std::__1::default_delete<JSC::LocalAllocator> >}II}}{IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{unique_ptr<JSC::IsoSubspace, std::__1::default_delete<JSC::IsoSubspace> >={__compressed_pair<JSC::IsoSubspace *, std::__1::default_delete<JSC::IsoSubspace> >=^{IsoSubspace}}}{IsoCellSet=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}^{IsoSubspace}{FastBitVector={FastBitVectorWordOwner=^IQ}}{ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>=Q{ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >=^{Array}{Vector<WTF::ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >::Array *, 0, WTF::CrashOnOverflow, 16>=^^{Array}II}}Q}}{IsoCellSet=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}^{IsoSubspace}{FastBitVector={FastBitVectorWordOwner=^IQ}}{ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>=Q{ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >=^{Array}{Vector<WTF::ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >::Array *, 0, WTF::CrashOnOverflow, 16>=^^{Array}II}}Q}}{SpaceAndSet={IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoCellSet=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}^{IsoSubspace}{FastBitVector={FastBitVectorWordOwner=^IQ}}{ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>=Q{ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >=^{Array}{Vector<WTF::ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >::Array *, 0, WTF::CrashOnOverflow, 16>=^^{Array}II}}Q}}}{unique_ptr<JSC::VM::SpaceAndSet, std::__1::default_delete<JSC::VM::SpaceAndSet> >={__compressed_pair<JSC::VM::SpaceAndSet *, std::__1::default_delete<JSC::VM::SpaceAndSet> >=^{SpaceAndSet}}}{unique_ptr<JSC::VM::SpaceAndSet, std::__1::default_delete<JSC::VM::SpaceAndSet> >={__compressed_pair<JSC::VM::SpaceAndSet *, std::__1::default_delete<JSC::VM::SpaceAndSet> >=^{SpaceAndSet}}}{unique_ptr<JSC::VM::SpaceAndSet, std::__1::default_delete<JSC::VM::SpaceAndSet> >={__compressed_pair<JSC::VM::SpaceAndSet *, std::__1::default_delete<JSC::VM::SpaceAndSet> >=^{SpaceAndSet}}}{SpaceAndSet={IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoCellSet=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}^{IsoSubspace}{FastBitVector={FastBitVectorWordOwner=^IQ}}{ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>=Q{ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >=^{Array}{Vector<WTF::ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >::Array *, 0, WTF::CrashOnOverflow, 16>=^^{Array}II}}Q}}}{SpaceAndSet={IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoCellSet=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}^{IsoSubspace}{FastBitVector={FastBitVectorWordOwner=^IQ}}{ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>=Q{ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >=^{Array}{Vector<WTF::ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >::Array *, 0, WTF::CrashOnOverflow, 16>=^^{Array}II}}Q}}}{SpaceAndSet={IsoSubspace=^^?^{MarkedSpace}^{HeapCellType}^{AlignedMemoryAllocator}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LargeAllocation, WTF::BasicRawSentinelNode<JSC::LargeAllocation> >={BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}{BasicRawSentinelNode<JSC::LargeAllocation>=^{BasicRawSentinelNode<JSC::LargeAllocation>}^{BasicRawSentinelNode<JSC::LargeAllocation>}}}^{Subspace}{CString={RefPtr<WTF::CStringBuffer, WTF::DumbPtrTraits<WTF::CStringBuffer> >=^{CStringBuffer}}}Q{BlockDirectory={Vector<JSC::MarkedBlock::Handle *, 0, WTF::CrashOnOverflow, 16>=^^{Handle}II}{Vector<unsigned int, 0, WTF::CrashOnOverflow, 16>=^III}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{FastBitVector={FastBitVectorWordOwner=^IQ}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{CellAttributes=cc}IQQ^{Heap}^{Subspace}^{BlockDirectory}^{BlockDirectory}^{BlockDirectory}{SentinelLinkedList<JSC::LocalAllocator, WTF::BasicRawSentinelNode<JSC::LocalAllocator> >={BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}{BasicRawSentinelNode<JSC::LocalAllocator>=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}}}}{LocalAllocator=^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BasicRawSentinelNode<JSC::LocalAllocator>}^{BlockDirectory}{FreeList=QQ*III}^{Handle}^{Handle}Q}{unique_ptr<JSC::IsoAlignedMemoryAllocator, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >={__compressed_pair<JSC::IsoAlignedMemoryAllocator *, std::__1::default_delete<JSC::IsoAlignedMemoryAllocator> >=^{IsoAlignedMemoryAllocator}}}{SentinelLinkedList<JSC::IsoCellSet, WTF::BasicRawSentinelNode<JSC::IsoCellSet> >={BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}{BasicRawSentinelNode<JSC::IsoCellSet>=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}}}}{IsoCellSet=^{BasicRawSentinelNode<JSC::IsoCellSet>}^{BasicRawSentinelNode<JSC::IsoCellSet>}^{IsoSubspace}{FastBitVector={FastBitVectorWordOwner=^IQ}}{ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>=Q{ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >=^{Array}{Vector<WTF::ConcurrentBuffer<std::__1::unique_ptr<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment, std::__1::default_delete<WTF::ConcurrentVector<std::__1::unique_ptr<WTF::Bitmap<1024, unsigned int>, std::__1::default_delete<WTF::Bitmap<1024, unsigned int> > >, 8>::Segment> > >::Array *, 0, WTF::CrashOnOverflow, 16>=^^{Array}II}}Q}}}i^{ClientData}^{EntryFrame}^{ExecState}{Context=^{Instance}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}[3{Strong<JSC::Structure>=^{JSValue}}]{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::Structure>=^{JSValue}}{Strong<JSC::JSCell>=^{JSValue}}{Strong<JSC::JSCell>=^{JSValue}}{Strong<JSC::JSCell>=^{JSValue}}{unique_ptr<JSC::PromiseDeferredTimer, std::__1::default_delete<JSC::PromiseDeferredTimer> >={__compressed_pair<JSC::PromiseDeferredTimer *, std::__1::default_delete<JSC::PromiseDeferredTimer> >=^{PromiseDeferredTimer}}}^{JSCell}^{ClassInfo}^{AtomicStringTable}{SymbolRegistry={HashSet<WTF::SymbolRegistryKey, WTF::DefaultHash<WTF::SymbolRegistryKey>::Hash, WTF::HashTraits<WTF::SymbolRegistryKey> >={HashTable<WTF::SymbolRegistryKey, WTF::SymbolRegistryKey, WTF::IdentityExtractor, WTF::DefaultHash<WTF::SymbolRegistryKey>::Hash, WTF::HashTraits<WTF::SymbolRegistryKey>, WTF::HashTraits<WTF::SymbolRegistryKey> >=^{SymbolRegistryKey}IIII}}}^{CommonIdentifiers}^{ArgList}{SmallStrings=^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}^{JSString}[256^{JSString}]BB}{NumericStrings={array<JSC::NumericStrings::CacheEntry<double>, 64>=[64{CacheEntry<double>=d{String={RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}}]}{array<JSC::NumericStrings::CacheEntry<int>, 64>=[64{CacheEntry<int>=i{String={RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}}]}{array<JSC::NumericStrings::CacheEntry<unsigned int>, 64>=[64{CacheEntry<unsigned int>=I{String={RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}}]}{array<WTF::String, 64>=[64{String={RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}]}}{DateInstanceCache={array<JSC::DateInstanceCache::CacheEntry, 16>=[16{CacheEntry=d{RefPtr<JSC::DateInstanceData, WTF::DumbPtrTraits<JSC::DateInstanceData> >=^{DateInstanceData}}}]}}{unique_ptr<WTF::SimpleStats, std::__1::default_delete<WTF::SimpleStats> >={__compressed_pair<WTF::SimpleStats *, std::__1::default_delete<WTF::SimpleStats> >=^{SimpleStats}}}{WeakGCMap<std::__1::pair<JSC::CustomGetterSetter *, int>, JSC::JSCustomGetterSetterFunction, WTF::PairHash<JSC::CustomGetterSetter *, int>, WTF::HashTraits<std::__1::pair<JSC::CustomGetterSetter *, int> > >=^^?{HashMap<std::__1::pair<JSC::CustomGetterSetter *, int>, JSC::Weak<JSC::JSCustomGetterSetterFunction>, WTF::PairHash<JSC::CustomGetterSetter *, int>, WTF::HashTraits<std::__1::pair<JSC::CustomGetterSetter *, int> >, WTF::HashTraits<JSC::Weak<JSC::JSCustomGetterSetterFunction> > >={HashTable<std::__1::pair<JSC::CustomGetterSetter *, int>, WTF::KeyValuePair<std::__1::pair<JSC::CustomGetterSetter *, int>, JSC::Weak<JSC::JSCustomGetterSetterFunction> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<std::__1::pair<JSC::CustomGetterSetter *, int>, JSC::Weak<JSC::JSCustomGetterSetterFunction> > >, WTF::PairHash<JSC::CustomGetterSetter *, int>, WTF::HashMap<std::__1::pair<JSC::CustomGetterSetter *, int>, JSC::Weak<JSC::JSCustomGetterSetterFunction>, WTF::PairHash<JSC::CustomGetterSetter *, int>, WTF::HashTraits<std::__1::pair<JSC::CustomGetterSetter *, int> >, WTF::HashTraits<JSC::Weak<JSC::JSCustomGetterSetterFunction> > >::KeyValuePairTraits, WTF::HashTraits<std::__1::pair<JSC::CustomGetterSetter *, int> > >=^{KeyValuePair<std::__1::pair<JSC::CustomGetterSetter *, int>, JSC::Weak<JSC::JSCustomGetterSetterFunction> >}IIII}}^{VM}}{WeakGCMap<WTF::StringImpl *, JSC::JSString, WTF::PtrHash<WTF::StringImpl *>, WTF::HashTraits<WTF::StringImpl *> >=^^?{HashMap<WTF::StringImpl *, JSC::Weak<JSC::JSString>, WTF::PtrHash<WTF::StringImpl *>, WTF::HashTraits<WTF::StringImpl *>, WTF::HashTraits<JSC::Weak<JSC::JSString> > >={HashTable<WTF::StringImpl *, WTF::KeyValuePair<WTF::StringImpl *, JSC::Weak<JSC::JSString> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::StringImpl *, JSC::Weak<JSC::JSString> > >, WTF::PtrHash<WTF::StringImpl *>, WTF::HashMap<WTF::StringImpl *, JSC::Weak<JSC::JSString>, WTF::PtrHash<WTF::StringImpl *>, WTF::HashTraits<WTF::StringImpl *>, WTF::HashTraits<JSC::Weak<JSC::JSString> > >::KeyValuePairTraits, WTF::HashTraits<WTF::StringImpl *> >=^{KeyValuePair<WTF::StringImpl *, JSC::Weak<JSC::JSString> >}IIII}}^{VM}}{Strong<JSC::JSString>=^{JSValue}}{WeakGCMap<WTF::SymbolImpl *, JSC::Symbol, WTF::PtrHash<WTF::SymbolImpl *>, WTF::HashTraits<WTF::SymbolImpl *> >=^^?{HashMap<WTF::SymbolImpl *, JSC::Weak<JSC::Symbol>, WTF::PtrHash<WTF::SymbolImpl *>, WTF::HashTraits<WTF::SymbolImpl *>, WTF::HashTraits<JSC::Weak<JSC::Symbol> > >={HashTable<WTF::SymbolImpl *, WTF::KeyValuePair<WTF::SymbolImpl *, JSC::Weak<JSC::Symbol> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::SymbolImpl *, JSC::Weak<JSC::Symbol> > >, WTF::PtrHash<WTF::SymbolImpl *>, WTF::HashMap<WTF::SymbolImpl *, JSC::Weak<JSC::Symbol>, WTF::PtrHash<WTF::SymbolImpl *>, WTF::HashTraits<WTF::SymbolImpl *>, WTF::HashTraits<JSC::Weak<JSC::Symbol> > >::KeyValuePairTraits, WTF::HashTraits<WTF::SymbolImpl *> >=^{KeyValuePair<WTF::SymbolImpl *, JSC::Weak<JSC::Symbol> >}IIII}}^{VM}}{StructureCache={WeakGCMap<JSC::PrototypeKey, JSC::Structure, JSC::PrototypeKeyHash, WTF::HashTraits<JSC::PrototypeKey> >=^^?{HashMap<JSC::PrototypeKey, JSC::Weak<JSC::Structure>, JSC::PrototypeKeyHash, WTF::HashTraits<JSC::PrototypeKey>, WTF::HashTraits<JSC::Weak<JSC::Structure> > >={HashTable<JSC::PrototypeKey, WTF::KeyValuePair<JSC::PrototypeKey, JSC::Weak<JSC::Structure> >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<JSC::PrototypeKey, JSC::Weak<JSC::Structure> > >, JSC::PrototypeKeyHash, WTF::HashMap<JSC::PrototypeKey, JSC::Weak<JSC::Structure>, JSC::PrototypeKeyHash, WTF::HashTraits<JSC::PrototypeKey>, WTF::HashTraits<JSC::Weak<JSC::Structure> > >::KeyValuePairTraits, WTF::HashTraits<JSC::PrototypeKey> >=^{KeyValuePair<JSC::PrototypeKey, JSC::Weak<JSC::Structure> >}IIII}}^{VM}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}}{HashMap<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> >, WTF::RefPtr<JSC::SourceProviderCache, WTF::DumbPtrTraits<JSC::SourceProviderCache> >, WTF::PtrHash<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> > >, WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> > >, WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache, WTF::DumbPtrTraits<JSC::SourceProviderCache> > > >={HashTable<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> >, WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> >, WTF::RefPtr<JSC::SourceProviderCache, WTF::DumbPtrTraits<JSC::SourceProviderCache> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> >, WTF::RefPtr<JSC::SourceProviderCache, WTF::DumbPtrTraits<JSC::SourceProviderCache> > > >, WTF::PtrHash<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> > >, WTF::HashMap<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> >, WTF::RefPtr<JSC::SourceProviderCache, WTF::DumbPtrTraits<JSC::SourceProviderCache> >, WTF::PtrHash<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> > >, WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> > >, WTF::HashTraits<WTF::RefPtr<JSC::SourceProviderCache, WTF::DumbPtrTraits<JSC::SourceProviderCache> > > >::KeyValuePairTraits, WTF::HashTraits<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> > > >=^{KeyValuePair<WTF::RefPtr<JSC::SourceProvider, WTF::DumbPtrTraits<JSC::SourceProvider> >, WTF::RefPtr<JSC::SourceProviderCache, WTF::DumbPtrTraits<JSC::SourceProviderCache> > >}IIII}}^{Interpreter}{unique_ptr<JSC::JITThunks, std::__1::default_delete<JSC::JITThunks> >={__compressed_pair<JSC::JITThunks *, std::__1::default_delete<JSC::JITThunks> >=^{JITThunks}}}{unique_ptr<JSC::FTL::Thunks, std::__1::default_delete<JSC::FTL::Thunks> >={__compressed_pair<JSC::FTL::Thunks *, std::__1::default_delete<JSC::FTL::Thunks> >=^{Thunks}}}{JSValue=(EncodedValueDescriptor=q^{JSCell}{?=ii})}I^{ExecState}^{ExecState}^v^{Instruction}I^vB^{VMEntryScope}^{JSObject}{HashSet<JSC::JSObject *, WTF::PtrHash<JSC::JSObject *>, WTF::HashTraits<JSC::JSObject *> >={HashTable<JSC::JSObject *, JSC::JSObject *, WTF::IdentityExtractor, WTF::PtrHash<JSC::JSObject *>, WTF::HashTraits<JSC::JSObject *>, WTF::HashTraits<JSC::JSObject *> >=^^{JSObject}IIII}}{LocalTimeOffsetCache={LocalTimeOffset=Bi}dddi}{String={RefPtr<WTF::StringImpl, WTF::DumbPtrTraits<WTF::StringImpl> >=^{StringImpl}}}d{unique_ptr<JSC::Profiler::Database, std::__1::default_delete<JSC::Profiler::Database> >={__compressed_pair<JSC::Profiler::Database *, std::__1::default_delete<JSC::Profiler::Database> >=^{Database}}}{RefPtr<JSC::TypedArrayController, WTF::DumbPtrTraits<JSC::TypedArrayController> >=^{TypedArrayController}}^{RegExpCache}{BumpPointerAllocator=^{BumpPointerPool}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{unique_ptr<char [], WTF::FastFree<char []> >={__compressed_pair<char *, WTF::FastFree<char []> >=*}}{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Ref<JSC::CompactVariableMap, WTF::DumbPtrTraits<JSC::CompactVariableMap> >=^{CompactVariableMap}}{unique_ptr<JSC::HasOwnPropertyCache, std::__1::default_delete<JSC::HasOwnPropertyCache> >={__compressed_pair<JSC::HasOwnPropertyCache *, std::__1::default_delete<JSC::HasOwnPropertyCache> >=^{HasOwnPropertyCache}}}^v^vQ^v^v^v^{Exception}^{Exception}BiBB{unique_ptr<JSC::CodeCache, std::__1::default_delete<JSC::CodeCache> >={__compressed_pair<JSC::CodeCache *, std::__1::default_delete<JSC::CodeCache> >=^{CodeCache}}}{unique_ptr<JSC::BuiltinExecutables, std::__1::default_delete<JSC::BuiltinExecutables> >={__compressed_pair<JSC::BuiltinExecutables *, std::__1::default_delete<JSC::BuiltinExecutables> >=^{BuiltinExecutables}}}{HashMap<WTF::String, WTF::RefPtr<JSC::WatchpointSet, WTF::DumbPtrTraits<JSC::WatchpointSet> >, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet, WTF::DumbPtrTraits<JSC::WatchpointSet> > > >={HashTable<WTF::String, WTF::KeyValuePair<WTF::String, WTF::RefPtr<JSC::WatchpointSet, WTF::DumbPtrTraits<JSC::WatchpointSet> > >, WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String, WTF::RefPtr<JSC::WatchpointSet, WTF::DumbPtrTraits<JSC::WatchpointSet> > > >, WTF::StringHash, WTF::HashMap<WTF::String, WTF::RefPtr<JSC::WatchpointSet, WTF::DumbPtrTraits<JSC::WatchpointSet> >, WTF::StringHash, WTF::HashTraits<WTF::String>, WTF::HashTraits<WTF::RefPtr<JSC::WatchpointSet, WTF::DumbPtrTraits<JSC::WatchpointSet> > > >::KeyValuePairTraits, WTF::HashTraits<WTF::String> >=^{KeyValuePair<WTF::String, WTF::RefPtr<JSC::WatchpointSet, WTF::DumbPtrTraits<JSC::WatchpointSet> > >}IIII}}{unique_ptr<JSC::TypeProfiler, std::__1::default_delete<JSC::TypeProfiler> >={__compressed_pair<JSC::TypeProfiler *, std::__1::default_delete<JSC::TypeProfiler> >=^{TypeProfiler}}}{unique_ptr<JSC::TypeProfilerLog, std::__1::default_delete<JSC::TypeProfilerLog> >={__compressed_pair<JSC::TypeProfilerLog *, std::__1::default_delete<JSC::TypeProfilerLog> >=^{TypeProfilerLog}}}IB{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}{Vector<JSC::ScratchBuffer *, 0, WTF::CrashOnOverflow, 16>=^^{ScratchBuffer}II}Q{InlineWatchpointSet=Q}{FunctionHasExecutedCache={unordered_map<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > >, std::__1::hash<long>, std::__1::equal_to<long>, WTF::FastAllocator<std::__1::pair<const long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > > > >={__hash_table<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, std::__1::hash<long>, true>, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, std::__1::equal_to<long>, true>, WTF::FastAllocator<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *> *[], std::__1::__bucket_list_deallocator<WTF::FastAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *> **, std::__1::__bucket_list_deallocator<WTF::FastAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *>}{__bucket_list_deallocator<WTF::FastAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *> *> >={__compressed_pair<unsigned long, WTF::FastAllocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *>, WTF::FastAllocator<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long, std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, std::__1::hash<long>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<long, std::__1::__hash_value_type<long, std::__1::unordered_map<JSC::FunctionHasExecutedCache::FunctionRange, bool, WTF::HashMethod<JSC::FunctionHasExecutedCache::FunctionRange>, std::__1::equal_to<JSC::FunctionHasExecutedCache::FunctionRange>, WTF::FastAllocator<std::__1::pair<const JSC::FunctionHasExecutedCache::FunctionRange, bool> > > >, std::__1::equal_to<long>, true> >=f}}}}{unique_ptr<JSC::ControlFlowProfiler, std::__1::default_delete<JSC::ControlFlowProfiler> >={__compressed_pair<JSC::ControlFlowProfiler *, std::__1::default_delete<JSC::ControlFlowProfiler> >=^{ControlFlowProfiler}}}I{Deque<std::__1::unique_ptr<JSC::QueuedTask, std::__1::default_delete<JSC::QueuedTask> >, 0>=QQ{VectorBuffer<std::__1::unique_ptr<JSC::QueuedTask, std::__1::default_delete<JSC::QueuedTask> >, 0>=^{unique_ptr<JSC::QueuedTask, std::__1::default_delete<JSC::QueuedTask> >}II}}{MallocPtr<long long, WTF::FastMalloc>=^q}{VMTraps={Box<WTF::Lock>={RefPtr<WTF::Box<WTF::Lock>::Data, WTF::DumbPtrTraits<WTF::Box<WTF::Lock>::Data> >=^{Data}}}{Ref<WTF::AutomaticThreadCondition, WTF::DumbPtrTraits<WTF::AutomaticThreadCondition> >=^{AutomaticThreadCondition}}(?=CC)BB{RefPtr<JSC::VMTraps::SignalSender, WTF::DumbPtrTraits<JSC::VMTraps::SignalSender> >=^{SignalSender}}}{RefPtr<JSC::Watchdog, WTF::DumbPtrTraits<JSC::Watchdog> >=^{Watchdog}}{unique_ptr<JSC::HeapProfiler, std::__1::default_delete<JSC::HeapProfiler> >={__compressed_pair<JSC::HeapProfiler *, std::__1::default_delete<JSC::HeapProfiler> >=^{HeapProfiler}}}{RefPtr<JSC::SamplingProfiler, WTF::DumbPtrTraits<JSC::SamplingProfiler> >=^{SamplingProfiler}}{unique_ptr<JSC::FuzzerAgent, std::__1::default_delete<JSC::FuzzerAgent> >={__compressed_pair<JSC::FuzzerAgent *, std::__1::default_delete<JSC::FuzzerAgent> >=^{FuzzerAgent}}}{unique_ptr<JSC::ShadowChicken, std::__1::default_delete<JSC::ShadowChicken> >={__compressed_pair<JSC::ShadowChicken *, std::__1::default_delete<JSC::ShadowChicken> >=^{ShadowChicken}}}{unique_ptr<JSC::BytecodeIntrinsicRegistry, std::__1::default_delete<JSC::BytecodeIntrinsicRegistry> >={__compressed_pair<JSC::BytecodeIntrinsicRegistry *, std::__1::default_delete<JSC::BytecodeIntrinsicRegistry> >=^{BytecodeIntrinsicRegistry}}}{Function<void (JSC::VM &)>={unique_ptr<WTF::Detail::CallableWrapperBase<void, JSC::VM &>, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, JSC::VM &> > >={__compressed_pair<WTF::Detail::CallableWrapperBase<void, JSC::VM &> *, std::__1::default_delete<WTF::Detail::CallableWrapperBase<void, JSC::VM &> > >=^{CallableWrapperBase<void, JSC::VM &>}}}}^{VM}^{VM}}16@0:8, name: vm
- (void)shrinkFootprintWhenIdle;
- (id)externalRememberedSet;
- (id)externalObjectGraph;
-     // Error parsing type: ^{Lock={Atomic<unsigned char>={atomic<unsigned char>=AC}}}16@0:8, name: externalDataMutex

@end

