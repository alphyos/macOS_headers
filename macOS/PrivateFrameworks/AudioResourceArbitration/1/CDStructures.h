//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

@class aura_ConfigurationHints;

#pragma mark Named Structures

struct AdaptResponse {
    struct set<dspd::IOControllerNodeConfiguration, std::__1::less<dspd::IOControllerNodeConfiguration>, std::__1::allocator<dspd::IOControllerNodeConfiguration>> _field1;
    struct set<dspd::NodeConfiguration, std::__1::less<dspd::NodeConfiguration>, std::__1::allocator<dspd::NodeConfiguration>> _field2;
    struct set<AMCP::Wire_Description, std::__1::less<AMCP::Wire_Description>, std::__1::allocator<AMCP::Wire_Description>> _field3;
    struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> _field4;
    struct set<AMCP::Wire_Identifier, std::__1::less<AMCP::Wire_Identifier>, std::__1::allocator<AMCP::Wire_Identifier>> _field5;
    struct vector<dspd::IOControllerConfiguration, std::__1::allocator<dspd::IOControllerConfiguration>> _field6;
    struct map<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>>> _field7;
    struct map<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>>> _field8;
    struct vector<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>, std::__1::allocator<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>>> _field9;
};

struct Address {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
};

struct AudioChannelDescription;

struct AudioFormat {
    struct AudioStreamBasicDescription mASBD;
    struct ChannelLayout mLayout;
};

struct AudioStreamBasicDescription {
    double mSampleRate;
    unsigned int mFormatID;
    unsigned int mFormatFlags;
    unsigned int mBytesPerPacket;
    unsigned int mFramesPerPacket;
    unsigned int mBytesPerFrame;
    unsigned int mChannelsPerFrame;
    unsigned int mBitsPerChannel;
    unsigned int mReserved;
};

struct ChangedObject;

struct ChannelLayout {
    unsigned int mLayoutTag;
    struct optional<std::__1::bitset<32>> mBitmap;
    struct optional<std::__1::vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>>> mChannelDescriptions;
};

struct ConfigurationChangeDescription {
    unsigned char _field1;
    struct ConfigurationChangeRecord _field2;
    struct map<unsigned int, aura::ConfigurationChangeRecord, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, aura::ConfigurationChangeRecord>>> _field3;
};

struct ConfigurationChangeRecord {
    struct vector<aura::ObjectReference, std::__1::allocator<aura::ObjectReference>> _field1;
    struct vector<aura::ObjectReference, std::__1::allocator<aura::ObjectReference>> _field2;
    struct vector<aura::ChangedObject, std::__1::allocator<aura::ChangedObject>> _field3;
};

struct Data {
    struct map<unsigned int, (anonymous namespace)::SessionData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, (anonymous namespace)::SessionData>>> sessionData_;
    function_439a5227 configurationChangeNotifier_;
    struct vector<id<aura_Clock>, std::__1::allocator<id<aura_Clock>>> clocks_;
};

struct DeviceConfiguration;

struct DeviceDescription;

struct IOControllerConfiguration;

struct IOControllerDescription;

struct IOControllerProjection;

struct IOControllerTopology {
    struct set<aura::IOControllerTopology::IOStreamMapping, std::__1::less<aura::IOControllerTopology::IOStreamMapping>, std::__1::allocator<aura::IOControllerTopology::IOStreamMapping>> mIOStreamMappings;
};

struct InitiationTriggerSpecification {
    unsigned int mTrigger;
    optional_cd8a9b08 mInitiatingUID;
    struct optional<AVAudioSessionActivationAccessibilityPreference> mAccessibilityPreference;
    struct optional<AVAudioSessionActivationCallDirection> mCallDirection;
};

struct MicrophoneConfiguration {
    unsigned int _field1;
    struct StringRef _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    struct vector<aura::MicrophonePolarPattern, std::__1::allocator<aura::MicrophonePolarPattern>> _field6;
    _Bool _field7;
};

struct MicrophonePreference;

struct NegotiateResponse {
    struct vector<dspd::DeviceConfiguration, std::__1::allocator<dspd::DeviceConfiguration>> _field1;
    struct vector<dspd::IOControllerProjection, std::__1::allocator<dspd::IOControllerProjection>> _field2;
};

struct ObjectRef<const __CFString *> {
    struct __CFString *mCFObject;
};

struct ObjectReference;

struct PortDescription;

struct PortRecord<bool>;

struct PortRecord<double>;

struct PortRecord<float>;

struct ResourceArbitratorDependencyInjection {
    shared_ptr_940c565d _field1;
    struct shared_ptr<caulk::reactor<aura::hw::HardwareSnapshotAssembler *>> _field2;
    struct shared_ptr<caulk::reactor<aura::itf::RouteNegotiator *>> _field3;
    struct shared_ptr<caulk::reactor<aura::itf::HardwareObjectAssembler *>> _field4;
    struct shared_ptr<caulk::reactor<aura::itf::NotificationDispatcher *>> _field5;
};

struct SMPTETime {
    short _field1;
    short _field2;
    unsigned int _field3;
    unsigned int _field4;
    unsigned int _field5;
    short _field6;
    short _field7;
    short _field8;
    short _field9;
};

struct SimulatedConfigurationChangeDescription {
    struct map<unsigned int, bool, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, bool>>> _field1;
    struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> _field2;
    struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> _field3;
    struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> _field4;
};

struct SimulatedMicrophoneConfigurationDescription {
    struct MicrophoneConfiguration _field1;
    struct vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>> _field2;
};

struct StreamDescription;

struct StringRef {
    struct ObjectRef<const __CFString *> mObject;
};

struct TimeStamp {
    double _field1;
    unsigned long long _field2;
    double _field3;
    unsigned long long _field4;
    struct SMPTETime _field5;
    unsigned int _field6;
    unsigned int _field7;
};

struct USBSection {
    struct StringRef _field1;
    unsigned int _field2;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct bitset<32> {
    unsigned long long __first_;
};

struct duration<long long, std::__1::ratio<1, 1000>> {
    long long _field1;
};

struct error_category;

struct error_code {
    int _field1;
    struct error_category *_field2;
};

struct expected<CA::TimeStamp, std::__1::error_code> {
    union constexpr_storage<CA::TimeStamp, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> {
    union storage<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> {
    union storage<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<dspd::AdaptResponse, std::__1::error_code> {
    union storage<dspd::AdaptResponse, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<dspd::NegotiateResponse, std::__1::error_code> {
    union storage<dspd::NegotiateResponse, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> {
    union storage<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::error_code> {
    union storage<std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<wrid<__weak id<aura_Control>, void>, std::__1::error_code> {
    union storage<wrid<__weak id<aura_Control>, void>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct expected<wrid<id, void>, std::__1::error_code> {
    union storage<wrid<id, void>, std::__1::error_code> _field1;
    _Bool _field2;
};

struct function<void (aura::ConfigurationChangeCause)> {
    struct __value_func<void (aura::ConfigurationChangeCause)> {
        struct type _field1;
        struct __base<void (aura::ConfigurationChangeCause)> *_field2;
    } _field1;
};

struct function<void (aura::ConfigurationChangeDescription)> {
    struct __value_func<void (aura::ConfigurationChangeDescription)> {
        struct type __buf_;
        struct __base<void (aura::ConfigurationChangeDescription)> *__f_;
    } __f_;
};

struct function<void (aura::IOEvent)> {
    struct __value_func<void (aura::IOEvent)> {
        struct type _field1;
        struct __base<void (aura::IOEvent)> *_field2;
    } _field1;
};

struct function<void (caulk::expected<aura::ConfigurationChangeDescription, std::__1::error_code>)> {
    struct __value_func<void (caulk::expected<aura::ConfigurationChangeDescription, std::__1::error_code>)> {
        struct type _field1;
        struct __base<void (caulk::expected<aura::ConfigurationChangeDescription, std::__1::error_code>)> *_field2;
    } _field1;
};

struct function<void (std::__1::error_code)> {
    struct __value_func<void (std::__1::error_code)> {
        struct type _field1;
        struct __base<void (std::__1::error_code)> *_field2;
    } _field1;
};

struct function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)> {
    struct __value_func<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)> {
        struct type _field1;
        struct __base<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)> *_field2;
    } _field1;
};

struct map<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy, std::__1::less<__weak id<aura_VirtualPort>>, std::__1::allocator<std::__1::pair<const __weak id<aura_VirtualPort>, aura::PortRoutingPolicy>>> {
    struct __tree<std::__1::__value_type<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy>, std::__1::__map_value_compare<__weak id<aura_VirtualPort>, std::__1::__value_type<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy>, std::__1::less<__weak id<aura_VirtualPort>>, true>, std::__1::allocator<std::__1::__value_type<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<__weak id<aura_VirtualPort>, std::__1::__value_type<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy>, std::__1::less<__weak id<aura_VirtualPort>>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
    struct __tree<std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::__map_value_compare<aura::IOControllerType, std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<aura::IOControllerType>, true>, std::__1::allocator<std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<aura::IOControllerType, std::__1::__value_type<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<aura::IOControllerType>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>> {
    struct __tree<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>, std::__1::allocator<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<aura::PortType, std::__1::__value_type<aura::PortType, aura::PortTypeRoutingPolicy>, std::__1::less<aura::PortType>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, (anonymous namespace)::SessionData, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, (anonymous namespace)::SessionData>>> {
    struct __tree<std::__1::__value_type<unsigned int, (anonymous namespace)::SessionData>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, (anonymous namespace)::SessionData>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, (anonymous namespace)::SessionData>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, (anonymous namespace)::SessionData>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, (anonymous namespace)::SessionData>, std::__1::less<unsigned int>, true>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct map<unsigned int, aura::ConfigurationChangeRecord, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, aura::ConfigurationChangeRecord>>> {
    struct __tree<std::__1::__value_type<unsigned int, aura::ConfigurationChangeRecord>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura::ConfigurationChangeRecord>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, aura::ConfigurationChangeRecord>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, aura::ConfigurationChangeRecord>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, aura::ConfigurationChangeRecord>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, bool, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, bool>>> {
    struct __tree<std::__1::__value_type<unsigned int, bool>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, bool>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, bool>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<aura::SimulatedIOController, std::__1::allocator<aura::SimulatedIOController>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>>> {
    struct __tree<std::__1::__value_type<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, std::__1::vector<dspd::AdaptResponse::VolumeControlSupport, std::__1::allocator<dspd::AdaptResponse::VolumeControlSupport>>>, std::__1::less<unsigned long long>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct optional<AVAudioDSPFlavor> {
    CDUnion_bdf8cba2 ;
    _Bool __engaged_;
};

struct optional<AVAudioSessionActivationAccessibilityPreference> {
    CDUnion_5c9634bb ;
    _Bool __engaged_;
};

struct optional<AVAudioSessionActivationCallDirection> {
    CDUnion_5c9634bb ;
    _Bool __engaged_;
};

struct optional<applesauce::CF::StringRef> {
    union {
        char __null_state_;
        struct StringRef __val_;
    } ;
    _Bool __engaged_;
};

struct optional<aura::AudioFormat> {
    union {
        char __null_state_;
        struct AudioFormat __val_;
    } ;
    _Bool __engaged_;
};

struct optional<aura::CameraDirection> {
    CDUnion_fd7d43d3 ;
    _Bool __engaged_;
};

struct optional<aura::HapticStreamingMode> {
    CDUnion_fd7d43d3 ;
    _Bool __engaged_;
};

struct optional<aura::IOControllerTopology> {
    union {
        char __null_state_;
        struct IOControllerTopology __val_;
    } ;
    _Bool __engaged_;
};

struct optional<aura::InitiationTriggerSpecification> {
    union {
        char __null_state_;
        struct InitiationTriggerSpecification __val_;
    } ;
    _Bool __engaged_;
};

struct optional<aura::MicrophoneConfiguration> {
    union {
        char _field1;
        struct MicrophoneConfiguration _field2;
    } _field1;
    _Bool _field2;
};

struct optional<aura::USBSection> {
    union {
        char _field1;
        struct USBSection _field2;
    } _field1;
    _Bool _field2;
};

struct optional<bool> {
    union {
        char __null_state_;
        _Bool __val_;
    } ;
    _Bool __engaged_;
};

struct optional<double> {
    union {
        char __null_state_;
        double __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::bitset<32>> {
    union {
        char __null_state_;
        struct bitset<32> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::map<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy, std::__1::less<__weak id<aura_VirtualPort>>, std::__1::allocator<std::__1::pair<const __weak id<aura_VirtualPort>, aura::PortRoutingPolicy>>>> {
    union {
        char __null_state_;
        struct map<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy, std::__1::less<__weak id<aura_VirtualPort>>, std::__1::allocator<std::__1::pair<const __weak id<aura_VirtualPort>, aura::PortRoutingPolicy>>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>>> {
    union {
        char __null_state_;
        struct map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::tuple<__weak id<aura_Box>, bool>> {
    union {
        char __null_state_;
        struct tuple<__weak id<aura_Box>, bool> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::tuple<__weak id<aura_VirtualPort>, bool>> {
    union {
        char __null_state_;
        struct tuple<__weak id<aura_VirtualPort>, bool> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>>> {
    union {
        char __null_state_;
        struct vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>> {
    union {
        char __null_state_;
        vector_c6bb1d04 __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>>> {
    union {
        char __null_state_;
        struct vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::vector<aura::USBSection, std::__1::allocator<aura::USBSection>>> {
    union {
        char _field1;
        struct vector<aura::USBSection, std::__1::allocator<aura::USBSection>> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<std::__1::vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>>> {
    union {
        char __null_state_;
        struct vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<std::__1::vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>> {
    union {
        char __null_state_;
        struct vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<unsigned int> {
    CDUnion_bdf8cba2 ;
    _Bool __engaged_;
};

struct optional<wrid<__weak id<aura_Clock>, void>> {
    union {
        char __null_state_;
        struct wrid<__weak id<aura_Clock>, void> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<wrid<__weak id<aura_Device>, void>> {
    union {
        char _field1;
        struct wrid<__weak id<aura_Device>, void> _field2;
    } _field1;
    _Bool _field2;
};

struct optional<wrid<__weak id<aura_VirtualPort>, void>> {
    union {
        char __null_state_;
        struct wrid<__weak id<aura_VirtualPort>, void> __val_;
    } ;
    _Bool __engaged_;
};

struct optional<wrop<aura_ConfigurationHints *, void>> {
    union {
        char __null_state_;
        struct wrop<aura_ConfigurationHints *, void> __val_;
    } ;
    _Bool __engaged_;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>;

struct reactor<aura::hw::Device *>;

struct reactor<aura::hw::Hardware *>;

struct reactor<aura::hw::HardwareSnapshotAssembler *>;

struct reactor<aura::hw::Port *>;

struct reactor<aura::hw::Stream *>;

struct reactor<aura::itf::Device *>;

struct reactor<aura::itf::HardwareObjectAssembler *>;

struct reactor<aura::itf::IOController *>;

struct reactor<aura::itf::IOStream *>;

struct reactor<aura::itf::NotificationDispatcher *>;

struct reactor<aura::itf::Port *>;

struct reactor<aura::itf::RouteNegotiator *>;

struct reactor<aura::itf::Stream *>;

struct reactor<aura::itf::VirtualPort *>;

struct set<AMCP::Wire_Description, std::__1::less<AMCP::Wire_Description>, std::__1::allocator<AMCP::Wire_Description>> {
    struct __tree<AMCP::Wire_Description, std::__1::less<AMCP::Wire_Description>, std::__1::allocator<AMCP::Wire_Description>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<AMCP::Wire_Description, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<AMCP::Wire_Description>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<AMCP::Wire_Identifier, std::__1::less<AMCP::Wire_Identifier>, std::__1::allocator<AMCP::Wire_Identifier>> {
    struct __tree<AMCP::Wire_Identifier, std::__1::less<AMCP::Wire_Identifier>, std::__1::allocator<AMCP::Wire_Identifier>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<AMCP::Wire_Identifier, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<AMCP::Wire_Identifier>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<aura::IOControllerTopology::IOStreamMapping, std::__1::less<aura::IOControllerTopology::IOStreamMapping>, std::__1::allocator<aura::IOControllerTopology::IOStreamMapping>> {
    struct __tree<aura::IOControllerTopology::IOStreamMapping, std::__1::less<aura::IOControllerTopology::IOStreamMapping>, std::__1::allocator<aura::IOControllerTopology::IOStreamMapping>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<aura::IOControllerTopology::IOStreamMapping, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<aura::IOControllerTopology::IOStreamMapping>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<dspd::IOControllerNodeConfiguration, std::__1::less<dspd::IOControllerNodeConfiguration>, std::__1::allocator<dspd::IOControllerNodeConfiguration>> {
    struct __tree<dspd::IOControllerNodeConfiguration, std::__1::less<dspd::IOControllerNodeConfiguration>, std::__1::allocator<dspd::IOControllerNodeConfiguration>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<dspd::IOControllerNodeConfiguration, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<dspd::IOControllerNodeConfiguration>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<dspd::NodeConfiguration, std::__1::less<dspd::NodeConfiguration>, std::__1::allocator<dspd::NodeConfiguration>> {
    struct __tree<dspd::NodeConfiguration, std::__1::less<dspd::NodeConfiguration>, std::__1::allocator<dspd::NodeConfiguration>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<dspd::NodeConfiguration, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<dspd::NodeConfiguration>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct set<id<aura_IOStreamPriv>, std::__1::less<id<aura_IOStreamPriv>>, std::__1::allocator<id<aura_IOStreamPriv>>> {
    struct __tree<id<aura_IOStreamPriv>, std::__1::less<id<aura_IOStreamPriv>>, std::__1::allocator<id<aura_IOStreamPriv>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<id<aura_IOStreamPriv>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __value_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::less<id<aura_IOStreamPriv>>> {
            unsigned long long __value_;
        } __pair3_;
    } __tree_;
};

struct set<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
    struct __tree<std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::basic_string<char>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::basic_string<char>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::less<std::__1::basic_string<char>>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<caulk::reactor<aura::hw::Hardware *>> {
    struct reactor<aura::hw::Hardware *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::hw::HardwareSnapshotAssembler *>> {
    struct reactor<aura::hw::HardwareSnapshotAssembler *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::Device *>> {
    struct reactor<aura::itf::Device *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::HardwareObjectAssembler *>> {
    struct reactor<aura::itf::HardwareObjectAssembler *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::IOController *>> {
    struct reactor<aura::itf::IOController *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::IOStream *>> {
    struct reactor<aura::itf::IOStream *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::NotificationDispatcher *>> {
    struct reactor<aura::itf::NotificationDispatcher *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::Port *>> {
    struct reactor<aura::itf::Port *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::RouteNegotiator *>> {
    struct reactor<aura::itf::RouteNegotiator *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::Stream *>> {
    struct reactor<aura::itf::Stream *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<caulk::reactor<aura::itf::VirtualPort *>> {
    struct reactor<aura::itf::VirtualPort *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct synchronized<(anonymous namespace)::Data, caulk::mach::unfair_lock, caulk::empty_atomic_interface<(anonymous namespace)::Data>> {
    struct unfair_lock mMutex;
    struct Data mObject;
};

struct tuple<__weak id<aura_Box>, bool> {
    struct __tuple_impl<std::__1::__tuple_indices<0, 1>, __weak id<aura_Box>, bool> {
        id __value_;
        _Bool __value_;
    } __base_;
};

struct tuple<__weak id<aura_VirtualPort>, bool> {
    struct __tuple_impl<std::__1::__tuple_indices<0, 1>, __weak id<aura_VirtualPort>, bool> {
        id __value_;
        _Bool __value_;
    } __base_;
};

struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>;

struct tuple<double, double>;

struct type {
    unsigned char __lx[32];
};

struct unfair_lock {
    struct os_unfair_lock_s m_lock;
};

struct vector<AudioChannelDescription, std::__1::allocator<AudioChannelDescription>> {
    struct AudioChannelDescription *__begin_;
    struct AudioChannelDescription *__end_;
    struct __compressed_pair<AudioChannelDescription *, std::__1::allocator<AudioChannelDescription>> {
        struct AudioChannelDescription *__value_;
    } __end_cap_;
};

struct vector<__weak id<aura_Box>, std::__1::allocator<__weak id<aura_Box>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Box>*, std::__1::allocator<__weak id<aura_Box>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Clock>, std::__1::allocator<__weak id<aura_Clock>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Clock>*, std::__1::allocator<__weak id<aura_Clock>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Control>, std::__1::allocator<__weak id<aura_Control>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Control>*, std::__1::allocator<__weak id<aura_Control>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Device>, std::__1::allocator<__weak id<aura_Device>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Device>*, std::__1::allocator<__weak id<aura_Device>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Driver>, std::__1::allocator<__weak id<aura_Driver>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Driver>*, std::__1::allocator<__weak id<aura_Driver>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_IOController>*, std::__1::allocator<__weak id<aura_IOController>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_IOStream>, std::__1::allocator<__weak id<aura_IOStream>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_IOStream>*, std::__1::allocator<__weak id<aura_IOStream>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Port>, std::__1::allocator<__weak id<aura_Port>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Port>*, std::__1::allocator<__weak id<aura_Port>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_PortPriv>, std::__1::allocator<__weak id<aura_PortPriv>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_PortPriv>*, std::__1::allocator<__weak id<aura_PortPriv>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_Stream>, std::__1::allocator<__weak id<aura_Stream>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Stream>*, std::__1::allocator<__weak id<aura_Stream>>> {
        id *_field1;
    } _field3;
};

struct vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<aura_VirtualPort>*, std::__1::allocator<__weak id<aura_VirtualPort>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<__weak id<dsp_DSPModule>, std::__1::allocator<__weak id<dsp_DSPModule>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<dsp_DSPModule>*, std::__1::allocator<__weak id<dsp_DSPModule>>> {
        id *_field1;
    } _field3;
};

struct vector<applesauce::CF::StringRef, std::__1::allocator<applesauce::CF::StringRef>> {
    struct StringRef *_field1;
    struct StringRef *_field2;
    struct __compressed_pair<applesauce::CF::StringRef *, std::__1::allocator<applesauce::CF::StringRef>> {
        struct StringRef *_field1;
    } _field3;
};

struct vector<aura::ChangedObject, std::__1::allocator<aura::ChangedObject>> {
    struct ChangedObject *_field1;
    struct ChangedObject *_field2;
    struct __compressed_pair<aura::ChangedObject *, std::__1::allocator<aura::ChangedObject>> {
        struct ChangedObject *_field1;
    } _field3;
};

struct vector<aura::MicrophoneConfiguration, std::__1::allocator<aura::MicrophoneConfiguration>> {
    struct MicrophoneConfiguration *_field1;
    struct MicrophoneConfiguration *_field2;
    struct __compressed_pair<aura::MicrophoneConfiguration *, std::__1::allocator<aura::MicrophoneConfiguration>> {
        struct MicrophoneConfiguration *_field1;
    } _field3;
};

struct vector<aura::MicrophonePolarPattern, std::__1::allocator<aura::MicrophonePolarPattern>> {
    unsigned int *_field1;
    unsigned int *_field2;
    struct __compressed_pair<aura::MicrophonePolarPattern *, std::__1::allocator<aura::MicrophonePolarPattern>> {
        unsigned int *_field1;
    } _field3;
};

struct vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>> {
    struct MicrophonePreference *__begin_;
    struct MicrophonePreference *__end_;
    struct __compressed_pair<aura::MicrophonePreference *, std::__1::allocator<aura::MicrophonePreference>> {
        struct MicrophonePreference *__value_;
    } __end_cap_;
};

struct vector<aura::ObjectReference, std::__1::allocator<aura::ObjectReference>> {
    struct ObjectReference *_field1;
    struct ObjectReference *_field2;
    struct __compressed_pair<aura::ObjectReference *, std::__1::allocator<aura::ObjectReference>> {
        struct ObjectReference *_field1;
    } _field3;
};

struct vector<aura::PortRecord<bool>, std::__1::allocator<aura::PortRecord<bool>>> {
    struct PortRecord<bool> *_field1;
    struct PortRecord<bool> *_field2;
    struct __compressed_pair<aura::PortRecord<bool>*, std::__1::allocator<aura::PortRecord<bool>>> {
        struct PortRecord<bool> *_field1;
    } _field3;
};

struct vector<aura::PortRecord<double>, std::__1::allocator<aura::PortRecord<double>>> {
    struct PortRecord<double> *_field1;
    struct PortRecord<double> *_field2;
    struct __compressed_pair<aura::PortRecord<double>*, std::__1::allocator<aura::PortRecord<double>>> {
        struct PortRecord<double> *_field1;
    } _field3;
};

struct vector<aura::USBSection, std::__1::allocator<aura::USBSection>> {
    struct USBSection *_field1;
    struct USBSection *_field2;
    struct __compressed_pair<aura::USBSection *, std::__1::allocator<aura::USBSection>> {
        struct USBSection *_field1;
    } _field3;
};

struct vector<aura::VolumeUpdateResult, std::__1::allocator<aura::VolumeUpdateResult>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<aura::VolumeUpdateResult *, std::__1::allocator<aura::VolumeUpdateResult>> {
        int *_field1;
    } _field3;
};

struct vector<aura_DeviceHints *, std::__1::allocator<aura_DeviceHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_DeviceHints *__strong *, std::__1::allocator<aura_DeviceHints *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<aura_IOControllerHints *, std::__1::allocator<aura_IOControllerHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_IOControllerHints *__strong *, std::__1::allocator<aura_IOControllerHints *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_IOStreamHints *__strong *, std::__1::allocator<aura_IOStreamHints *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_StreamHints *__strong *, std::__1::allocator<aura_StreamHints *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<aura_VirtualPortHints *, std::__1::allocator<aura_VirtualPortHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_VirtualPortHints *__strong *, std::__1::allocator<aura_VirtualPortHints *>> {
        id *__value_;
    } __end_cap_;
};

struct vector<const aura_ConfigurationChangeRequest *, std::__1::allocator<const aura_ConfigurationChangeRequest *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<const aura_ConfigurationChangeRequest *__strong *, std::__1::allocator<const aura_ConfigurationChangeRequest *>> {
        id *_field1;
    } _field3;
};

struct vector<dspd::DeviceConfiguration, std::__1::allocator<dspd::DeviceConfiguration>> {
    struct DeviceConfiguration *_field1;
    struct DeviceConfiguration *_field2;
    struct __compressed_pair<dspd::DeviceConfiguration *, std::__1::allocator<dspd::DeviceConfiguration>> {
        struct DeviceConfiguration *_field1;
    } _field3;
};

struct vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>> {
    struct DeviceDescription *__begin_;
    struct DeviceDescription *__end_;
    struct __compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> {
        struct DeviceDescription *__value_;
    } __end_cap_;
};

struct vector<dspd::IOControllerConfiguration, std::__1::allocator<dspd::IOControllerConfiguration>> {
    struct IOControllerConfiguration *_field1;
    struct IOControllerConfiguration *_field2;
    struct __compressed_pair<dspd::IOControllerConfiguration *, std::__1::allocator<dspd::IOControllerConfiguration>> {
        struct IOControllerConfiguration *_field1;
    } _field3;
};

struct vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>> {
    struct IOControllerDescription *__begin_;
    struct IOControllerDescription *__end_;
    struct __compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> {
        struct IOControllerDescription *__value_;
    } __end_cap_;
};

struct vector<dspd::IOControllerProjection, std::__1::allocator<dspd::IOControllerProjection>> {
    struct IOControllerProjection *_field1;
    struct IOControllerProjection *_field2;
    struct __compressed_pair<dspd::IOControllerProjection *, std::__1::allocator<dspd::IOControllerProjection>> {
        struct IOControllerProjection *_field1;
    } _field3;
};

struct vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>> {
    struct PortDescription *__begin_;
    struct PortDescription *__end_;
    struct __compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> {
        struct PortDescription *__value_;
    } __end_cap_;
};

struct vector<dspd::PortRecord<bool>, std::__1::allocator<dspd::PortRecord<bool>>> {
    struct PortRecord<bool> *_field1;
    struct PortRecord<bool> *_field2;
    struct __compressed_pair<dspd::PortRecord<bool>*, std::__1::allocator<dspd::PortRecord<bool>>> {
        struct PortRecord<bool> *_field1;
    } _field3;
};

struct vector<dspd::PortRecord<float>, std::__1::allocator<dspd::PortRecord<float>>> {
    struct PortRecord<float> *_field1;
    struct PortRecord<float> *_field2;
    struct __compressed_pair<dspd::PortRecord<float>*, std::__1::allocator<dspd::PortRecord<float>>> {
        struct PortRecord<float> *_field1;
    } _field3;
};

struct vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>> {
    struct StreamDescription *__begin_;
    struct StreamDescription *__end_;
    struct __compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> {
        struct StreamDescription *__value_;
    } __end_cap_;
};

struct vector<id<aura_Clock>, std::__1::allocator<id<aura_Clock>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__strong id<aura_Clock>*, std::__1::allocator<id<aura_Clock>>> {
        id *__value_;
    } __end_cap_;
};

struct vector<long long, std::__1::allocator<long long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *_field1;
    } _field3;
};

struct vector<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>, std::__1::allocator<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>>> {
    struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus> *_field1;
    struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus> *_field2;
    struct __compressed_pair<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>*, std::__1::allocator<std::__1::pair<unsigned long long, dspd::AdaptResponse::CaptureStatus>>> {
        struct pair<unsigned long long, dspd::AdaptResponse::CaptureStatus> *_field1;
    } _field3;
};

struct vector<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field2;
    struct __compressed_pair<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>*, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
        struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    } _field3;
};

struct vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>> {
    struct tuple<double, double> *_field1;
    struct tuple<double, double> *_field2;
    struct __compressed_pair<std::__1::tuple<double, double>*, std::__1::allocator<std::__1::tuple<double, double>>> {
        struct tuple<double, double> *_field1;
    } _field3;
};

struct weak_ptr<caulk::reactor<aura::hw::Device *>> {
    struct reactor<aura::hw::Device *> *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<caulk::reactor<aura::hw::Port *>> {
    struct reactor<aura::hw::Port *> *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<caulk::reactor<aura::hw::Stream *>> {
    struct reactor<aura::hw::Stream *> *_field1;
    struct __shared_weak_count *_field2;
};

struct weak_ptr<caulk::reactor<aura::itf::Port *>> {
    struct reactor<aura::itf::Port *> *_field1;
    struct __shared_weak_count *_field2;
};

struct wrid<__weak id<aura_Clock>, void> {
    id val;
};

struct wrid<__weak id<aura_Control>, void> {
    id _field1;
};

struct wrid<__weak id<aura_Device>, void> {
    id _field1;
};

struct wrid<__weak id<aura_VirtualPort>, void> {
    id val;
};

struct wrid<id, void> {
    id _field1;
};

struct wrop<aura_ConfigurationHints *, void> {
    aura_ConfigurationHints *val;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct duration<long long, std::__1::ratio<1, 1000>> {
    long long _field1;
} duration_34584d68;

typedef struct expected<CA::TimeStamp, std::__1::error_code> {
    union constexpr_storage<CA::TimeStamp, std::__1::error_code> _field1;
    _Bool _field2;
} expected_11f03402;

typedef struct expected<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> {
    union storage<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> _field1;
    _Bool _field2;
} expected_73a2de47;

typedef struct expected<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> {
    union storage<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> _field1;
    _Bool _field2;
} expected_cf04bbb0;

typedef struct expected<dspd::AdaptResponse, std::__1::error_code> {
    union storage<dspd::AdaptResponse, std::__1::error_code> _field1;
    _Bool _field2;
} expected_6c7599df;

typedef struct expected<dspd::NegotiateResponse, std::__1::error_code> {
    union storage<dspd::NegotiateResponse, std::__1::error_code> _field1;
    _Bool _field2;
} expected_2b9a0a05;

typedef struct expected<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> {
    union storage<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_01e6cd2c;

typedef struct expected<std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::error_code> {
    union storage<std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_0085864a;

typedef struct expected<wrid<__weak id<aura_Control>, void>, std::__1::error_code> {
    union storage<wrid<__weak id<aura_Control>, void>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_b2b3f2ff;

typedef struct expected<wrid<id, void>, std::__1::error_code> {
    union storage<wrid<id, void>, std::__1::error_code> _field1;
    _Bool _field2;
} expected_24591dba;

typedef struct function<void (aura::ConfigurationChangeCause)> {
    struct __value_func<void (aura::ConfigurationChangeCause)> {
        struct type _field1;
        struct __base<void (aura::ConfigurationChangeCause)> *_field2;
    } _field1;
} function_622822b1;

typedef struct function<void (aura::ConfigurationChangeDescription)> {
    struct __value_func<void (aura::ConfigurationChangeDescription)> {
        struct type __buf_;
        struct __base<void (aura::ConfigurationChangeDescription)> *__f_;
    } __f_;
} function_439a5227;

typedef struct function<void (aura::IOEvent)> {
    struct __value_func<void (aura::IOEvent)> {
        struct type _field1;
        struct __base<void (aura::IOEvent)> *_field2;
    } _field1;
} function_64fbd6ee;

typedef struct function<void (caulk::expected<aura::ConfigurationChangeDescription, std::__1::error_code>)> {
    struct __value_func<void (caulk::expected<aura::ConfigurationChangeDescription, std::__1::error_code>)> {
        struct type _field1;
        struct __base<void (caulk::expected<aura::ConfigurationChangeDescription, std::__1::error_code>)> *_field2;
    } _field1;
} function_00b26d85;

typedef struct function<void (std::__1::error_code)> {
    struct __value_func<void (std::__1::error_code)> {
        struct type _field1;
        struct __base<void (std::__1::error_code)> *_field2;
    } _field1;
} function_c0dd97ef;

typedef struct function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)> {
    struct __value_func<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)> {
        struct type _field1;
        struct __base<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::Proc_Stream *)> *_field2;
    } _field1;
} function_b157c3ea;

typedef struct map<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_a51bffcb;

typedef struct map<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_83406001;

typedef struct map<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>>> {
    struct __tree<std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::vector<id<aura_IOControllerPriv>, std::__1::allocator<id<aura_IOControllerPriv>>>>, std::__1::less<unsigned int>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
} map_9344a8ab;

typedef struct optional<AVAudioDSPFlavor> {
    CDUnion_bdf8cba2 ;
    _Bool __engaged_;
} optional_8bc927cc;

typedef struct optional<applesauce::CF::StringRef> {
    union {
        char __null_state_;
        struct StringRef __val_;
    } ;
    _Bool __engaged_;
} optional_cd8a9b08;

typedef struct optional<aura::AudioFormat> {
    union {
        char __null_state_;
        struct AudioFormat __val_;
    } ;
    _Bool __engaged_;
} optional_4dd3a29b;

typedef struct optional<aura::CameraDirection> {
    CDUnion_fd7d43d3 ;
    _Bool __engaged_;
} optional_d2ff5826;

typedef struct optional<aura::HapticStreamingMode> {
    CDUnion_fd7d43d3 ;
    _Bool __engaged_;
} optional_619f92d8;

typedef struct optional<aura::IOControllerTopology> {
    union {
        char __null_state_;
        struct IOControllerTopology __val_;
    } ;
    _Bool __engaged_;
} optional_bbc55f90;

typedef struct optional<aura::InitiationTriggerSpecification> {
    union {
        char __null_state_;
        struct InitiationTriggerSpecification __val_;
    } ;
    _Bool __engaged_;
} optional_b75ce017;

typedef struct optional<aura::MicrophoneConfiguration> {
    union {
        char _field1;
        struct MicrophoneConfiguration _field2;
    } _field1;
    _Bool _field2;
} optional_95a1d2b1;

typedef struct optional<aura::USBSection> {
    union {
        char _field1;
        struct USBSection _field2;
    } _field1;
    _Bool _field2;
} optional_a477c0a4;

typedef struct optional<bool> {
    union {
        char __null_state_;
        _Bool __val_;
    } ;
    _Bool __engaged_;
} optional_34114161;

typedef struct optional<double> {
    union {
        char __null_state_;
        double __val_;
    } ;
    _Bool __engaged_;
} optional_fcefa02e;

typedef struct optional<std::__1::map<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy, std::__1::less<__weak id<aura_VirtualPort>>, std::__1::allocator<std::__1::pair<const __weak id<aura_VirtualPort>, aura::PortRoutingPolicy>>>> {
    union {
        char __null_state_;
        struct map<__weak id<aura_VirtualPort>, aura::PortRoutingPolicy, std::__1::less<__weak id<aura_VirtualPort>>, std::__1::allocator<std::__1::pair<const __weak id<aura_VirtualPort>, aura::PortRoutingPolicy>>> __val_;
    } ;
    _Bool __engaged_;
} optional_bb3d55d3;

typedef struct optional<std::__1::map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>>> {
    union {
        char __null_state_;
        struct map<aura::PortType, aura::PortTypeRoutingPolicy, std::__1::less<aura::PortType>, std::__1::allocator<std::__1::pair<const aura::PortType, aura::PortTypeRoutingPolicy>>> __val_;
    } ;
    _Bool __engaged_;
} optional_9c576aeb;

typedef struct optional<std::__1::tuple<__weak id<aura_Box>, bool>> {
    union {
        char __null_state_;
        struct tuple<__weak id<aura_Box>, bool> __val_;
    } ;
    _Bool __engaged_;
} optional_cfbf477b;

typedef struct optional<std::__1::tuple<__weak id<aura_VirtualPort>, bool>> {
    union {
        char __null_state_;
        struct tuple<__weak id<aura_VirtualPort>, bool> __val_;
    } ;
    _Bool __engaged_;
} optional_711847c0;

typedef struct optional<std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>> {
    union {
        char __null_state_;
        vector_c6bb1d04 __val_;
    } ;
    _Bool __engaged_;
} optional_69f94aa5;

typedef struct optional<std::__1::vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>>> {
    union {
        char __null_state_;
        struct vector<aura::MicrophonePreference, std::__1::allocator<aura::MicrophonePreference>> __val_;
    } ;
    _Bool __engaged_;
} optional_74709a54;

typedef struct optional<std::__1::vector<aura::USBSection, std::__1::allocator<aura::USBSection>>> {
    union {
        char _field1;
        struct vector<aura::USBSection, std::__1::allocator<aura::USBSection>> _field2;
    } _field1;
    _Bool _field2;
} optional_10ef6a28;

typedef struct optional<std::__1::vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>>> {
    union {
        char __null_state_;
        struct vector<aura_IOStreamHints *, std::__1::allocator<aura_IOStreamHints *>> __val_;
    } ;
    _Bool __engaged_;
} optional_21a71da4;

typedef struct optional<std::__1::vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>>> {
    union {
        char __null_state_;
        struct vector<aura_StreamHints *, std::__1::allocator<aura_StreamHints *>> __val_;
    } ;
    _Bool __engaged_;
} optional_d968a044;

typedef struct optional<unsigned int> {
    CDUnion_bdf8cba2 ;
    _Bool __engaged_;
} optional_488f82df;

typedef struct optional<wrid<__weak id<aura_Clock>, void>> {
    union {
        char __null_state_;
        struct wrid<__weak id<aura_Clock>, void> __val_;
    } ;
    _Bool __engaged_;
} optional_ce918c5b;

typedef struct optional<wrid<__weak id<aura_Device>, void>> {
    union {
        char _field1;
        struct wrid<__weak id<aura_Device>, void> _field2;
    } _field1;
    _Bool _field2;
} optional_8c74af2e;

typedef struct optional<wrid<__weak id<aura_VirtualPort>, void>> {
    union {
        char __null_state_;
        struct wrid<__weak id<aura_VirtualPort>, void> __val_;
    } ;
    _Bool __engaged_;
} optional_2c7815ee;

typedef struct optional<wrop<aura_ConfigurationHints *, void>> {
    union {
        char __null_state_;
        struct wrop<aura_ConfigurationHints *, void> __val_;
    } ;
    _Bool __engaged_;
} optional_f9b20518;

typedef struct shared_ptr<caulk::reactor<aura::hw::Hardware *>> {
    struct reactor<aura::hw::Hardware *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_940c565d;

typedef struct shared_ptr<caulk::reactor<aura::itf::Device *>> {
    struct reactor<aura::itf::Device *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_cc2337fb;

typedef struct shared_ptr<caulk::reactor<aura::itf::IOController *>> {
    struct reactor<aura::itf::IOController *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_90e9ee19;

typedef struct shared_ptr<caulk::reactor<aura::itf::IOStream *>> {
    struct reactor<aura::itf::IOStream *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_7cd8687d;

typedef struct shared_ptr<caulk::reactor<aura::itf::Port *>> {
    struct reactor<aura::itf::Port *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_c3639ab0;

typedef struct shared_ptr<caulk::reactor<aura::itf::Stream *>> {
    struct reactor<aura::itf::Stream *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_25d7547e;

typedef struct shared_ptr<caulk::reactor<aura::itf::VirtualPort *>> {
    struct reactor<aura::itf::VirtualPort *> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_bb316d66;

typedef struct vector<__weak id<aura_Box>, std::__1::allocator<__weak id<aura_Box>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Box>*, std::__1::allocator<__weak id<aura_Box>>> {
        id *_field1;
    } _field3;
} vector_7bfbc159;

typedef struct vector<__weak id<aura_Clock>, std::__1::allocator<__weak id<aura_Clock>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Clock>*, std::__1::allocator<__weak id<aura_Clock>>> {
        id *_field1;
    } _field3;
} vector_496cc06a;

typedef struct vector<__weak id<aura_Control>, std::__1::allocator<__weak id<aura_Control>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Control>*, std::__1::allocator<__weak id<aura_Control>>> {
        id *_field1;
    } _field3;
} vector_53af465e;

typedef struct vector<__weak id<aura_Device>, std::__1::allocator<__weak id<aura_Device>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Device>*, std::__1::allocator<__weak id<aura_Device>>> {
        id *_field1;
    } _field3;
} vector_999014c4;

typedef struct vector<__weak id<aura_Driver>, std::__1::allocator<__weak id<aura_Driver>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Driver>*, std::__1::allocator<__weak id<aura_Driver>>> {
        id *_field1;
    } _field3;
} vector_bd6f9f9c;

typedef struct vector<__weak id<aura_IOController>, std::__1::allocator<__weak id<aura_IOController>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_IOController>*, std::__1::allocator<__weak id<aura_IOController>>> {
        id *_field1;
    } _field3;
} vector_3bff357b;

typedef struct vector<__weak id<aura_IOStream>, std::__1::allocator<__weak id<aura_IOStream>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_IOStream>*, std::__1::allocator<__weak id<aura_IOStream>>> {
        id *_field1;
    } _field3;
} vector_67aaf020;

typedef struct vector<__weak id<aura_Port>, std::__1::allocator<__weak id<aura_Port>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Port>*, std::__1::allocator<__weak id<aura_Port>>> {
        id *_field1;
    } _field3;
} vector_a7f3f6e7;

typedef struct vector<__weak id<aura_PortPriv>, std::__1::allocator<__weak id<aura_PortPriv>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_PortPriv>*, std::__1::allocator<__weak id<aura_PortPriv>>> {
        id *_field1;
    } _field3;
} vector_5de72575;

typedef struct vector<__weak id<aura_Stream>, std::__1::allocator<__weak id<aura_Stream>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<aura_Stream>*, std::__1::allocator<__weak id<aura_Stream>>> {
        id *_field1;
    } _field3;
} vector_69ed651e;

typedef struct vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<__weak id<aura_VirtualPort>*, std::__1::allocator<__weak id<aura_VirtualPort>>> {
        id *__value_;
    } __end_cap_;
} vector_c6bb1d04;

typedef struct vector<__weak id<dsp_DSPModule>, std::__1::allocator<__weak id<dsp_DSPModule>>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<__weak id<dsp_DSPModule>*, std::__1::allocator<__weak id<dsp_DSPModule>>> {
        id *_field1;
    } _field3;
} vector_ea850296;

typedef struct vector<applesauce::CF::StringRef, std::__1::allocator<applesauce::CF::StringRef>> {
    struct StringRef *_field1;
    struct StringRef *_field2;
    struct __compressed_pair<applesauce::CF::StringRef *, std::__1::allocator<applesauce::CF::StringRef>> {
        struct StringRef *_field1;
    } _field3;
} vector_bd26d536;

typedef struct vector<aura::PortRecord<bool>, std::__1::allocator<aura::PortRecord<bool>>> {
    struct PortRecord<bool> *_field1;
    struct PortRecord<bool> *_field2;
    struct __compressed_pair<aura::PortRecord<bool>*, std::__1::allocator<aura::PortRecord<bool>>> {
        struct PortRecord<bool> *_field1;
    } _field3;
} vector_5bce929e;

typedef struct vector<aura::PortRecord<double>, std::__1::allocator<aura::PortRecord<double>>> {
    struct PortRecord<double> *_field1;
    struct PortRecord<double> *_field2;
    struct __compressed_pair<aura::PortRecord<double>*, std::__1::allocator<aura::PortRecord<double>>> {
        struct PortRecord<double> *_field1;
    } _field3;
} vector_149db60c;

typedef struct vector<aura::VolumeUpdateResult, std::__1::allocator<aura::VolumeUpdateResult>> {
    int *_field1;
    int *_field2;
    struct __compressed_pair<aura::VolumeUpdateResult *, std::__1::allocator<aura::VolumeUpdateResult>> {
        int *_field1;
    } _field3;
} vector_29aefa88;

typedef struct vector<aura_DeviceHints *, std::__1::allocator<aura_DeviceHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_DeviceHints *__strong *, std::__1::allocator<aura_DeviceHints *>> {
        id *__value_;
    } __end_cap_;
} vector_99647c4e;

typedef struct vector<aura_IOControllerHints *, std::__1::allocator<aura_IOControllerHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_IOControllerHints *__strong *, std::__1::allocator<aura_IOControllerHints *>> {
        id *__value_;
    } __end_cap_;
} vector_4a68c4d4;

typedef struct vector<aura_VirtualPortHints *, std::__1::allocator<aura_VirtualPortHints *>> {
    id *__begin_;
    id *__end_;
    struct __compressed_pair<aura_VirtualPortHints *__strong *, std::__1::allocator<aura_VirtualPortHints *>> {
        id *__value_;
    } __end_cap_;
} vector_df3b7805;

typedef struct vector<const aura_ConfigurationChangeRequest *, std::__1::allocator<const aura_ConfigurationChangeRequest *>> {
    id *_field1;
    id *_field2;
    struct __compressed_pair<const aura_ConfigurationChangeRequest *__strong *, std::__1::allocator<const aura_ConfigurationChangeRequest *>> {
        id *_field1;
    } _field3;
} vector_1ccd10a7;

typedef struct vector<dspd::DeviceDescription, std::__1::allocator<dspd::DeviceDescription>> {
    struct DeviceDescription *__begin_;
    struct DeviceDescription *__end_;
    struct __compressed_pair<dspd::DeviceDescription *, std::__1::allocator<dspd::DeviceDescription>> {
        struct DeviceDescription *__value_;
    } __end_cap_;
} vector_123a35f9;

typedef struct vector<dspd::IOControllerDescription, std::__1::allocator<dspd::IOControllerDescription>> {
    struct IOControllerDescription *__begin_;
    struct IOControllerDescription *__end_;
    struct __compressed_pair<dspd::IOControllerDescription *, std::__1::allocator<dspd::IOControllerDescription>> {
        struct IOControllerDescription *__value_;
    } __end_cap_;
} vector_b9981e18;

typedef struct vector<dspd::PortDescription, std::__1::allocator<dspd::PortDescription>> {
    struct PortDescription *__begin_;
    struct PortDescription *__end_;
    struct __compressed_pair<dspd::PortDescription *, std::__1::allocator<dspd::PortDescription>> {
        struct PortDescription *__value_;
    } __end_cap_;
} vector_66ffd461;

typedef struct vector<dspd::PortRecord<bool>, std::__1::allocator<dspd::PortRecord<bool>>> {
    struct PortRecord<bool> *_field1;
    struct PortRecord<bool> *_field2;
    struct __compressed_pair<dspd::PortRecord<bool>*, std::__1::allocator<dspd::PortRecord<bool>>> {
        struct PortRecord<bool> *_field1;
    } _field3;
} vector_a93e9522;

typedef struct vector<dspd::PortRecord<float>, std::__1::allocator<dspd::PortRecord<float>>> {
    struct PortRecord<float> *_field1;
    struct PortRecord<float> *_field2;
    struct __compressed_pair<dspd::PortRecord<float>*, std::__1::allocator<dspd::PortRecord<float>>> {
        struct PortRecord<float> *_field1;
    } _field3;
} vector_df89e1f1;

typedef struct vector<dspd::StreamDescription, std::__1::allocator<dspd::StreamDescription>> {
    struct StreamDescription *__begin_;
    struct StreamDescription *__end_;
    struct __compressed_pair<dspd::StreamDescription *, std::__1::allocator<dspd::StreamDescription>> {
        struct StreamDescription *__value_;
    } __end_cap_;
} vector_d1b3d51b;

typedef struct vector<long long, std::__1::allocator<long long>> {
    long long *_field1;
    long long *_field2;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *_field1;
    } _field3;
} vector_d87a6415;

typedef struct vector<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field2;
    struct __compressed_pair<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>*, std::__1::allocator<std::__1::tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>>>> {
        struct tuple<aura::AudioFormat, std::__1::set<std::__1::tuple<double, double>, std::__1::less<std::__1::tuple<double, double>>, std::__1::allocator<std::__1::tuple<double, double>>>> *_field1;
    } _field3;
} vector_fefeec75;

typedef struct vector<std::__1::tuple<double, double>, std::__1::allocator<std::__1::tuple<double, double>>> {
    struct tuple<double, double> *_field1;
    struct tuple<double, double> *_field2;
    struct __compressed_pair<std::__1::tuple<double, double>*, std::__1::allocator<std::__1::tuple<double, double>>> {
        struct tuple<double, double> *_field1;
    } _field3;
} vector_a2bd2a87;

typedef struct weak_ptr<caulk::reactor<aura::hw::Device *>> {
    struct reactor<aura::hw::Device *> *_field1;
    struct __shared_weak_count *_field2;
} weak_ptr_6b0f00f0;

typedef struct weak_ptr<caulk::reactor<aura::hw::Port *>> {
    struct reactor<aura::hw::Port *> *_field1;
    struct __shared_weak_count *_field2;
} weak_ptr_abb6b8f5;

typedef struct weak_ptr<caulk::reactor<aura::hw::Stream *>> {
    struct reactor<aura::hw::Stream *> *_field1;
    struct __shared_weak_count *_field2;
} weak_ptr_53ad1f34;

typedef struct weak_ptr<caulk::reactor<aura::itf::Port *>> {
    struct reactor<aura::itf::Port *> *_field1;
    struct __shared_weak_count *_field2;
} weak_ptr_cf97627c;

#pragma mark Named Unions

union constexpr_storage<CA::TimeStamp, std::__1::error_code> {
    char _field1;
    struct TimeStamp _field2;
    struct error_code _field3;
};

union storage<aura::SimulatedConfigurationChangeDescription, std::__1::error_code> {
    char _field1;
    struct SimulatedConfigurationChangeDescription _field2;
    struct error_code _field3;
};

union storage<aura::SimulatedMicrophoneConfigurationDescription, std::__1::error_code> {
    char _field1;
    struct SimulatedMicrophoneConfigurationDescription _field2;
    struct error_code _field3;
};

union storage<dspd::AdaptResponse, std::__1::error_code> {
    char _field1;
    struct AdaptResponse _field2;
    struct error_code _field3;
};

union storage<dspd::NegotiateResponse, std::__1::error_code> {
    char _field1;
    struct NegotiateResponse _field2;
    struct error_code _field3;
};

union storage<std::__1::map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>>, std::__1::error_code> {
    char _field1;
    struct map<aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::less<aura::IOControllerType>, std::__1::allocator<std::__1::pair<const aura::IOControllerType, std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>>>> _field2;
    struct error_code _field3;
};

union storage<std::__1::vector<__weak id<aura_VirtualPort>, std::__1::allocator<__weak id<aura_VirtualPort>>>, std::__1::error_code> {
    char _field1;
    vector_c6bb1d04 _field2;
    struct error_code _field3;
};

union storage<wrid<__weak id<aura_Control>, void>, std::__1::error_code> {
    char _field1;
    struct wrid<__weak id<aura_Control>, void> _field2;
    struct error_code _field3;
};

union storage<wrid<id, void>, std::__1::error_code> {
    char _field1;
    struct wrid<id, void> _field2;
    struct error_code _field3;
};

#pragma mark Typedef'd Unions

typedef union {
    char __null_state_;
    unsigned char __val_;
} CDUnion_fd7d43d3;

typedef union {
    char __null_state_;
    unsigned int __val_;
} CDUnion_bdf8cba2;

typedef union {
    char __null_state_;
    unsigned long long __val_;
} CDUnion_5c9634bb;

