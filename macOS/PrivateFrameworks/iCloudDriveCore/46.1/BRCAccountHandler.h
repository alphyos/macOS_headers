//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

@class BRCAccountSession, NSError, NSHashTable, NSMutableDictionary, NSString;
@protocol OS_dispatch_queue;

@interface BRCAccountHandler : NSObject
{
    NSString *_accountPath;
    NSString *_ubiquityTokenSalt;
    BRCAccountSession *_session;
    NSString *_dbAccountID;
    NSObject<OS_dispatch_queue> *_queue;
    NSMutableDictionary *_syncPolicyByFolderType;
    NSHashTable *_delegates;
    BOOL _doesNotHaveEnoughDiskSpaceToBeFunctional;
    NSString *_acAccountID;
    NSObject<OS_dispatch_queue> *_pushQueue;
    NSError *_loggedOutError;
}

+ (void)dumpToContext:(id)arg1;
+ (id)registerShareAcceptOperation:(id)arg1 forURL:(id)arg2;
+ (BOOL)isRunningShareAcceptForShareID:(id)arg1 structureRecordID:(id)arg2;
@property(retain, nonatomic) NSError *loggedOutError; // @synthesize loggedOutError=_loggedOutError;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *pushQueue; // @synthesize pushQueue=_pushQueue;
@property(readonly, nonatomic) NSString *accountPath; // @synthesize accountPath=_accountPath;
@property(readonly, nonatomic) BRCAccountSession *session; // @synthesize session=_session;
@property(readonly, nonatomic) NSString *acAccountID; // @synthesize acAccountID=_acAccountID;
@property(nonatomic) BOOL doesNotHaveEnoughDiskSpaceToBeFunctional; // @synthesize doesNotHaveEnoughDiskSpaceToBeFunctional=_doesNotHaveEnoughDiskSpaceToBeFunctional;
- (void).cxx_destruct;
- (BOOL)createAccountSessionWithID:(id)arg1 error:(id *)arg2;
- (BOOL)destroySessionSynchronously;
- (BOOL)_updateAccountToAccountID:(id)arg1;
- (BOOL)_destroyAccountSynchronously;
- (void)_handleAccountDidChange;
- (void)_handleAccountWillChange;
- (BOOL)_createAccountSessionWithID:(id)arg1 error:(id *)arg2;
- (BOOL)_loadOnDiskAccountSessionWithError:(id *)arg1;
- (id)ubiquityTokenSalt;
- (void)_destroySessionSynchronously;
- (void)__destroySessionWithIntents:(id)arg1;
- (void)jetsamCloudDocsApps;
- (void)startAndLoadAccountSynchronously:(id)arg1;
- (BOOL)importUbiquitousDirectoryForAccount:(id)arg1;
- (BOOL)importStagedUbiquitousSession:(id)arg1 clouddocsScopeDirectory:(id)arg2 dataScopeDirectory:(id)arg3 ubiquityTokenSalt:(id)arg4 sessionInstallationDirectory:(id)arg5 account:(id)arg6;
- (BOOL)stageUbiquitousDirectory:(id)arg1 existingAccountDirectory:(id)arg2 toMigrationDirectory:(id)arg3 clouddocsScopeDirectory:(id)arg4 dataScopePath:(id)arg5 accountPath:(id)arg6 account:(id)arg7;
- (BOOL)_replaceSymbolicLinkAtPath:(id)arg1 withPath:(id)arg2 error:(id *)arg3;
- (BOOL)_moveFromPath:(id)arg1 toPath:(id)arg2 onCollision:(CDUnknownBlockType)arg3 error:(id *)arg4;
- (id)_hasOnePathIn:(id)arg1 validatePath:(CDUnknownBlockType)arg2;
- (void)_cleanupActivitiesStatesWhenNoSessionExists;
- (BOOL)setDBAccountID:(id)arg1;
- (void)removeDelegate:(id)arg1;
- (void)addDelegate:(id)arg1;
- (void)dealloc;
- (id)initWithACAccountID:(id)arg1;

@end

