//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct ConfigurationManager;

struct IUrlCallback;

struct LoggingHandler;

struct TactProduct;

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct shared_ptr<Blizzard::URL::IUrlCallback> {
    struct IUrlCallback *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct thread;

struct unique_ptr<Bootstrapper::TactProduct, std::__1::default_delete<Bootstrapper::TactProduct>> {
    struct __compressed_pair<Bootstrapper::TactProduct *, std::__1::default_delete<Bootstrapper::TactProduct>> {
        struct TactProduct *__first_;
    } __ptr_;
};

struct unique_ptr<Phoenix::LoggingHandler, std::__1::default_delete<Phoenix::LoggingHandler>> {
    struct __compressed_pair<Phoenix::LoggingHandler *, std::__1::default_delete<Phoenix::LoggingHandler>> {
        struct LoggingHandler *__first_;
    } __ptr_;
};

struct unique_ptr<bna::ConfigurationManager, std::__1::default_delete<bna::ConfigurationManager>> {
    struct __compressed_pair<bna::ConfigurationManager *, std::__1::default_delete<bna::ConfigurationManager>> {
        struct ConfigurationManager *__first_;
    } __ptr_;
};

struct unique_ptr<std::__1::thread, std::__1::default_delete<std::__1::thread>> {
    struct __compressed_pair<std::__1::thread *, std::__1::default_delete<std::__1::thread>> {
        struct thread *__first_;
    } __ptr_;
};

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
} basic_string_805fe43b;

typedef struct shared_ptr<Blizzard::URL::IUrlCallback> {
    struct IUrlCallback *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_eb78e6be;

typedef struct unique_ptr<Phoenix::LoggingHandler, std::__1::default_delete<Phoenix::LoggingHandler>> {
    struct __compressed_pair<Phoenix::LoggingHandler *, std::__1::default_delete<Phoenix::LoggingHandler>> {
        struct LoggingHandler *__first_;
    } __ptr_;
} unique_ptr_327ee89a;

typedef struct unique_ptr<bna::ConfigurationManager, std::__1::default_delete<bna::ConfigurationManager>> {
    struct __compressed_pair<bna::ConfigurationManager *, std::__1::default_delete<bna::ConfigurationManager>> {
        struct ConfigurationManager *__first_;
    } __ptr_;
} unique_ptr_1da4b12b;

