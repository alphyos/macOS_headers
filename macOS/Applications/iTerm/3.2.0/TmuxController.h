//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

@class EquivalenceClassSet, NSArray, NSDictionary, NSMutableDictionary, NSMutableIndexSet, NSMutableSet, NSString, NSTimer, ProfileModel, TmuxGateway;

@interface TmuxController : NSObject
{
    TmuxGateway *gateway_;
    NSMutableDictionary *windowPanes_;
    NSMutableDictionary *windows_;
    NSArray *sessions_;
    int numOutstandingWindowResizes_;
    NSMutableDictionary *windowPositions_;
    struct CGSize lastSize_;
    NSString *lastOrigins_;
    BOOL detached_;
    NSString *sessionName_;
    int sessionId_;
    NSMutableSet *pendingWindowOpens_;
    NSString *lastSaveAffinityCommand_;
    EquivalenceClassSet *affinities_;
    BOOL windowOriginsDirty_;
    BOOL haveOutstandingSaveWindowOrigins_;
    NSMutableDictionary *origins_;
    NSMutableSet *hiddenWindows_;
    NSTimer *listSessionsTimer_;
    NSTimer *listWindowsTimer_;
    BOOL ambiguousIsDoubleWidth_;
    NSMutableDictionary *_hotkeys;
    NSMutableSet *_paneIDs;
    NSMutableDictionary *_tabColors;
    NSMutableDictionary *_windowOpenerOptions;
    BOOL _manualOpenRequested;
    BOOL _haveOpenendInitialWindows;
    NSDictionary *_profile;
    ProfileModel *_profileModel;
    NSMutableIndexSet *_pendingNewWindows;
    BOOL _detaching;
    long long _unicodeVersion;
    NSString *_clientName;
    NSDictionary *_fontOverrides;
    NSString *_sessionGuid;
}

@property(copy, nonatomic) NSString *sessionGuid; // @synthesize sessionGuid=_sessionGuid;
@property(readonly, nonatomic) NSDictionary *fontOverrides; // @synthesize fontOverrides=_fontOverrides;
@property(copy, nonatomic) NSDictionary *profile; // @synthesize profile=_profile;
@property(readonly, nonatomic) BOOL detaching; // @synthesize detaching=_detaching;
@property(copy, nonatomic) NSString *clientName; // @synthesize clientName=_clientName;
@property(nonatomic) long long unicodeVersion; // @synthesize unicodeVersion=_unicodeVersion;
@property(readonly, nonatomic) int sessionId; // @synthesize sessionId=sessionId_;
@property(nonatomic) BOOL ambiguousIsDoubleWidth; // @synthesize ambiguousIsDoubleWidth=ambiguousIsDoubleWidth_;
@property(retain, nonatomic) NSArray *sessions; // @synthesize sessions=sessions_;
@property(copy, nonatomic) NSString *sessionName; // @synthesize sessionName=sessionName_;
@property(retain, nonatomic) NSMutableDictionary *windowPositions; // @synthesize windowPositions=windowPositions_;
@property(readonly, nonatomic) TmuxGateway *gateway; // @synthesize gateway=gateway_;
- (void)setCurrentWindow:(int)arg1;
- (void)didSwapWindows:(id)arg1;
- (void)responseForListWindows:(id)arg1 toSetPartialOrder:(id)arg2;
- (void)setPartialWindowIdOrder:(id)arg1;
- (void)sendInitialWindowsOpenedNotificationIfNeeded;
- (void)windowDidOpen:(id)arg1;
- (void)closeAllPanes;
- (void)newWindowWithAffinityCreated:(id)arg1 affinityWindow:(id)arg2;
- (void)releaseWindow:(int)arg1;
- (void)retainWindow:(int)arg1 withTab:(id)arg2;
- (void)parseListWindowsResponseAndUpdateLayouts:(id)arg1;
- (void)listWindowsResponse:(id)arg1;
- (void)listedWindowsToOpenOne:(id)arg1 forWindowIdAndAffinities:(id)arg2;
- (void)listSessionsResponse:(id)arg1;
- (void)setAffinitiesFromString:(id)arg1;
- (id)windowOptionsFromString:(id)arg1;
- (id)componentsOfAffinities:(id)arg1;
- (void)getAffinitiesResponse:(id)arg1;
- (void)getHiddenWindowsResponse:(id)arg1;
- (void)didListWindows:(id)arg1 userData:(id)arg2;
- (int)windowIdFromString:(id)arg1;
- (void)getTabColorsResponse:(id)arg1;
- (void)getHotkeysResponse:(id)arg1;
- (id)tabColorsString;
- (id)hotkeysString;
- (id)shortStringForHotkeyDictionary:(id)arg1 paneID:(int)arg2;
- (void)getOriginsResponse:(id)arg1;
- (void)setTmuxFont:(id)arg1 nonAsciiFont:(id)arg2 hSpacing:(double)arg3 vSpacing:(double)arg4;
- (void)toggleZoomForPane:(int)arg1;
- (void)swapPane:(int)arg1 withPane:(int)arg2;
- (void)listSessions;
- (void)changeWindow:(int)arg1 tabTo:(id)arg2;
- (id)windowWithAffinityForWindowId:(int)arg1;
- (id)terminalWithGuid:(id)arg1;
- (void)saveAffinities;
- (id)windowOptionsForTerminal:(id)arg1;
- (void)saveWindowOriginsResponse:(id)arg1;
- (void)saveWindowOrigins;
- (void)saveHiddenWindows;
- (void)listWindowsTimerFired:(id)arg1;
- (void)listWindowsInSession:(id)arg1 target:(id)arg2 selector:(SEL)arg3 object:(id)arg4;
- (void)attachToSession:(id)arg1;
- (void)addSessionWithName:(id)arg1;
- (void)killSession:(id)arg1;
- (void)renameSession:(id)arg1 to:(id)arg2;
- (id)positionForWindowWithPanes:(id)arg1;
- (void)linkWindowId:(int)arg1 inSession:(id)arg2 toSession:(id)arg3;
- (void)openWindowWithId:(int)arg1 intentional:(BOOL)arg2;
- (void)openWindowWithId:(int)arg1 affinities:(id)arg2 intentional:(BOOL)arg3;
- (void)hideWindow:(int)arg1;
- (void)windowPaneBrokeOutWithWindowId:(id)arg1 setAffinityTo:(id)arg2;
- (void)breakOutWindowPane:(int)arg1 toTabAside:(id)arg2;
- (void)breakOutWindowPane:(int)arg1 toPoint:(struct CGPoint)arg2;
- (id)breakPaneWindowPaneFlag;
- (void)killWindow:(int)arg1;
- (id)tabColorStringForWindowPane:(int)arg1;
- (id)hotkeyForWindowPane:(int)arg1;
- (void)sendCommandToSetTabColors;
- (void)sendCommandToSetHotkeys;
- (void)getPaneIDsResponseAndSetTabColors:(id)arg1;
- (void)getPaneIDsResponseAndSetHotkeys:(id)arg1;
- (void)setTabColorString:(id)arg1 forWindowPane:(int)arg2;
- (void)setHotkeyForWindowPane:(int)arg1 to:(id)arg2;
- (void)renameWindowWithId:(int)arg1 inSession:(id)arg2 toName:(id)arg3;
- (void)unlinkWindowWithId:(int)arg1 inSession:(id)arg2;
- (void)killWindowPane:(int)arg1;
- (void)movePane:(int)arg1 intoPane:(int)arg2 isVertical:(BOOL)arg3 before:(BOOL)arg4;
- (void)newWindowWithAffinity:(id)arg1 initialDirectory:(id)arg2;
- (void)newWindowInSession:(id)arg1 initialDirectory:(id)arg2;
- (void)selectPane:(int)arg1;
- (void)splitWindowPane:(int)arg1 vertically:(BOOL)arg2 initialDirectory:(id)arg3;
- (void)windowPane:(int)arg1 resizedBy:(int)arg2 horizontally:(BOOL)arg3;
@property(readonly, nonatomic) BOOL hasOutstandingWindowResize;
- (void)showWindowOptionsResponse:(id)arg1;
- (id)unsupportedGlobalOptions;
- (void)optionValidationFailedForOption:(id)arg1;
- (BOOL)recyclingSupported;
- (void)guessVersion18Response:(id)arg1;
- (void)guessVersion21Response:(id)arg1;
- (void)guessVersion22Response:(id)arg1;
- (void)guessVersion23Response:(id)arg1;
- (void)checkForUTF8Response:(id)arg1;
- (void)increaseMinimumServerVersionTo:(id)arg1;
- (void)decreaseMaximumServerVersionTo:(id)arg1;
- (void)guessVersion;
- (void)clearHistoryForWindowPane:(int)arg1;
- (void)checkForUTF8;
- (void)validateOptions;
- (void)setClientSize:(struct CGSize)arg1;
- (void)fitLayoutToWindows;
- (BOOL)windowDidResize:(id)arg1;
- (void)detach;
- (void)requestDetach;
@property(readonly, nonatomic, getter=isAttached) BOOL attached;
- (id)sessionsInWindow:(int)arg1;
- (id)window:(int)arg1;
- (void)deregisterWindow:(int)arg1 windowPane:(int)arg2 session:(id)arg3;
- (void)registerSession:(id)arg1 withPane:(int)arg2 inWindow:(int)arg3;
- (id)sessionForWindowPane:(int)arg1;
- (id)_keyForWindowPane:(int)arg1;
- (void)getSessionGuidResponse:(id)arg1;
- (id)attachedSessionGuids;
- (void)openWindowsOfSize:(CDStruct_1ef3fb1f)arg1;
- (void)handleShowSize:(id)arg1;
- (void)openWindowsInitial;
- (void)initialListWindowsResponse:(id)arg1;
- (id)savedAffinitiesForWindow:(int)arg1;
- (id)listWindowFields;
- (void)windowsChanged;
- (void)windowWasRenamedWithId:(int)arg1 to:(id)arg2;
- (void)session:(int)arg1 renamedTo:(id)arg2;
- (void)sessionsChanged;
- (void)sessionChangedTo:(id)arg1 sessionId:(int)arg2;
- (void)setLayoutInTab:(id)arg1 toLayout:(id)arg2 zoomed:(id)arg3;
- (void)openWindowWithIndex:(int)arg1 name:(id)arg2 size:(struct CGSize)arg3 layout:(id)arg4 affinities:(id)arg5 windowFlags:(id)arg6 initial:(BOOL)arg7;
- (void)dealloc;
- (id)initWithGateway:(id)arg1 clientName:(id)arg2 profile:(id)arg3 profileModel:(id)arg4;

@end

