//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import "NSOperation.h"

#import "NSCopying-Protocol.h"

@class ASIDataDecompressor, NSArray, NSData, NSDate, NSDictionary, NSError, NSInputStream, NSMutableArray, NSMutableData, NSMutableDictionary, NSNumber, NSOutputStream, NSRecursiveLock, NSString, NSTimer, NSURL;
@protocol ASICacheDelegate, ASIHTTPRequestDelegate, ASIHTTPRequestDelegate><ASIProgressDelegate, ASIProgressDelegate;

@interface ASIHTTPRequest : NSOperation <NSCopying>
{
    NSURL *url;
    NSURL *originalURL;
    NSURL *redirectURL;
    id <ASIHTTPRequestDelegate> delegate;
    id <ASIHTTPRequestDelegate><ASIProgressDelegate> queue;
    NSString *requestMethod;
    NSMutableData *postBody;
    NSData *compressedPostBody;
    BOOL shouldStreamPostDataFromDisk;
    NSString *postBodyFilePath;
    NSString *compressedPostBodyFilePath;
    BOOL didCreateTemporaryPostDataFile;
    NSOutputStream *postBodyWriteStream;
    NSInputStream *postBodyReadStream;
    NSMutableDictionary *requestHeaders;
    BOOL haveBuiltRequestHeaders;
    NSDictionary *responseHeaders;
    NSMutableArray *requestCookies;
    NSArray *responseCookies;
    BOOL useCookiePersistence;
    BOOL useKeychainPersistence;
    BOOL useSessionPersistence;
    BOOL allowCompressedResponse;
    BOOL shouldCompressRequestBody;
    NSString *downloadDestinationPath;
    NSString *temporaryFileDownloadPath;
    NSString *temporaryUncompressedDataDownloadPath;
    NSOutputStream *fileDownloadOutputStream;
    NSOutputStream *inflatedFileDownloadOutputStream;
    BOOL complete;
    BOOL finished;
    BOOL cancelled;
    NSError *error;
    NSString *username;
    NSString *password;
    NSString *userAgentString;
    NSString *domain;
    NSString *proxyUsername;
    NSString *proxyPassword;
    NSString *proxyDomain;
    id <ASIProgressDelegate> uploadProgressDelegate;
    id <ASIProgressDelegate> downloadProgressDelegate;
    BOOL haveExaminedHeaders;
    NSMutableData *rawResponseData;
    struct __CFHTTPMessage *request;
    NSInputStream *readStream;
    struct _CFHTTPAuthentication *requestAuthentication;
    NSDictionary *requestCredentials;
    int authenticationRetryCount;
    NSString *authenticationScheme;
    NSString *authenticationRealm;
    BOOL shouldPresentAuthenticationDialog;
    BOOL shouldPresentProxyAuthenticationDialog;
    struct _CFHTTPAuthentication *proxyAuthentication;
    NSDictionary *proxyCredentials;
    int proxyAuthenticationRetryCount;
    NSString *proxyAuthenticationScheme;
    NSString *proxyAuthenticationRealm;
    int responseStatusCode;
    NSString *responseStatusMessage;
    unsigned long long contentLength;
    unsigned long long partialDownloadSize;
    unsigned long long postLength;
    unsigned long long totalBytesRead;
    unsigned long long totalBytesSent;
    unsigned long long lastBytesRead;
    unsigned long long lastBytesSent;
    NSRecursiveLock *cancelledLock;
    SEL didStartSelector;
    SEL didReceiveResponseHeadersSelector;
    SEL willRedirectSelector;
    SEL didFinishSelector;
    SEL didFailSelector;
    SEL didReceiveDataSelector;
    NSDate *lastActivityTime;
    double timeOutSeconds;
    BOOL shouldResetUploadProgress;
    BOOL shouldResetDownloadProgress;
    ASIHTTPRequest *mainRequest;
    BOOL showAccurateProgress;
    BOOL updatedProgress;
    BOOL haveBuiltPostBody;
    unsigned long long uploadBufferSize;
    unsigned int defaultResponseEncoding;
    unsigned int responseEncoding;
    BOOL allowResumeForFileDownloads;
    NSDictionary *userInfo;
    int tag;
    BOOL useHTTPVersionOne;
    BOOL shouldRedirect;
    BOOL needsRedirect;
    int redirectCount;
    BOOL validatesSecureCertificate;
    struct OpaqueSecIdentityRef *clientCertificateIdentity;
    NSArray *clientCertificates;
    NSString *proxyHost;
    int proxyPort;
    NSString *proxyType;
    NSURL *PACurl;
    int authenticationNeeded;
    BOOL shouldPresentCredentialsBeforeChallenge;
    BOOL inProgress;
    BOOL readStreamIsScheduled;
    int numberOfTimesToRetryOnTimeout;
    int retryCount;
    BOOL willRetryRequest;
    BOOL shouldAttemptPersistentConnection;
    double persistentConnectionTimeoutSeconds;
    BOOL connectionCanBeReused;
    NSMutableDictionary *connectionInfo;
    BOOL shouldUseRFC2616RedirectBehaviour;
    BOOL downloadComplete;
    NSNumber *requestID;
    NSString *runLoopMode;
    NSTimer *statusTimer;
    id <ASICacheDelegate> downloadCache;
    int cachePolicy;
    int cacheStoragePolicy;
    BOOL didUseCachedResponse;
    double secondsToCache;
    ASIDataDecompressor *dataDecompressor;
    BOOL shouldWaitToInflateCompressedResponses;
    BOOL isPACFileRequest;
    ASIHTTPRequest *PACFileRequest;
    NSInputStream *PACFileReadStream;
    NSMutableData *PACFileData;
    BOOL isSynchronous;
    CDUnknownBlockType startedBlock;
    CDUnknownBlockType headersReceivedBlock;
    CDUnknownBlockType completionBlock;
    CDUnknownBlockType failureBlock;
    CDUnknownBlockType bytesReceivedBlock;
    CDUnknownBlockType bytesSentBlock;
    CDUnknownBlockType downloadSizeIncrementedBlock;
    CDUnknownBlockType uploadSizeIncrementedBlock;
    CDUnknownBlockType dataReceivedBlock;
    CDUnknownBlockType authenticationNeededBlock;
    CDUnknownBlockType proxyAuthenticationNeededBlock;
    CDUnknownBlockType requestRedirectedBlock;
}

+ (void)parseMimeType:(id *)arg1 andResponseEncoding:(unsigned int *)arg2 fromContentType:(id)arg3;
+ (id)dateFromRFC1123String:(id)arg1;
+ (id)expiryDateForRequest:(id)arg1 maxAge:(double)arg2;
+ (id)base64forData:(id)arg1;
+ (void)runRequests;
+ (id)threadForRequest:(id)arg1;
+ (void)hideNetworkActivityIndicatorIfNeeeded;
+ (void)hideNetworkActivityIndicatorAfterDelay;
+ (void)hideNetworkActivityIndicator;
+ (void)showNetworkActivityIndicator;
+ (void)setShouldUpdateNetworkActivityIndicator:(BOOL)arg1;
+ (BOOL)isNetworkInUse;
+ (id)defaultCache;
+ (void)setDefaultCache:(id)arg1;
+ (id)sharedQueue;
+ (unsigned long)maxUploadReadLength;
+ (void)measureBandwidthUsage;
+ (unsigned long)averageBandwidthUsedPerSecond;
+ (void)recordBandwidthUsage;
+ (void)incrementBandwidthUsedInLastSecond:(unsigned long)arg1;
+ (void)setMaxBandwidthPerSecond:(unsigned long)arg1;
+ (unsigned long)maxBandwidthPerSecond;
+ (BOOL)isBandwidthThrottled;
+ (id)mimeTypeForFileAtPath:(id)arg1;
+ (void)setDefaultUserAgentString:(id)arg1;
+ (id)defaultUserAgentString;
+ (void)clearSession;
+ (void)addSessionCookie:(id)arg1;
+ (void)setSessionCookies:(id)arg1;
+ (id)sessionCookies;
+ (void)removeCredentialsForProxy:(id)arg1 port:(int)arg2 realm:(id)arg3;
+ (void)removeCredentialsForHost:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4;
+ (id)savedCredentialsForProxy:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4;
+ (id)savedCredentialsForHost:(id)arg1 port:(int)arg2 protocol:(id)arg3 realm:(id)arg4;
+ (void)saveCredentials:(id)arg1 forProxy:(id)arg2 port:(int)arg3 realm:(id)arg4;
+ (void)saveCredentials:(id)arg1 forHost:(id)arg2 port:(int)arg3 protocol:(id)arg4 realm:(id)arg5;
+ (void)removeAuthenticationCredentialsFromSessionStore:(id)arg1;
+ (void)removeProxyAuthenticationCredentialsFromSessionStore:(id)arg1;
+ (void)storeAuthenticationCredentialsInSessionStore:(id)arg1;
+ (void)storeProxyAuthenticationCredentialsInSessionStore:(id)arg1;
+ (id)sessionCredentialsStore;
+ (id)sessionProxyCredentialsStore;
+ (void)setDefaultTimeOutSeconds:(double)arg1;
+ (double)defaultTimeOutSeconds;
+ (void)expirePersistentConnections;
+ (BOOL)removeFileAtPath:(id)arg1 error:(id *)arg2;
+ (void)updateProgressIndicator:(id *)arg1 withProgress:(unsigned long long)arg2 ofTotal:(unsigned long long)arg3;
+ (void)performInvocation:(id)arg1 onTarget:(id *)arg2 releasingObject:(id)arg3;
+ (void)performSelector:(SEL)arg1 onTarget:(id *)arg2 withObject:(id)arg3 amount:(void *)arg4 callerToRetain:(id)arg5;
+ (void)releaseBlocks:(id)arg1;
+ (id)requestWithURL:(id)arg1 usingCache:(id)arg2 andCachePolicy:(int)arg3;
+ (id)requestWithURL:(id)arg1 usingCache:(id)arg2;
+ (id)requestWithURL:(id)arg1;
+ (void)initialize;
- (void)setSynchronous:(BOOL)arg1;
- (BOOL)isSynchronous;
- (void)setPACFileData:(id)arg1;
- (id)PACFileData;
- (void)setPACFileReadStream:(id)arg1;
- (id)PACFileReadStream;
- (void)setPACFileRequest:(id)arg1;
- (id)PACFileRequest;
- (void)setIsPACFileRequest:(BOOL)arg1;
- (BOOL)isPACFileRequest;
- (void)setShouldWaitToInflateCompressedResponses:(BOOL)arg1;
- (BOOL)shouldWaitToInflateCompressedResponses;
- (void)setDataDecompressor:(id)arg1;
- (id)dataDecompressor;
- (void)setRedirectURL:(id)arg1;
- (id)redirectURL;
- (void)setClientCertificates:(id)arg1;
- (id)clientCertificates;
- (void)setSecondsToCache:(double)arg1;
- (double)secondsToCache;
- (void)setDidUseCachedResponse:(BOOL)arg1;
- (BOOL)didUseCachedResponse;
- (void)setCacheStoragePolicy:(int)arg1;
- (int)cacheStoragePolicy;
- (void)setCachePolicy:(int)arg1;
- (int)cachePolicy;
- (void)setDownloadCache:(id)arg1;
- (id)downloadCache;
- (id)statusTimer;
- (void)setRunLoopMode:(id)arg1;
- (id)runLoopMode;
- (void)setRequestID:(id)arg1;
- (id)requestID;
- (void)setDownloadComplete:(BOOL)arg1;
- (BOOL)downloadComplete;
- (void)setShouldUseRFC2616RedirectBehaviour:(BOOL)arg1;
- (BOOL)shouldUseRFC2616RedirectBehaviour;
- (void)setReadStreamIsScheduled:(BOOL)arg1;
- (BOOL)readStreamIsScheduled;
- (void)setReadStream:(id)arg1;
- (id)readStream;
- (void)setConnectionInfo:(id)arg1;
- (id)connectionInfo;
- (void)setConnectionCanBeReused:(BOOL)arg1;
- (BOOL)connectionCanBeReused;
- (void)setPersistentConnectionTimeoutSeconds:(double)arg1;
- (double)persistentConnectionTimeoutSeconds;
- (void)setShouldAttemptPersistentConnection:(BOOL)arg1;
- (BOOL)shouldAttemptPersistentConnection;
- (void)setWillRetryRequest:(BOOL)arg1;
- (BOOL)willRetryRequest;
- (void)setRetryCount:(int)arg1;
- (int)retryCount;
- (void)setNumberOfTimesToRetryOnTimeout:(int)arg1;
- (int)numberOfTimesToRetryOnTimeout;
- (void)setInProgress:(BOOL)arg1;
- (BOOL)inProgress;
- (void)setHaveBuiltRequestHeaders:(BOOL)arg1;
- (BOOL)haveBuiltRequestHeaders;
- (void)setShouldPresentCredentialsBeforeChallenge:(BOOL)arg1;
- (BOOL)shouldPresentCredentialsBeforeChallenge;
- (void)setResponseStatusMessage:(id)arg1;
- (id)responseStatusMessage;
- (void)setAuthenticationNeeded:(int)arg1;
- (int)authenticationNeeded;
- (void)setShouldPresentProxyAuthenticationDialog:(BOOL)arg1;
- (BOOL)shouldPresentProxyAuthenticationDialog;
- (void)setShouldPresentAuthenticationDialog:(BOOL)arg1;
- (BOOL)shouldPresentAuthenticationDialog;
- (void)setProxyAuthenticationScheme:(id)arg1;
- (id)proxyAuthenticationScheme;
- (void)setAuthenticationScheme:(id)arg1;
- (id)authenticationScheme;
- (void)setPACurl:(id)arg1;
- (id)PACurl;
- (void)setProxyType:(id)arg1;
- (id)proxyType;
- (void)setProxyPort:(int)arg1;
- (int)proxyPort;
- (void)setProxyHost:(id)arg1;
- (id)proxyHost;
- (void)setProxyCredentials:(id)arg1;
- (id)proxyCredentials;
- (void)setShouldCompressRequestBody:(BOOL)arg1;
- (BOOL)shouldCompressRequestBody;
- (void)setRedirectCount:(int)arg1;
- (int)redirectCount;
- (void)setNeedsRedirect:(BOOL)arg1;
- (BOOL)needsRedirect;
- (void)setValidatesSecureCertificate:(BOOL)arg1;
- (BOOL)validatesSecureCertificate;
- (void)setShouldRedirect:(BOOL)arg1;
- (BOOL)shouldRedirect;
- (void)setUpdatedProgress:(BOOL)arg1;
- (BOOL)updatedProgress;
- (void)setProxyAuthenticationRetryCount:(int)arg1;
- (int)proxyAuthenticationRetryCount;
- (void)setAuthenticationRetryCount:(int)arg1;
- (int)authenticationRetryCount;
- (void)setInflatedFileDownloadOutputStream:(id)arg1;
- (id)inflatedFileDownloadOutputStream;
- (void)setFileDownloadOutputStream:(id)arg1;
- (id)fileDownloadOutputStream;
- (void)setHaveBuiltPostBody:(BOOL)arg1;
- (BOOL)haveBuiltPostBody;
- (void)setCancelledLock:(id)arg1;
- (id)cancelledLock;
- (void)setLastBytesSent:(unsigned long long)arg1;
- (unsigned long long)lastBytesSent;
- (void)setLastBytesRead:(unsigned long long)arg1;
- (unsigned long long)lastBytesRead;
- (void)setUseHTTPVersionOne:(BOOL)arg1;
- (BOOL)useHTTPVersionOne;
- (void)setDidCreateTemporaryPostDataFile:(BOOL)arg1;
- (BOOL)didCreateTemporaryPostDataFile;
- (void)setShouldStreamPostDataFromDisk:(BOOL)arg1;
- (BOOL)shouldStreamPostDataFromDisk;
- (void)setPostBodyReadStream:(id)arg1;
- (id)postBodyReadStream;
- (void)setPostBodyWriteStream:(id)arg1;
- (id)postBodyWriteStream;
- (void)setCompressedPostBodyFilePath:(id)arg1;
- (id)compressedPostBodyFilePath;
- (void)setPostBodyFilePath:(id)arg1;
- (id)postBodyFilePath;
- (void)setTag:(int)arg1;
- (int)tag;
- (void)setUserInfo:(id)arg1;
- (id)userInfo;
- (void)setAllowResumeForFileDownloads:(BOOL)arg1;
- (BOOL)allowResumeForFileDownloads;
- (void)setAllowCompressedResponse:(BOOL)arg1;
- (BOOL)allowCompressedResponse;
- (void)setResponseEncoding:(unsigned int)arg1;
- (unsigned int)responseEncoding;
- (void)setDefaultResponseEncoding:(unsigned int)arg1;
- (unsigned int)defaultResponseEncoding;
- (void)setUploadBufferSize:(unsigned long long)arg1;
- (unsigned long long)uploadBufferSize;
- (void)setShowAccurateProgress:(BOOL)arg1;
- (BOOL)showAccurateProgress;
- (void)setTotalBytesSent:(unsigned long long)arg1;
- (unsigned long long)totalBytesSent;
- (void)setTotalBytesRead:(unsigned long long)arg1;
- (unsigned long long)totalBytesRead;
- (void)setMainRequest:(id)arg1;
- (id)mainRequest;
- (void)setShouldResetUploadProgress:(BOOL)arg1;
- (BOOL)shouldResetUploadProgress;
- (void)setShouldResetDownloadProgress:(BOOL)arg1;
- (BOOL)shouldResetDownloadProgress;
- (void)setPostLength:(unsigned long long)arg1;
- (unsigned long long)postLength;
- (void)setPartialDownloadSize:(unsigned long long)arg1;
- (unsigned long long)partialDownloadSize;
- (void)setContentLength:(unsigned long long)arg1;
- (unsigned long long)contentLength;
- (void)setCompressedPostBody:(id)arg1;
- (id)compressedPostBody;
- (void)setPostBody:(id)arg1;
- (id)postBody;
- (void)setTimeOutSeconds:(double)arg1;
- (double)timeOutSeconds;
- (void)setLastActivityTime:(id)arg1;
- (id)lastActivityTime;
- (void)setRawResponseData:(id)arg1;
- (id)rawResponseData;
- (void)setResponseStatusCode:(int)arg1;
- (int)responseStatusCode;
- (void)setRequestCredentials:(id)arg1;
- (id)requestCredentials;
- (void)setRequestCookies:(id)arg1;
- (id)requestCookies;
- (void)setResponseCookies:(id)arg1;
- (id)responseCookies;
- (void)setResponseHeaders:(id)arg1;
- (id)responseHeaders;
- (void)setRequestHeaders:(id)arg1;
- (id)requestHeaders;
- (void)setComplete:(BOOL)arg1;
- (BOOL)complete;
- (void)setError:(id)arg1;
- (id)error;
- (void)setProxyAuthenticationRealm:(id)arg1;
- (id)proxyAuthenticationRealm;
- (void)setAuthenticationRealm:(id)arg1;
- (id)authenticationRealm;
- (void)setDidReceiveDataSelector:(SEL)arg1;
- (SEL)didReceiveDataSelector;
- (void)setDidFailSelector:(SEL)arg1;
- (SEL)didFailSelector;
- (void)setDidFinishSelector:(SEL)arg1;
- (SEL)didFinishSelector;
- (void)setWillRedirectSelector:(SEL)arg1;
- (SEL)willRedirectSelector;
- (void)setDidReceiveResponseHeadersSelector:(SEL)arg1;
- (SEL)didReceiveResponseHeadersSelector;
- (void)setDidStartSelector:(SEL)arg1;
- (SEL)didStartSelector;
- (void)setTemporaryUncompressedDataDownloadPath:(id)arg1;
- (id)temporaryUncompressedDataDownloadPath;
- (void)setTemporaryFileDownloadPath:(id)arg1;
- (id)temporaryFileDownloadPath;
- (void)setDownloadDestinationPath:(id)arg1;
- (id)downloadDestinationPath;
- (void)setUseCookiePersistence:(BOOL)arg1;
- (BOOL)useCookiePersistence;
- (void)setUseSessionPersistence:(BOOL)arg1;
- (BOOL)useSessionPersistence;
- (void)setUseKeychainPersistence:(BOOL)arg1;
- (BOOL)useKeychainPersistence;
- (void)setOriginalURL:(id)arg1;
- (id)originalURL;
- (void)setProxyDomain:(id)arg1;
- (id)proxyDomain;
- (void)setProxyPassword:(id)arg1;
- (id)proxyPassword;
- (void)setProxyUsername:(id)arg1;
- (id)proxyUsername;
- (void)setDomain:(id)arg1;
- (id)domain;
- (void)setUserAgentString:(id)arg1;
- (id)userAgentString;
- (void)setPassword:(id)arg1;
- (id)password;
- (void)setUsername:(id)arg1;
- (id)username;
- (void)setRequestRedirectedBlock:(CDUnknownBlockType)arg1;
- (void)setProxyAuthenticationNeededBlock:(CDUnknownBlockType)arg1;
- (void)setAuthenticationNeededBlock:(CDUnknownBlockType)arg1;
- (void)setDataReceivedBlock:(CDUnknownBlockType)arg1;
- (void)setUploadSizeIncrementedBlock:(CDUnknownBlockType)arg1;
- (void)setDownloadSizeIncrementedBlock:(CDUnknownBlockType)arg1;
- (void)setBytesSentBlock:(CDUnknownBlockType)arg1;
- (void)setBytesReceivedBlock:(CDUnknownBlockType)arg1;
- (void)setFailedBlock:(CDUnknownBlockType)arg1;
- (void)setCompletionBlock:(CDUnknownBlockType)arg1;
- (void)setHeadersReceivedBlock:(CDUnknownBlockType)arg1;
- (void)setStartedBlock:(CDUnknownBlockType)arg1;
- (void)performThrottling;
- (id)findSessionAuthenticationCredentials;
- (id)findSessionProxyAuthenticationCredentials;
- (void)setClientCertificateIdentity:(struct OpaqueSecIdentityRef *)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (id)connectionID;
- (void)finishedDownloadingPACFile:(id)arg1;
- (void)runPACScript:(id)arg1;
- (void)timeOutPACRead;
- (void)stream:(id)arg1 handleEvent:(unsigned int)arg2;
- (void)fetchPACFile;
- (BOOL)configureProxies;
- (BOOL)removeTemporaryCompressedUploadFile;
- (BOOL)removeTemporaryUploadFile;
- (BOOL)removeTemporaryUncompressedDownloadFile;
- (BOOL)removeTemporaryDownloadFile;
- (void)unscheduleReadStream;
- (void)scheduleReadStream;
- (void)destroyReadStream;
- (void)handleStreamError;
- (BOOL)retryUsingNewConnection;
- (void)useDataFromCache;
- (void)markAsFinished;
- (void)handleStreamComplete;
- (void)handleBytesAvailable;
- (BOOL)willAskDelegateToConfirmRedirect;
- (void)handleNetworkEvent:(unsigned long)arg1;
- (void)addBasicAuthenticationHeaderWithUsername:(id)arg1 andPassword:(id)arg2;
- (void)attemptToApplyCredentialsAndResume;
- (BOOL)showAuthenticationDialog;
- (void)attemptToApplyProxyCredentialsAndResume;
- (void)askDelegateForCredentials;
- (BOOL)willAskDelegateForCredentials;
- (void)askDelegateForProxyCredentials;
- (BOOL)willAskDelegateForProxyCredentials;
- (BOOL)showProxyAuthenticationDialog;
- (void)failAuthentication;
- (void)cancelAuthentication;
- (void)retryUsingSuppliedCredentials;
- (id)findCredentials;
- (id)findProxyCredentials;
- (BOOL)applyCredentials:(id)arg1;
- (BOOL)applyProxyCredentials:(id)arg1;
- (void)saveCredentialsToKeychain:(id)arg1;
- (void)saveProxyCredentialsToKeychain:(id)arg1;
- (void)parseStringEncodingFromHeaders;
- (BOOL)willRedirect;
- (void)readResponseHeaders;
- (void)failWithError:(id)arg1;
- (void)passOnReceivedData:(id)arg1;
- (void)reportFailure;
- (void)reportFinished;
- (void)requestFinished;
- (void)requestWillRedirectToURL:(id)arg1;
- (void)requestReceivedResponseHeaders:(id)arg1;
- (void)requestRedirected;
- (void)requestStarted;
- (void)callBlock:(CDUnknownBlockType)arg1;
- (void)performBlockOnMainThread:(CDUnknownBlockType)arg1;
- (void)removeUploadProgressSoFar;
- (void)incrementUploadSizeBy:(long long)arg1;
- (void)incrementDownloadSizeBy:(long long)arg1;
- (void)updateUploadProgress;
- (void)updateDownloadProgress;
- (void)setDownloadProgressDelegate:(id)arg1;
- (id)downloadProgressDelegate;
- (void)setUploadProgressDelegate:(id)arg1;
- (id)uploadProgressDelegate;
- (void)updateProgressIndicators;
- (id)HEADRequest;
- (void)cancelLoad;
- (void)checkRequestStatus;
- (BOOL)shouldTimeOut;
- (void)redirectToURL:(id)arg1;
- (void)performRedirect;
- (void)updateStatus:(id)arg1;
- (void)setStatusTimer:(id)arg1;
- (void)startRequest;
- (void)updatePartialDownloadSize;
- (void)buildRequestHeaders;
- (void)applyCookieHeader;
- (void)applyAuthorizationHeader;
- (void)main;
- (BOOL)isExecuting;
- (BOOL)isFinished;
- (BOOL)isConcurrent;
- (void)startAsynchronous;
- (void)start;
- (void)startSynchronous;
- (id)responseData;
- (BOOL)isResponseCompressed;
- (id)responseString;
- (BOOL)isCancelled;
- (void)clearDelegatesAndCancel;
- (void)cancel;
- (void)cancelOnRequestThread;
- (void)setQueue:(id)arg1;
- (id)queue;
- (void)setDelegate:(id)arg1;
- (id)delegate;
- (void)setURL:(id)arg1;
- (id)url;
- (void)setRequestMethod:(id)arg1;
- (id)requestMethod;
- (void)appendPostDataFromFile:(id)arg1;
- (void)appendPostData:(id)arg1;
- (void)setupPostBody;
- (void)buildPostBody;
- (void)addRequestHeader:(id)arg1 value:(id)arg2;
- (void)releaseBlocksOnMainThread;
- (void)dealloc;
- (id)initWithURL:(id)arg1;

@end

