//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSCoding-Protocol.h"
#import "NSCopying-Protocol.h"
#import "WorkerMethods-Protocol.h"

@class CSCodeSigningInfo, CSRef, NSArray, NSDate, NSDictionary, NSError, NSImage, NSMutableDictionary, NSString, NSURL, NSUUID, PackageItem, ScriptsFileItem;
@protocol OS_dispatch_queue, ThreadingHandlerMethods;

@interface ArchiveFile : NSObject <WorkerMethods, NSCoding, NSCopying>
{
    CSRef *_ref;
    CSRef *_wrapperRef;
    int _cancelLock;
    PackageItem *_rootPackageItem;
    PackageItem *_rootResourceItem;
    unsigned long long _uncompressedFileSize;
    NSMutableDictionary *_checksumDict;
    NSObject<OS_dispatch_queue> *_checksumQueue;
    NSString *_uniqueID;
    NSString *_bundleID;
    BOOL _userCancelled;
    NSString *_osVersion;
    BOOL _checkedOSVersion;
    NSObject<OS_dispatch_queue> *_syncQueue;
    BOOL _isLoaded;
    BOOL _didMountDevice;
    BOOL _didMountImage;
    BOOL _subclassIsCompressed;
    BOOL _needsAuthorization;
    BOOL _isOwnedByRootItem;
    BOOL _installsInHomeDirectory;
    BOOL _installsOnLocalSystem;
    BOOL _isInfoLoaded;
    NSUUID *_deviceUUID;
    NSString *_version;
    unsigned long long _archiveFileSize;
    ScriptsFileItem *_scriptsFileItem;
    NSString *_packageVolumeName;
    NSDate *_buildDate;
    NSDate *_installDate;
    ArchiveFile *_parentArchive;
    NSArray *_softwareUpdateCatalogURLs;
    id <ThreadingHandlerMethods> _threadingHandler;
    CSRef *_displayRef;
    NSString *_privateInstallationRoot;
    NSString *_privateCustomLocation;
    CSCodeSigningInfo *_privateCodeSigningInfo;
    NSArray *_metaArchivePrivateSubarchives;
}

+ (id)keyPathsForValuesAffectingPrimitiveSigningCertificateName;
+ (id)keyPathsForValuesAffectingSignatureError;
+ (id)keyPathsForValuesAffectingSigningCertificateAuthorityNames;
+ (id)keyPathsForValuesAffectingSigningCertificateName;
+ (id)keyPathsForValuesAffectingIsSigned;
+ (Class)archiveClassForURL:(id)arg1;
+ (Class)archiveClassForFile:(id)arg1;
+ (id)archiveFileWithURL:(id)arg1 incorrectChecksums:(id *)arg2 error:(id *)arg3;
@property(copy, nonatomic) NSArray *metaArchivePrivateSubarchives; // @synthesize metaArchivePrivateSubarchives=_metaArchivePrivateSubarchives;
@property(copy, nonatomic) CSCodeSigningInfo *privateCodeSigningInfo; // @synthesize privateCodeSigningInfo=_privateCodeSigningInfo;
@property(copy, nonatomic) NSString *privateCustomLocation; // @synthesize privateCustomLocation=_privateCustomLocation;
@property(copy, nonatomic) NSString *privateInstallationRoot; // @synthesize privateInstallationRoot=_privateInstallationRoot;
@property(nonatomic) BOOL isInfoLoaded; // @synthesize isInfoLoaded=_isInfoLoaded;
@property(retain, nonatomic) CSRef *displayRef; // @synthesize displayRef=_displayRef;
@property(nonatomic) __weak id <ThreadingHandlerMethods> threadingHandler; // @synthesize threadingHandler=_threadingHandler;
@property(nonatomic) BOOL installsOnLocalSystem; // @synthesize installsOnLocalSystem=_installsOnLocalSystem;
@property(nonatomic) BOOL installsInHomeDirectory; // @synthesize installsInHomeDirectory=_installsInHomeDirectory;
@property(copy, nonatomic) NSArray *softwareUpdateCatalogURLs; // @synthesize softwareUpdateCatalogURLs=_softwareUpdateCatalogURLs;
@property(nonatomic) BOOL isOwnedByRootItem; // @synthesize isOwnedByRootItem=_isOwnedByRootItem;
@property(nonatomic) __weak ArchiveFile *parentArchive; // @synthesize parentArchive=_parentArchive;
@property(copy, nonatomic) NSDate *installDate; // @synthesize installDate=_installDate;
@property(copy, nonatomic) NSDate *buildDate; // @synthesize buildDate=_buildDate;
@property(copy, nonatomic) NSString *packageVolumeName; // @synthesize packageVolumeName=_packageVolumeName;
@property(nonatomic) BOOL needsAuthorization; // @synthesize needsAuthorization=_needsAuthorization;
@property(nonatomic) __weak ScriptsFileItem *scriptsFileItem; // @synthesize scriptsFileItem=_scriptsFileItem;
@property(nonatomic) unsigned long long archiveFileSize; // @synthesize archiveFileSize=_archiveFileSize;
@property(nonatomic) BOOL subclassIsCompressed; // @synthesize subclassIsCompressed=_subclassIsCompressed;
@property(copy, nonatomic) NSString *version; // @synthesize version=_version;
@property(nonatomic) BOOL didMountImage; // @synthesize didMountImage=_didMountImage;
@property(nonatomic) BOOL didMountDevice; // @synthesize didMountDevice=_didMountDevice;
@property(retain, nonatomic) NSUUID *deviceUUID; // @synthesize deviceUUID=_deviceUUID;
@property(nonatomic) BOOL isLoaded; // @synthesize isLoaded=_isLoaded;
- (void).cxx_destruct;
- (BOOL)checkedOSVersion;
- (void)checkOSVersion;
- (BOOL)loadFromExistingArchive;
- (void)registerWithThreadingHandler;
- (BOOL)mountDeviceWrapperAndReturnActuallyMounted:(char *)arg1 error:(id *)arg2;
- (BOOL)mountDMGWrapperAndReturnActuallyMounted:(char *)arg1 error:(id *)arg2;
- (id)findWrapperRefWithError:(id *)arg1;
- (void)loadPackageVolumeName;
- (id)urlFromWeblocFileAtURL:(id)arg1 error:(id *)arg2;
- (id)downloadsURL;
@property(retain, nonatomic) CSRef *wrapperRef;
@property(retain, nonatomic) CSRef *ref;
- (void)loadPropertiesFromArchive:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)loadPropertiesFromCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)loadArchiveFailed:(id)arg1;
- (void)sortArchives;
- (void)cleanArchives;
- (void)buildResourceTree;
- (BOOL)unmountWrapperAndReturnError:(id *)arg1;
- (BOOL)mountWrapperAndReturnActuallyMounted:(char *)arg1 error:(id *)arg2;
- (void)cancelButtonWasPressed;
- (BOOL)reportError:(id)arg1;
- (BOOL)askForNonCriticalDisk:(id)arg1 error:(id *)arg2;
- (BOOL)askForDisk:(id)arg1 error:(id *)arg2;
- (BOOL)masterLoadArchiveAndReturnIncorrectChecksum:(char *)arg1 error:(id *)arg2;
- (void)registerChecksumForItem:(id)arg1 withKey:(id)arg2;
- (void)registerChecksumOfItem:(id)arg1;
- (id)itemsIdenticalToItem:(id)arg1;
- (BOOL)isItemUnique:(id)arg1;
- (id)itemWithPath:(id)arg1;
- (id)findFilename:(id)arg1 options:(unsigned long long)arg2;
- (long long)compare:(id)arg1;
- (BOOL)setFileAttributesWithError:(id *)arg1;
@property(readonly, nonatomic) BOOL filesAreCompressedSeparately;
@property(readonly, nonatomic) BOOL supportsChecksums;
@property(readonly, nonatomic) BOOL supportsHardLinks;
- (id)subarchiveWithSubpath:(id)arg1;
- (id)subarchiveWithIdentifier:(id)arg1;
@property(readonly, copy, nonatomic) NSArray *recursiveSubarchives;
@property(copy, nonatomic) NSArray *subarchives;
@property(readonly, nonatomic) BOOL isMetaArchive;
@property(readonly, copy, nonatomic) NSError *primitiveSignatureError;
@property(readonly, copy, nonatomic) NSArray *primitiveSigningCertificateAuthorityNames;
@property(readonly, copy, nonatomic) NSString *primitiveSigningCertificateName;
@property(readonly, nonatomic) BOOL primitiveIsSigned;
@property(readonly, copy, nonatomic) NSError *signatureError;
@property(readonly, copy, nonatomic) NSArray *signingCertificateAuthorityNames;
@property(readonly, copy, nonatomic) NSString *signingCertificateName;
@property(readonly, nonatomic) BOOL isSigned;
- (BOOL)containsArchivesAppropriateForSigning;
@property(readonly, nonatomic) BOOL isAppropriateForSigning;
@property(readonly, copy, nonatomic) NSURL *wrapperVolumeURL;
@property(readonly, copy, nonatomic) NSString *wrapperVolumeName;
@property(readonly, copy, nonatomic) NSURL *archiveVolumeURL;
@property(readonly, copy, nonatomic) NSString *archiveVolumeName;
@property(readonly, copy, nonatomic) NSURL *packageVolumeURL;
- (void)setRootResourceItem:(id)arg1 incorrectChecksums:(id *)arg2;
@property(retain, nonatomic) PackageItem *rootPackageItem;
@property(readonly, nonatomic) PackageItem *rootResourceItem;
@property(nonatomic) unsigned long long uncompressedFileSize;
@property(nonatomic) BOOL isSoftwareUpdate;
@property(readonly, copy, nonatomic) NSURL *payloadURL;
@property(readonly, copy, nonatomic) NSURL *archiveURL;
- (void)setCustomLocation:(id)arg1;
- (void)setInstallationRoot:(id)arg1;
- (id)installationRootURLsForDiskAtURL:(id)arg1;
- (id)installationRootURLForDiskAtURL:(id)arg1;
@property(readonly, copy, nonatomic) NSDictionary *infoDictionary;
@property(copy, nonatomic) NSString *identifier;
@property(readonly, copy, nonatomic) NSImage *icon;
@property(copy, nonatomic) NSString *OSVersion;
@property(readonly, copy, nonatomic) NSString *uniqueID;
@property(readonly, copy, nonatomic) NSString *name;
@property(readonly, copy, nonatomic) NSString *displayName;
@property(copy, nonatomic) NSURL *displayURL;
@property(copy, nonatomic) NSURL *wrapperURL;
@property(copy, nonatomic) NSURL *URL;
@property(readonly) BOOL userCancelledLoading;
- (void)cancel;
- (BOOL)loadArchivesAndReturnIncorrectChecksums:(id *)arg1 error:(id *)arg2;
- (BOOL)loadArchiveInfoAndReturnIncorrectChecksum:(char *)arg1 error:(id *)arg2;
@property(nonatomic) BOOL isCompressed;
@property(readonly, nonatomic) BOOL subclassIsReceipt;
@property(readonly, nonatomic) BOOL isReceipt;
@property(readonly, nonatomic) BOOL subclassSupportsInstall;
@property(readonly, nonatomic) BOOL supportsInstall;
@property(readonly, nonatomic) NSString *uniqueResourceIdentifier;
- (BOOL)isEquivalentToArchive:(id)arg1;
- (BOOL)copyArchiveToURL:(id)arg1 error:(id *)arg2;
- (BOOL)canCopyArchive;
- (BOOL)doUnpackItemsUsingSubclass:(id)arg1 toDirectoryAtURL:(id)arg2 privilegedOpsHandler:(id)arg3 threadingHandler:(id)arg4 error:(id *)arg5;
- (id)doUnpackResourceItem:(id)arg1 toDirectoryAtURL:(id)arg2 threadingHandler:(id)arg3 error:(id *)arg4;
- (BOOL)doUnpackItems:(id)arg1 toDirectoryAtURL:(id)arg2 privilegedOpsHandler:(id)arg3 threadingHandler:(id)arg4 error:(id *)arg5;
- (id)unpackResourceItem:(id)arg1 toDirectoryAtURL:(id)arg2 threadingHandler:(id)arg3 error:(id *)arg4;
- (id)unpackResourceItem:(id)arg1 toDirectoryAtURL:(id)arg2 error:(id *)arg3;
- (BOOL)unpackItems:(id)arg1 toDirectoryAtURL:(id)arg2 privilegedOpsHandler:(id)arg3 threadingHandler:(id)arg4 error:(id *)arg5;
- (BOOL)unpackItems:(id)arg1 toDirectoryAtURL:(id)arg2 privilegedOpsHandler:(id)arg3 error:(id *)arg4;
- (long long)loadSubArchivesWithPackageLoader:(id)arg1 incorrectChecksum:(char *)arg2 error:(id *)arg3;
- (BOOL)downloadWithError:(id *)arg1;
- (BOOL)needsDownloadingForNonFileURLs;
- (BOOL)loadArchiveResourcesAndReturnIncorrectChecksum:(char *)arg1 error:(id *)arg2;
- (BOOL)loadArchiveContentsAndReturnIncorrectChecksum:(char *)arg1 error:(id *)arg2;
- (BOOL)loadArchiveAndReturnIncorrectChecksum:(char *)arg1 error:(id *)arg2;
- (void)dealloc;
- (id)initWithURL:(id)arg1 incorrectChecksums:(id *)arg2 error:(id *)arg3;
- (id)init;

@end

