//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSOpenSavePanelDelegate.h"

@class KTask, KTrackingButton, KTrackingView, NSArray, NSButton, NSCondition, NSData, NSDate, NSImageView, NSMutableArray, NSPipe, NSPopUpButton, NSProgress, NSProgressIndicator, NSSecureTextField, NSSlider, NSString, NSTextField, NSTimer, NSUserNotification, NSView, logPopoverController, taskViewInstance;

@interface taskController : NSObject <NSOpenSavePanelDelegate>
{
    id parent;
    NSProgress *_finderProgress;
    logPopoverController *_logPopoverController;
    double color;
    double colorRefinement;
    int taskType;
    taskViewInstance *taskViewInList;
    id activity;
    id activeSaveOpenSheet;
    NSUserNotification *userNotification;
    BOOL hasFileAccess;
    NSArray *temporaryAccess;
    NSMutableArray *log;
    NSString *errorViewMessage;
    BOOL allExtractionBinariesTried;
    int lastStatusCode;
    BOOL ready;
    BOOL started;
    BOOL finished;
    BOOL cancelled;
    BOOL ended;
    BOOL onPause;
    BOOL onAutoPause;
    NSCondition *onPauseCondition;
    BOOL onQueue;
    BOOL applyingQuarantine;
    BOOL someError;
    int errorCode;
    BOOL badgeProgress;
    BOOL holdStatusMessage;
    KTask *task;
    NSPipe *taskPipeOut;
    NSPipe *taskPipeError;
    NSPipe *taskPipeIn;
    NSDate *taskStartTime;
    NSTimer *taskEstimationTimer;
    BOOL taskEstimationBreak;
    double lastEstimation;
    double carriedSeconds;
    int currentProgress;
    int buffer;
    unsigned long long totalBytes;
    unsigned long long bufferBytes;
    BOOL needsAttentionSet;
    BOOL passwordNeeded;
    BOOL headerWarning;
    BOOL askingVolumeParts;
    BOOL askingSourceAccess;
    BOOL passwordControl;
    BOOL sendPassword;
    BOOL passwordSended;
    int passwordRetry;
    int reusedPassword;
    BOOL waitForOtherPassword;
    BOOL encodingControl;
    NSString *encoding;
    NSData *encodedStringData;
    NSView *_taskView;
    NSProgressIndicator *_taskViewProgressIndicator;
    NSTextField *_taskViewStatusText;
    NSTextField *_taskViewCommentErrorText;
    NSTextField *_taskViewTimeText;
    NSImageView *_taskViewIcon;
    NSImageView *_taskViewPasswordIcon;
    KTrackingButton *_taskViewStopButton;
    KTrackingButton *_taskViewPauseButton;
    KTrackingButton *_taskViewShowInFinderButton;
    KTrackingButton *_taskViewShowLogButton;
    KTrackingView *_taskViewTrackingMiniView;
    NSSlider *_taskViewProgressColor;
    NSSlider *_taskViewProgressColorRefinement;
    NSView *_taskViewEncodingView;
    NSTextField *_taskViewEncodingText;
    NSPopUpButton *_taskViewEncodingList;
    NSImageView *_taskViewEncodingIcon;
    NSImageView *_taskViewEncodingPasswordIcon;
    NSButton *_taskViewEncodingStopButton;
    NSButton *_taskViewEncodingOK;
    NSSecureTextField *_taskViewPasswordInput;
    NSButton *_taskViewPasswordCancel;
    NSButton *_taskViewPasswordOK;
}

@property(retain, nonatomic) NSButton *taskViewPasswordOK; // @synthesize taskViewPasswordOK=_taskViewPasswordOK;
@property(retain, nonatomic) NSButton *taskViewPasswordCancel; // @synthesize taskViewPasswordCancel=_taskViewPasswordCancel;
@property(retain, nonatomic) NSSecureTextField *taskViewPasswordInput; // @synthesize taskViewPasswordInput=_taskViewPasswordInput;
@property(retain, nonatomic) NSButton *taskViewEncodingOK; // @synthesize taskViewEncodingOK=_taskViewEncodingOK;
@property(retain, nonatomic) NSButton *taskViewEncodingStopButton; // @synthesize taskViewEncodingStopButton=_taskViewEncodingStopButton;
@property(retain, nonatomic) NSImageView *taskViewEncodingPasswordIcon; // @synthesize taskViewEncodingPasswordIcon=_taskViewEncodingPasswordIcon;
@property(retain, nonatomic) NSImageView *taskViewEncodingIcon; // @synthesize taskViewEncodingIcon=_taskViewEncodingIcon;
@property(retain, nonatomic) NSPopUpButton *taskViewEncodingList; // @synthesize taskViewEncodingList=_taskViewEncodingList;
@property(retain, nonatomic) NSTextField *taskViewEncodingText; // @synthesize taskViewEncodingText=_taskViewEncodingText;
@property(retain, nonatomic) NSView *taskViewEncodingView; // @synthesize taskViewEncodingView=_taskViewEncodingView;
@property(retain, nonatomic) NSSlider *taskViewProgressColorRefinement; // @synthesize taskViewProgressColorRefinement=_taskViewProgressColorRefinement;
@property(retain, nonatomic) NSSlider *taskViewProgressColor; // @synthesize taskViewProgressColor=_taskViewProgressColor;
@property(retain, nonatomic) KTrackingView *taskViewTrackingMiniView; // @synthesize taskViewTrackingMiniView=_taskViewTrackingMiniView;
@property(retain, nonatomic) KTrackingButton *taskViewShowLogButton; // @synthesize taskViewShowLogButton=_taskViewShowLogButton;
@property(retain, nonatomic) KTrackingButton *taskViewShowInFinderButton; // @synthesize taskViewShowInFinderButton=_taskViewShowInFinderButton;
@property(retain, nonatomic) KTrackingButton *taskViewPauseButton; // @synthesize taskViewPauseButton=_taskViewPauseButton;
@property(retain, nonatomic) KTrackingButton *taskViewStopButton; // @synthesize taskViewStopButton=_taskViewStopButton;
@property(retain, nonatomic) NSImageView *taskViewPasswordIcon; // @synthesize taskViewPasswordIcon=_taskViewPasswordIcon;
@property(retain, nonatomic) NSImageView *taskViewIcon; // @synthesize taskViewIcon=_taskViewIcon;
@property(retain, nonatomic) NSTextField *taskViewTimeText; // @synthesize taskViewTimeText=_taskViewTimeText;
@property(retain, nonatomic) NSTextField *taskViewCommentErrorText; // @synthesize taskViewCommentErrorText=_taskViewCommentErrorText;
@property(retain, nonatomic) NSTextField *taskViewStatusText; // @synthesize taskViewStatusText=_taskViewStatusText;
@property(retain, nonatomic) NSProgressIndicator *taskViewProgressIndicator; // @synthesize taskViewProgressIndicator=_taskViewProgressIndicator;
@property(retain, nonatomic) NSView *taskView; // @synthesize taskView=_taskView;
- (void)showInFinder;
- (void)exportPassword;
- (void)deleteFiles;
- (void)deleteIncompleteFiles;
- (void)removeTask;
- (void)finalizeTask;
- (void)finish;
- (void)continueEndedTask;
- (void)checkEndedTask;
- (void)checkEndedTaskWithDelay;
- (void)autoResume;
- (void)autoPause;
- (void)convertDMG;
- (void)doTask;
- (void)setTaskName:(BOOL)arg1;
- (void)setTaskNameWithWriteFallback;
- (void)setTaskName;
- (void)askForReadAccess;
- (void)resumeTaskAndStartActivity;
- (void)suspendTaskAndEndActivity;
- (void)startTask;
- (void)startQueuedTask;
- (void)queueTask:(id)arg1;
- (void)queueTask;
- (void)queuePreparedTask;
- (void)prepareTask:(BOOL)arg1 alreadyAskedForReadAccess:(BOOL)arg2;
- (void)prepareTask;
- (BOOL)needsAttention;
- (BOOL)isWaitingForOtherPassword;
- (BOOL)isWaitingForPassword;
- (BOOL)isVisible;
- (BOOL)wasWorking;
- (BOOL)isCancelled;
- (BOOL)didEnded;
- (BOOL)didFinished;
- (BOOL)didStarted;
- (void)setReady;
- (BOOL)isReady;
- (BOOL)onPause;
- (BOOL)onQueue;
- (void)setActive;
- (void)setErrorCode:(int)arg1;
- (int)getTaskType;
- (id)kTask;
- (void)askAllVolumesAccess:(id)arg1 withFirstVolume:(id)arg2 needsFolder:(BOOL)arg3;
- (void)askAllVolumesAccess:(id)arg1 withFirstVolume:(id)arg2;
- (void)checkAllVolumesAccessible:(id)arg1 onlyFolder:(BOOL)arg2;
- (void)checkAllVolumesAccessible:(id)arg1;
- (void)checkForExtractionEncoding:(id)arg1;
- (void)checkForExtractionPassword:(id)arg1;
- (BOOL)applyQuarantine;
- (void)applyQuarantineFlags:(id)arg1 fromOrigin:(id)arg2;
- (void)setModificationTime:(id)arg1;
- (void)setEncoding;
- (void)extractWithPassword;
- (void)prepareExtractionWithPassword;
- (void)askForPassword;
- (void)askForPasswordIfPossible;
- (void)checkForCompressionPassword:(id)arg1;
- (BOOL)panel:(id)arg1 shouldEnableURL:(id)arg2;
- (void)getEstimatedSize:(id)arg1;
- (id)getTaskTypeName;
- (void)setNotification:(id)arg1;
- (void)cleanNotification;
- (void)notifyTaskFinished;
- (void)notifyTaskStopped;
- (void)notifyTaskReady;
- (void)notifyNeedsAttention;
- (void)showOperationLog:(id)arg1;
- (void)updateOperationLog;
- (void)setReadHandleInBackgroundAndNotify;
- (void)setPipes;
- (void)setTerminationObserver:(BOOL)arg1;
- (void)setTerminationObserver;
- (void)setCarriedTime;
- (void)setStartTime;
- (BOOL)checkProgress:(id)arg1;
- (id)clearReaderData:(id)arg1 withPattern:(id)arg2;
- (void)readData:(id)arg1;
- (void)reader:(id)arg1;
- (void)stderrreader:(id)arg1;
- (void)stdoutreader:(id)arg1;
- (void)resetProgressBarFilters;
- (void)applyProgressBarHUEColor:(double)arg1;
- (void)applyProgressBarHUEColor;
- (void)setProgressBarQueueEffect:(BOOL)arg1;
- (id)progressBarQueueEffect;
- (void)setProgressBarIndeterminate:(BOOL)arg1;
- (void)animateProgressBar:(BOOL)arg1;
- (void)changeColorRefinement:(id)arg1;
- (void)changeColor:(id)arg1;
- (void)setFinderProgress:(double)arg1;
- (void)setFinderProgressIndeterminate;
- (void)removeFinderProgress;
- (void)cancelFinderProgress;
- (id)getFinderProgress;
- (void)taskWindowStateChanged;
- (BOOL)control:(id)arg1 textView:(id)arg2 doCommandBySelector:(SEL)arg3;
- (void)controlTextDidEndEditing:(id)arg1;
- (void)controlTextDidBeginEditing:(id)arg1;
- (void)controlTextDidChange:(id)arg1;
- (void)showShowLogButton:(BOOL)arg1;
- (void)showShowInFinderButton:(BOOL)arg1;
- (void)showExtraButtons:(BOOL)arg1;
- (void)hideExtraButtons;
- (void)showExtraButtons;
- (void)setLogButton;
- (void)stopEncoding;
- (void)stopPassword;
- (void)stopError;
- (void)stop;
- (void)pause;
- (void)pause:(BOOL)arg1;
- (void)resume;
- (void)hoverEnded;
- (void)hoverPause;
- (void)hoverStop;
- (void)hoverShowLog;
- (void)hoverShowInFinder;
- (void)hoverButton:(id)arg1;
- (void)updateWindow:(id)arg1;
- (void)updateWindow;
- (void)updateStatusText;
- (void)setApplyingQuarantineStatus;
- (void)setOnQueueStatus;
- (void)setOnPauseStatus;
- (void)updatePasswordIcon:(BOOL)arg1 isUnlocked:(BOOL)arg2;
- (void)hidePasswordIcon;
- (void)showPasswordIcon:(BOOL)arg1;
- (void)showPasswordIcon;
- (void)updatePauseButton;
- (void)updateStopButton;
- (void)updateProgress;
- (void)setProgressIndeterminate:(BOOL)arg1;
- (void)updateRemainingTime;
- (void)timedEstimation;
- (void)blockUpdateRemainingTime:(BOOL)arg1;
- (void)awakeFromNib;
- (id)getTaskView;
- (void)setView;
- (void)dealloc;
- (id)init;
- (id)initWithType:(int)arg1 andTask:(id)arg2 andParent:(id)arg3;
- (id)initWithType:(int)arg1 andParent:(id)arg2;
- (id)initWithTask:(id)arg1 andParent:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

