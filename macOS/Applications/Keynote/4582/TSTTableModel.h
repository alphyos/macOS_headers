//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import "TSPObject.h"

#import "GSSPAutoEncodable-Protocol.h"
#import "TSTInfoDelegating-Protocol.h"

@class NSArray, NSString, NSUUID, TSCECalculationEngine, TSCECellCoordinateVector, TSCEOwnerFormulaMap, TSCEOwnerUidMapper, TSDStroke, TSTCell, TSTCellDictionary, TSTCellStyle, TSTColumnRowUIDMap, TSTConditionalStyleFormulaOwner, TSTHiddenStateFormulaOwner, TSTHiddenStateIndexSet, TSTImportWarningSetByCoordinateMap, TSTMergeOwner, TSTSortRuleReferenceTracker, TSTStrokeSidecar, TSTTableDataStore, TSTTableFilterSet, TSTTableSortOrder, TSTTableStyle, TSTTableStylePreset, TSUPointerKeyDictionary, TSWPParagraphStyle, TSWPShapeStyle, TSWPStorage;

@interface TSTTableModel : TSPObject <GSSPAutoEncodable, TSTInfoDelegating>
{
    BOOL _wasCut;
    BOOL _headerRowsFrozen;
    BOOL _headerColumnsFrozen;
    BOOL _tableNameEnabled;
    BOOL _tableNameBorderEnabled;
    BOOL _repeatingHeaderRowsEnabled;
    BOOL _repeatingHeaderColumnsEnabled;
    BOOL _styleApplyClearsAll;
    BOOL _presetNeedsStrongOwnership;
    BOOL _wasUnarchivedFromAProvidedTable;
    unsigned short _numberOfRows;
    unsigned short _numberOfColumns;
    unsigned short _numberOfHeaderRows;
    unsigned short _numberOfHeaderColumns;
    unsigned short _numberOfFooterRows;
    unsigned short _numberOfHiddenRows;
    unsigned short _numberOfHiddenColumns;
    unsigned short _numberOfUserHiddenRows;
    unsigned short _numberOfUserHiddenColumns;
    unsigned short _numberOfFilteredRows;
    TSCECalculationEngine *_calcEngine;
    TSTTableDataStore *_dataStore;
    TSTHiddenStateIndexSet *_hiddenRows;
    TSTHiddenStateIndexSet *_userHiddenRows;
    TSTHiddenStateIndexSet *_hiddenColumns;
    double _defaultRowHeight;
    double _defaultColumnWidth;
    NSString *_tableName;
    double _tableNameHeight;
    unsigned long long _presetIDForUpgrade;
    TSTTableStylePreset *_tableStylePreset;
    TSTTableStyle *_tableStyle;
    TSTCellStyle *_bodyCellStyle;
    TSTCellStyle *_headerRowCellStyle;
    TSTCellStyle *_headerColumnCellStyle;
    TSTCellStyle *_footerRowCellStyle;
    TSWPParagraphStyle *_bodyTextStyle;
    TSWPParagraphStyle *_headerRowTextStyle;
    TSWPParagraphStyle *_headerColumnTextStyle;
    TSWPParagraphStyle *_footerRowTextStyle;
    TSWPParagraphStyle *_tableNameStyle;
    TSWPShapeStyle *_tableNameShapeStyle;
    TSTCell *_defaultBodyCell;
    TSTCell *_defaultHeaderRowCell;
    TSTCell *_defaultHeaderColumnCell;
    TSTCell *_defaultFooterRowCell;
    TSCEOwnerFormulaMap *_formulasForUndo;
    TSTImportWarningSetByCoordinateMap *_warningSetsForUndo;
    TSTCellDictionary *_cellsPendingWrite;
    TSCECellCoordinateVector *_cellsToInvalidateAfterRecalc;
    TSCECellCoordinateVector *_cellsToInvalidateNonoverflowingAfterRecalc;
    TSTConditionalStyleFormulaOwner *_conditionalStyleFormulaOwner;
    TSTMergeOwner *_mergeOwner;
    TSTTableFilterSet *_filterSet;
    TSTHiddenStateFormulaOwner *_hiddenStateFormulaOwnerForRows;
    TSTHiddenStateFormulaOwner *_hiddenStateFormulaOwnerForColumns;
    TSTTableSortOrder *_sortOrder;
    TSTSortRuleReferenceTracker *_sortRuleReferenceTracker;
    TSTColumnRowUIDMap *_columnRowUIDMap;
    TSTStrokeSidecar *_strokeSidecar;
    TSWPStorage *_deprecatedProvider;
    TSUPointerKeyDictionary *_commentHostingMap;
    UUIDData_5fbc143e _tableUID;
    UUIDData_5fbc143e _fromTableUID;
}

+ (BOOL)needsObjectUUID;
@property(nonatomic) BOOL wasUnarchivedFromAProvidedTable; // @synthesize wasUnarchivedFromAProvidedTable=_wasUnarchivedFromAProvidedTable;
@property(retain, nonatomic) TSWPStorage *deprecatedProvider; // @synthesize deprecatedProvider=_deprecatedProvider;
@property(readonly, retain, nonatomic) TSTStrokeSidecar *strokeSidecar; // @synthesize strokeSidecar=_strokeSidecar;
@property(readonly, nonatomic) TSTSortRuleReferenceTracker *sortRuleReferenceTracker; // @synthesize sortRuleReferenceTracker=_sortRuleReferenceTracker;
@property(nonatomic) unsigned short numberOfFilteredRows; // @synthesize numberOfFilteredRows=_numberOfFilteredRows;
@property(readonly, nonatomic) TSTHiddenStateFormulaOwner *hiddenStateFormulaOwnerForColumns; // @synthesize hiddenStateFormulaOwnerForColumns=_hiddenStateFormulaOwnerForColumns;
@property(readonly, nonatomic) TSTHiddenStateFormulaOwner *hiddenStateFormulaOwnerForRows; // @synthesize hiddenStateFormulaOwnerForRows=_hiddenStateFormulaOwnerForRows;
@property(readonly, nonatomic) TSTMergeOwner *mergeOwner; // @synthesize mergeOwner=_mergeOwner;
@property(retain, nonatomic) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner; // @synthesize conditionalStyleFormulaOwner=_conditionalStyleFormulaOwner;
@property(readonly, nonatomic) TSCECellCoordinateVector *cellsToInvalidateNonoverflowingAfterRecalc; // @synthesize cellsToInvalidateNonoverflowingAfterRecalc=_cellsToInvalidateNonoverflowingAfterRecalc;
@property(readonly, nonatomic) TSCECellCoordinateVector *cellsToInvalidateAfterRecalc; // @synthesize cellsToInvalidateAfterRecalc=_cellsToInvalidateAfterRecalc;
@property(readonly, nonatomic) TSTCellDictionary *cellsPendingWrite; // @synthesize cellsPendingWrite=_cellsPendingWrite;
@property(retain, nonatomic) TSTImportWarningSetByCoordinateMap *warningSetsForUndo; // @synthesize warningSetsForUndo=_warningSetsForUndo;
@property(retain, nonatomic) TSCEOwnerFormulaMap *formulasForUndo; // @synthesize formulasForUndo=_formulasForUndo;
@property(retain, nonatomic) TSTCell *defaultFooterRowCell; // @synthesize defaultFooterRowCell=_defaultFooterRowCell;
@property(retain, nonatomic) TSTCell *defaultHeaderColumnCell; // @synthesize defaultHeaderColumnCell=_defaultHeaderColumnCell;
@property(retain, nonatomic) TSTCell *defaultHeaderRowCell; // @synthesize defaultHeaderRowCell=_defaultHeaderRowCell;
@property(retain, nonatomic) TSTCell *defaultBodyCell; // @synthesize defaultBodyCell=_defaultBodyCell;
@property(nonatomic) unsigned long long presetIDForUpgrade; // @synthesize presetIDForUpgrade=_presetIDForUpgrade;
@property(nonatomic) double defaultColumnWidth; // @synthesize defaultColumnWidth=_defaultColumnWidth;
@property(nonatomic) double defaultRowHeight; // @synthesize defaultRowHeight=_defaultRowHeight;
@property(retain, nonatomic) TSTHiddenStateIndexSet *hiddenColumns; // @synthesize hiddenColumns=_hiddenColumns;
@property(retain, nonatomic) TSTHiddenStateIndexSet *userHiddenRows; // @synthesize userHiddenRows=_userHiddenRows;
@property(retain, nonatomic) TSTHiddenStateIndexSet *hiddenRows; // @synthesize hiddenRows=_hiddenRows;
@property(readonly, nonatomic) unsigned short numberOfUserHiddenColumns; // @synthesize numberOfUserHiddenColumns=_numberOfUserHiddenColumns;
@property(readonly, nonatomic) unsigned short numberOfUserHiddenRows; // @synthesize numberOfUserHiddenRows=_numberOfUserHiddenRows;
@property(readonly, nonatomic) unsigned short numberOfHiddenColumns; // @synthesize numberOfHiddenColumns=_numberOfHiddenColumns;
@property(readonly, nonatomic) unsigned short numberOfHiddenRows; // @synthesize numberOfHiddenRows=_numberOfHiddenRows;
@property(nonatomic) UUIDData_5fbc143e fromTableUID; // @synthesize fromTableUID=_fromTableUID;
@property(nonatomic) UUIDData_5fbc143e tableUID; // @synthesize tableUID=_tableUID;
@property(readonly, retain, nonatomic) TSTTableDataStore *dataStore; // @synthesize dataStore=_dataStore;
@property(nonatomic) TSCECalculationEngine *calcEngine; // @synthesize calcEngine=_calcEngine;
- (id).cxx_construct;
- (Class)editorClass;
- (Class)dataStoreIteratorClass;
- (Class)layoutClass;
- (Class)repClass;
- (void)p_iterateDataStoreCellsInRegion:(id)arg1 searchFlags:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (id)cellRegionForUIDRange:(const struct TSTCellUIDRange *)arg1;
- (struct TSTCellUIDRange)cellUIDRangeForCellRange:(struct TSUCellRect)arg1;
- (struct TSUCellRect)cellRangeForUIDRange:(const struct TSTCellUIDRange *)arg1;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 notFoundUIDs:(id)arg3;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2;
- (id)UIDSetForIndexes:(id)arg1 isRows:(BOOL)arg2;
- (vector_dadc1b26)prunedColumnUIDsFromColumnUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)prunedRowUIDsFromRowUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)columnUIDs;
- (vector_dadc1b26)columnUIDsForColumnRange:(struct _NSRange)arg1;
- (id)mutableColumnIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (id)columnIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)columnUIDsForColumnIndexes:(id)arg1;
- (unsigned char)columnIndexForColumnUID:(const UUIDData_5fbc143e *)arg1;
- (UUIDData_5fbc143e)columnUIDForColumnIndex:(unsigned char)arg1;
- (vector_dadc1b26)rowUIDs;
- (vector_dadc1b26)rowUIDsForRowRange:(struct _NSRange)arg1;
- (id)mutableRowIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (id)rowIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)rowUIDsForRowIndexes:(id)arg1;
- (unsigned short)rowIndexForRowUID:(const UUIDData_5fbc143e *)arg1;
- (UUIDData_5fbc143e)rowUIDForRowIndex:(unsigned short)arg1;
- (BOOL)writeCellIDsInCellUIDList:(id)arg1 toVector:(vector_13f93596 *)arg2;
- (id)prunedCellUIDListFromCellUIDList:(id)arg1 allowMergeFragment:(BOOL)arg2 addingPrunedIndicesToIndexSet:(id)arg3;
- (struct TSUCellCoord)cellIDForCellUID:(const struct TSTCellUID *)arg1;
- (struct TSTCellUID)cellUIDforCellID:(const struct TSUCellCoord *)arg1;
- (struct TSUCellCoord)cellIDForCellContainingRichTextStorage:(id)arg1;
- (id)allRichTextPayloadStorages;
- (unsigned int)addCellFormat:(id)arg1 atSuggestedKey:(unsigned int)arg2;
- (unsigned int)addString:(id)arg1;
- (void)addStringReferenceForKey:(unsigned int)arg1;
- (unsigned int)addFormula:(struct TSCEFormula *)arg1;
- (unsigned int)formulaRefCountForKey:(unsigned int)arg1;
- (void)addFormulaReferenceForKey:(unsigned int)arg1;
- (id)populatedMultipleChoiceListFormat:(id)arg1;
- (unsigned long long)conditionalStyleRefCountForKey:(unsigned int)arg1;
- (BOOL)formatDataListContainsControlFormats;
- (long long)importWarningSetDataListCount;
- (void)upgradeFromPreUFF;
- (void)assertCollaborationConvergence;
- (void)validate;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (void)updateTableRowColumnStylesWithBlock:(CDUnknownBlockType)arg1;
- (void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2;
- (BOOL)cellWasModifiedInCurrentRecalcCycle:(struct TSUCellCoord)arg1;
- (BOOL)hasFormulas;
- (struct TSCERangeRef)referenceToHiddenStateFromColumn:(unsigned char)arg1 toColumn:(unsigned char)arg2;
- (struct TSCERangeRef)referenceToHiddenStateFromRow:(unsigned short)arg1 toRow:(unsigned short)arg2;
- (void)prepareForPasteWithCalculationEngine:(id)arg1 sourceOffset:(CDStruct_1ef3fb1f)arg2;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1 wasCrossDocumentPaste:(BOOL)arg2;
- (void)reassignPasteboardCustomFormatKeys;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
- (void)remapTableUIDsInFormulasWithMap:(const UUIDMap_727ee07e *)arg1 calcEngine:(id)arg2 bakeForBadRefs:(BOOL)arg3;
- (void)setFormulaOwnerUIDsWithMap:(id)arg1 shouldStealReferences:(BOOL)arg2;
- (void)getValue:(out struct TSCEValue *)arg1 fromIteratorData:(id)arg2 fetchRichTextAttributesIfPlainText:(BOOL)arg3;
- (int)getValue:(out struct TSCEValue *)arg1 atCellID:(struct TSUCellCoord)arg2 fetchRichTextAttributesIfPlainText:(BOOL)arg3;
- (id)strokeLayerForBottomOfRow:(unsigned short)arg1;
- (id)strokeLayerForTopOfRow:(unsigned short)arg1;
- (id)strokeLayerForRightSideOfColumn:(unsigned char)arg1;
- (id)strokeLayerForLeftSideOfColumn:(unsigned char)arg1;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3;
- (id)cellBorderAtCellID:(struct TSUCellCoord)arg1;
- (int)maxStrokeOrder;
@property(readonly, nonatomic) TSDStroke *footerRowSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBorderStroke;
@property(readonly, nonatomic) TSDStroke *headerRowSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBorderStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBorderStroke;
@property(readonly, nonatomic) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property(readonly, nonatomic) TSDStroke *bodyRowStroke;
@property(readonly, nonatomic) TSDStroke *bodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property(readonly, nonatomic) TSDStroke *defaultVerticalBorderStroke;
@property(readonly, nonatomic) TSDStroke *defaultHorizontalBorderStroke;
- (id)fillForColumn:(unsigned char)arg1;
- (id)fillForRow:(unsigned short)arg1;
- (id)expandCellRegionToCoverMergedCells:(id)arg1;
- (struct TSUCellRect)expandCellRangeToCoverMergedCells:(struct TSUCellRect)arg1;
- (id)mergesIntersectingCellRegion:(id)arg1;
- (id)mergesIntersectingRange:(struct TSUCellRect)arg1;
- (id)mergeRangesForCellRegion:(id)arg1;
- (id)grabAllMergeRanges;
- (id)allMergeRanges;
- (id)mergeRangesForCellRange:(struct TSUCellRect)arg1;
- (BOOL)isSingleCellOrMergeRange:(struct TSUCellRect)arg1;
- (id)regionForValueOrCommentCellsInRange:(struct TSUCellRect)arg1;
- (id)mergedGridIndicesForDirection:(long long)arg1;
- (BOOL)hasMergeRangesIntersectingCellRegion:(id)arg1;
- (BOOL)hasMergeFragmentAtCellID:(struct TSUCellCoord)arg1;
- (BOOL)mergeRangesPartiallyIntersectingCellRange:(struct TSUCellRect)arg1;
- (struct TSUCellRect)mergeRangeAtCellID:(struct TSUCellCoord)arg1;
- (BOOL)unmergeCellRange:(struct TSUCellRect)arg1;
- (BOOL)mergeCellRange:(struct TSUCellRect)arg1;
- (BOOL)hasMergeRanges;
- (id)fontColorAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (id)stringAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (unsigned char)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnAfterColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned char)arg1;
- (unsigned short)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowAfterRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowBeforeRowAtIndex:(unsigned short)arg1;
- (void)setupHiddenStateIndexSets;
- (BOOL)isCellRangeHidden:(struct TSUCellRect)arg1;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect)arg1 forAction:(unsigned char)arg2;
- (unsigned char)hidingActionForColumnAtIndex:(unsigned char)arg1;
- (unsigned char)hidingActionForRowAtIndex:(unsigned short)arg1;
- (id)indexesOfVisibleRowsInRowRange:(id)arg1;
- (id)indexesOfUserVisibleRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfVisibleRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfUserHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfVisibleColumnsInColumnRange:(id)arg1;
- (id)indexesOfVisibleColumnsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)hasHiddenColumnAtIndex:(unsigned char)arg1;
- (BOOL)hasHiddenRowAtIndex:(unsigned short)arg1;
- (BOOL)hasHiddenColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2;
- (BOOL)hasHiddenRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (BOOL)showColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2;
- (BOOL)showRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (BOOL)anyHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (unsigned short)numberOfHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (unsigned short)numberOfUserHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (unsigned short)numberOfHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)hideColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2;
- (BOOL)hideRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (void)swapRowAtIndex:(unsigned short)arg1 withRowAtIndex:(unsigned short)arg2;
- (void)moveColumnRange:(struct _NSRange)arg1 toColumnIndex:(unsigned char)arg2;
- (void)moveRowRange:(struct _NSRange)arg1 toRowIndex:(unsigned short)arg2;
- (void)removeColumnsAtIndexes:(id)arg1;
- (void)removeRowsAtIndexes:(id)arg1;
- (void)removeColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2;
- (void)removeRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2;
- (void)p_clearDataListEntriesInRange:(struct TSUCellRect)arg1 ignoreSizeChecks:(BOOL)arg2;
- (void)insertColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3;
- (int)insertColumnsInRange:(struct _NSRange)arg1 uids:(const vector_dadc1b26 *)arg2 metadata:(id)arg3;
- (int)insertRowsInRange:(struct _NSRange)arg1 uids:(const vector_dadc1b26 *)arg2 metadata:(id)arg3 unsetFilterHidingAction:(BOOL)arg4;
- (int)insertRowsInRange:(struct _NSRange)arg1 uids:(const vector_dadc1b26 *)arg2 metadata:(id)arg3;
- (void)insertRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3;
- (struct TSUCellRect)bottomCornerRange;
- (struct TSUCellRect)topCornerRange;
- (struct TSUCellRect)footerRowRange;
- (struct TSUCellRect)actualHeaderColumnRange;
- (struct TSUCellRect)headerColumnRange;
- (struct TSUCellRect)headerRowRange;
- (struct TSUCellRect)bodyRowRange;
- (struct TSUCellRect)bodyColumnRange;
- (struct TSUCellRect)bodyRange;
- (struct TSUCellRect)range;
- (double)computeDefaultFontHeightForTableArea:(unsigned long long)arg1;
- (void)computeDefaultRowHeight;
@property NSArray *rowHeights;
@property NSArray *columnWidths;
- (void)setWidth:(double)arg1 ofColumn:(unsigned char)arg2;
- (void)setHeight:(double)arg1 ofRow:(unsigned short)arg2;
- (void)setWidth:(double)arg1 ofColumnAtIndex:(unsigned char)arg2;
- (void)setHeight:(double)arg1 ofRowAtIndex:(unsigned short)arg2;
- (double)widthOfColumnAtIndex:(unsigned char)arg1 isDefault:(out char *)arg2;
- (double)heightOfRowAtIndex:(unsigned short)arg1 isDefault:(out char *)arg2;
- (struct TSUCellCoord)cellIDBelowCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDAboveCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDRightOfCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDLeftOfCellID:(struct TSUCellCoord)arg1;
- (unsigned int)numberOfPopulatedCells;
- (id)rowNameForCellID:(struct TSUCellCoord)arg1 cellRangeContainingName:(struct TSUCellRect *)arg2 restrictToBodyRange:(BOOL)arg3;
- (id)columnNameForCellID:(struct TSUCellCoord)arg1 cellRangeContainingName:(struct TSUCellRect *)arg2 restrictToBodyRange:(BOOL)arg3;
- (id)conditionalStyleSetAtCellID:(struct TSUCellCoord)arg1;
- (id)textStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (id)cellStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (int)setTextStyle:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (int)setCellStyle:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (BOOL)textStyle:(id)arg1 isEqualToDefaultTextStyleForCellID:(struct TSUCellCoord)arg2;
- (BOOL)cellStyle:(id)arg1 isEqualToDefaultCellStyleForCellID:(struct TSUCellCoord)arg2;
- (id)textStyleForCellWithEmptyStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (id)defaultTextStyleForTableArea:(unsigned long long)arg1;
- (id)defaultTextStyleForCellID:(struct TSUCellCoord)arg1;
- (id)cellStyleForCellWithEmptyStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (id)defaultCellStyleForTableArea:(unsigned long long)arg1;
- (id)defaultCellStyleForCellID:(struct TSUCellCoord)arg1;
- (id)textStyleOfColumnAtIndex:(unsigned char)arg1 isDefault:(out char *)arg2;
- (id)cellStyleOfColumnAtIndex:(unsigned char)arg1 isDefault:(out char *)arg2;
- (int)setTextStyle:(id)arg1 ofColumnAtIndex:(unsigned char)arg2;
- (int)setCellStyle:(id)arg1 ofColumnAtIndex:(unsigned char)arg2;
- (id)textStyleOfRowAtIndex:(unsigned short)arg1 isDefault:(out char *)arg2;
- (id)cellStyleOfRowAtIndex:(unsigned short)arg1 isDefault:(out char *)arg2;
- (int)setTextStyle:(id)arg1 ofRowAtIndex:(unsigned short)arg2;
- (int)setCellStyle:(id)arg1 ofRowAtIndex:(unsigned short)arg2;
- (void)postCommentNotificationForStorage:(id)arg1 atCellID:(struct TSUCellCoord)arg2 notificationKey:(id)arg3 table:(id)arg4;
- (int)removeCommentStorageAtCellID:(struct TSUCellCoord)arg1 table:(id)arg2;
- (int)setCommentStorage:(id)arg1 atCellID:(struct TSUCellCoord)arg2 table:(id)arg3;
- (id)commentHostingAtCellID:(struct TSUCellCoord)arg1 table:(id)arg2;
- (id)commentHostingAtCellID:(struct TSUCellCoord)arg1 forCommentStorage:(id)arg2 table:(id)arg3;
- (void)clearCommentHostingMapForCommentStorage:(id)arg1;
- (BOOL)hasCommentStorageAtCellID:(struct TSUCellCoord)arg1;
- (BOOL)hasCommentAtCellID:(struct TSUCellCoord)arg1;
- (unsigned long long)numberOfComments;
- (int)cellValueTypeAtCellID:(struct TSUCellCoord)arg1;
- (id)formatAtCellID:(struct TSUCellCoord)arg1 formatIsImplicitOut:(char *)arg2;
- (int)applyCellMap:(id)arg1 ignoreFormulas:(BOOL)arg2 skipDirtyingNonFormulaCells:(BOOL)arg3 calculationEngine:(id)arg4;
- (int)applyCellMap:(id)arg1 calculationEngine:(id)arg2;
- (int)p_preflightApplyCellMap:(id)arg1;
- (struct TSCEFormula *)formulaAtCellID:(struct TSUCellCoord)arg1;
- (int)setCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 ignoreFormula:(BOOL)arg3 clearImportWarnings:(BOOL)arg4 calculationEngine:(id)arg5;
- (int)setCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 clearWarnings:(BOOL)arg3;
- (int)setCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (int)p_preflightSetCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (BOOL)hasFormulaAtCellID:(struct TSUCellCoord)arg1;
- (int)updateCalculationEngineForFormula:(struct TSCEFormula *)arg1 inCellID:(struct TSUCellCoord)arg2;
- (id)cellAtCellID:(struct TSUCellCoord)arg1;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 suppressCellBorder:(BOOL)arg3;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 suppressFormula:(BOOL)arg3 suppressCellBorder:(BOOL)arg4;
- (BOOL)cellExistsAtCellID:(struct TSUCellCoord)arg1;
- (unsigned long long)tableAreaForColumn:(unsigned char)arg1;
- (unsigned long long)tableAreaForRow:(unsigned short)arg1;
- (int)getDefaultCell:(out id)arg1 forCellID:(struct TSUCellCoord)arg2;
- (int)getDefaultCell:(id)arg1 forTableArea:(unsigned long long)arg2;
- (id)defaultCellForTableArea:(unsigned long long)arg1;
- (id)tableAreasForCellRange:(struct TSUCellRect)arg1;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellRect)cellRangeForTableArea:(unsigned long long)arg1;
- (id)unnamedTableString;
- (void)setStorageParentToInfo:(id)arg1;
@property(readonly, copy) NSString *description;
@property(nonatomic) BOOL wasCut; // @synthesize wasCut=_wasCut;
- (void)clearFromTableUID;
@property(readonly, retain, nonatomic) NSUUID *nsTableUID;
- (BOOL)hasFilterRulesWithTable:(id)arg1 inColumns:(id)arg2;
- (void)dirtyFilterState;
- (void)filterSetUpdated;
- (BOOL)hasActiveFilters;
- (void)setFilterSetType:(int)arg1;
- (void)enableFilterSet:(BOOL)arg1;
- (void)mutateFormulaFiltersWithTable:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)setNeedsFilterFormulaRewriteForImport:(BOOL)arg1;
- (BOOL)needsFilterFormulaRewriteForImport;
- (id)duplicateFilterSetInUidFormWithTable:(id)arg1;
- (id)duplicateFilterSet;
@property(copy, nonatomic) TSTTableFilterSet *filterSet; // @synthesize filterSet=_filterSet;
- (void)resetSortRuleReferenceTrackerForInsert;
@property(copy, nonatomic) TSTTableSortOrder *sortOrder; // @synthesize sortOrder=_sortOrder;
@property(readonly, retain, nonatomic) TSUPointerKeyDictionary *commentHostingMap; // @synthesize commentHostingMap=_commentHostingMap;
- (id)metadataForColumnIndex:(unsigned char)arg1;
- (id)metadataForRowIndex:(unsigned short)arg1;
@property(readonly, nonatomic) TSDStroke *tableNameBorderStroke;
@property(readonly, nonatomic) int tableWritingDirection;
@property(readonly, nonatomic) BOOL hasAlternatingRows;
@property(readonly, nonatomic) BOOL hasTableBorder;
@property(readonly, nonatomic) TSCEOwnerUidMapper *identityOwnerUIDMapper;
@property(readonly, nonatomic) TSCEOwnerUidMapper *ownerUIDMapper;
@property(retain, nonatomic) TSTColumnRowUIDMap *columnRowUIDMap; // @synthesize columnRowUIDMap=_columnRowUIDMap;
@property(retain, nonatomic) TSWPShapeStyle *tableNameShapeStyle; // @synthesize tableNameShapeStyle=_tableNameShapeStyle;
@property(retain, nonatomic) TSWPParagraphStyle *tableNameStyle; // @synthesize tableNameStyle=_tableNameStyle;
@property(retain, nonatomic) TSWPParagraphStyle *footerRowTextStyle; // @synthesize footerRowTextStyle=_footerRowTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *headerColumnTextStyle; // @synthesize headerColumnTextStyle=_headerColumnTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *headerRowTextStyle; // @synthesize headerRowTextStyle=_headerRowTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *bodyTextStyle; // @synthesize bodyTextStyle=_bodyTextStyle;
@property(retain, nonatomic) TSTCellStyle *footerRowCellStyle; // @synthesize footerRowCellStyle=_footerRowCellStyle;
@property(retain, nonatomic) TSTCellStyle *headerColumnCellStyle; // @synthesize headerColumnCellStyle=_headerColumnCellStyle;
@property(retain, nonatomic) TSTCellStyle *headerRowCellStyle; // @synthesize headerRowCellStyle=_headerRowCellStyle;
@property(retain, nonatomic) TSTCellStyle *bodyCellStyle; // @synthesize bodyCellStyle=_bodyCellStyle;
@property(retain, nonatomic) TSTTableStyle *tableStyle; // @synthesize tableStyle=_tableStyle;
@property(retain, nonatomic) TSTTableStylePreset *tableStylePreset; // @synthesize tableStylePreset=_tableStylePreset;
- (void)setNumberOfHeaderColumns:(unsigned short)arg1;
@property(readonly, nonatomic) unsigned short numberOfHeaderColumns;
- (void)setNumberOfFooterRows:(unsigned short)arg1;
@property(readonly, nonatomic) unsigned short numberOfFooterRows;
- (void)setNumberOfHeaderRows:(unsigned short)arg1;
@property(readonly, nonatomic) unsigned short numberOfHeaderRows;
@property(nonatomic) BOOL headerColumnsFrozen; // @synthesize headerColumnsFrozen=_headerColumnsFrozen;
@property(nonatomic) BOOL headerRowsFrozen; // @synthesize headerRowsFrozen=_headerRowsFrozen;
- (void)setNumberOfColumns:(unsigned short)arg1;
@property(readonly, nonatomic) unsigned short numberOfColumns;
- (void)setNumberOfRows:(unsigned short)arg1;
@property(readonly, nonatomic) unsigned short numberOfRows;
@property(nonatomic) BOOL styleApplyClearsAll; // @synthesize styleApplyClearsAll=_styleApplyClearsAll;
@property(nonatomic) BOOL repeatingHeaderColumnsEnabled; // @synthesize repeatingHeaderColumnsEnabled=_repeatingHeaderColumnsEnabled;
@property(nonatomic) BOOL repeatingHeaderRowsEnabled; // @synthesize repeatingHeaderRowsEnabled=_repeatingHeaderRowsEnabled;
@property(nonatomic) double tableNameHeight; // @synthesize tableNameHeight=_tableNameHeight;
@property(nonatomic) BOOL tableNameBorderEnabled; // @synthesize tableNameBorderEnabled=_tableNameBorderEnabled;
@property(nonatomic) BOOL tableNameEnabled; // @synthesize tableNameEnabled=_tableNameEnabled;
@property(retain, nonatomic) NSString *tableName; // @synthesize tableName=_tableName;
@property(readonly, nonatomic) UUIDData_5fbc143e conditionalStyleFormulaOwnerUID;
@property(nonatomic) BOOL presetNeedsStrongOwnership; // @synthesize presetNeedsStrongOwnership=_presetNeedsStrongOwnership;
- (void)saveToArchiver:(id)arg1;
- (void)loadFromUnarchiver:(id)arg1;
- (void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)arg1 tableInfo:(id)arg2;
- (void)p_upgradeDefaultCellStylesForStrokeSidecar;
- (void)dealloc;
- (id)initWithContext:(id)arg1 fromSourceModel:(id)arg2 region:(id)arg3 tableInfo:(id)arg4 waitForCalcEngine:(BOOL)arg5;
- (id)initWithContext:(id)arg1 rows:(unsigned short)arg2 columns:(unsigned short)arg3 styles:(id)arg4 stylePreset:(id)arg5 tableInfo:(id)arg6;
- (void)setupDefaultCells;
- (id)newCell;
- (void)resetStyles:(id)arg1;
- (void)p_clearDefaultStyles;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)arg1;
- (id)init;
- (void)populateGSSPTableModel:(id)arg1 withEncodeContext:(struct GSSPEncodeConversionContext *)arg2;
- (void)populateGSSPMessageInstance:(id)arg1 withContext:(struct GSSPEncodeConversionContext *)arg2;
- (id)newGsspMessageInstance;
- (id)gsspMessageInstance;
- (int)gsspSharingFlag;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

