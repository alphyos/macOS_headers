//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "KNOverlaySessionControllerDelegate-Protocol.h"
#import "KNPlaybackControllerDelegate-Protocol.h"
#import "KNRecordingSessionControllerDelegate-Protocol.h"
#import "KNShowcastPresentationControllerDelegate-Protocol.h"
#import "NSPopoverDelegate-Protocol.h"
#import "NSWindowDelegate-Protocol.h"
#import "TSDCanvasDelegate-Protocol.h"

@class KNDocumentRoot, KNMacAnimatedPlaybackViewController, KNMacOverlayView, KNMacPlaybackContainerViewController, KNMacPlaybackPresentationConfigurationEditor, KNMacPlaybackPresentationWindowManager, KNMacPlaybackScreenConfigurationController, KNMacPlaybackScreenConfigurationPickerViewController, KNMacPlaybackTouchBarController, KNMacPlaybackWindow, KNMacPresenterDisplayConfigurationSet, KNMacPresenterDisplayConfigurationSetController, KNMacPresenterDisplayTransientNameController, KNMacPresenterDisplayViewController, KNOverlaySessionController, KNPlaybackController, KNPresenterDisplayClockController, KNPresenterDisplayTimerController, KNRecordingPlaybackController, KNRecordingSessionController, KNShowcastPresentationController, KNSlideNode, NSAlert, NSArray, NSDate, NSError, NSPopover, NSSet, NSString, NSTimer, NSTouchBar, NSTrackingArea, NSUUID;
@protocol KNMacPlaybackSlideNavigatorContainer;

@interface KNMacPlaybackPresentationController : NSObject <KNPlaybackControllerDelegate, KNOverlaySessionControllerDelegate, KNRecordingSessionControllerDelegate, KNShowcastPresentationControllerDelegate, TSDCanvasDelegate, NSWindowDelegate, NSPopoverDelegate>
{
    KNDocumentRoot *mDocumentRoot;
    CDUnknownBlockType mCompletionHandler;
    KNMacAnimatedPlaybackViewController *mPlaybackViewController;
    KNShowcastPresentationController *mShowcastPresentationController;
    NSArray *mShowcastLoadingViewControllers;
    KNRecordingSessionController *mRecordingSessionController;
    KNMacPlaybackScreenConfigurationPickerViewController *mConfigurationPickerViewController;
    KNMacPlaybackScreenConfigurationController *mConfigurationController;
    NSSet *mResumeOnActivationWindows;
    KNPresenterDisplayClockController *mClockController;
    KNPresenterDisplayTimerController *mTimerController;
    NSDate *mTimerElapsedTimeStartDate;
    unsigned int mPreventUserIdleDisplaySleepAssertion;
    NSTrackingArea *mIdleTimerResetTrackingArea;
    NSTimer *mIdleTimer;
    id mIdleTimerResetEventMonitor;
    KNOverlaySessionController *mOverlaySessionController;
    KNMacOverlayView *mOverlayView;
    KNMacPlaybackTouchBarController *mTouchBarController;
    NSString *mPlaybackDeviceUsed;
    NSAlert *mPolarisAlert;
    NSPopover *mConfigurationPopover;
    BOOL mPlaybackHasEverUsedPolaris;
    BOOL mIsUpdatingPlaybackAndPresenterWindows;
    BOOL mIsAppBecomingActive;
    BOOL mNeedsUpdatePlaybackAndPresenterWindowsAfterResumePresentation;
    BOOL mDidPauseRecordingPlaybackOnSuspend;
    BOOL mIsStoppingPresentation;
    BOOL mIsStoppingPresentationForOtherMainWindow;
    BOOL mCurrentSlideHasChangedSinceShowStarted;
    BOOL mShowcastConnectionLost;
    BOOL mShowingModalPanel;
    BOOL mIsPlaybackPrepared;
    BOOL mDidSuspendCollaboration;
    BOOL mPlaybackShroudShown;
    BOOL mIsOnlyAllowingPresenterDisplayCustomization;
    BOOL mIsPresentationSuspended;
    BOOL mShowcastLoading;
    BOOL _p_applicationHidden;
    long long mPresentationType;
    KNPlaybackController *mPlaybackController;
    NSArray *mPresenterDisplayViewControllers;
    KNMacPresenterDisplayViewController *mPrimaryPresenterDisplayViewController;
    KNMacPlaybackContainerViewController *mPlaybackContainerViewController;
    KNRecordingPlaybackController *mRecordingPlaybackController;
    KNMacPlaybackPresentationWindowManager *mPlaybackWindowManager;
    KNMacPlaybackPresentationConfigurationEditor *mPlaybackConfigurationEditor;
    NSError *mShowcastLoadingError;
    NSUUID *mShowcastLoadingSlideNodeUUID;
    unsigned long long mShowcastLoadingEventIndex;
    KNMacPresenterDisplayConfigurationSet *mActiveConfigurationSet;
    KNMacPresenterDisplayConfigurationSetController *mConfigurationSetController;
    KNMacPresenterDisplayTransientNameController *mTransientNameWindowController;
}

+ (id)keyPathsForValuesAffectingSlideNavigatorContainer;
+ (id)keyPathsForValuesAffectingCanInteractivelyStopPresentation;
+ (id)keyPathsForValuesAffectingCanInteractivelyChangeSlides;
+ (id)keyPathsForValuesAffectingNavigationInteractive;
+ (unsigned long long)possiblePresenterDisplayCount;
+ (void)registerUserDefaults;
+ (void)initialize;
@property(nonatomic) BOOL p_applicationHidden; // @synthesize p_applicationHidden=_p_applicationHidden;
@property(retain, nonatomic) KNMacPresenterDisplayTransientNameController *transientNameWindowController; // @synthesize transientNameWindowController=mTransientNameWindowController;
@property(retain, nonatomic) KNMacPresenterDisplayConfigurationSetController *configurationSetController; // @synthesize configurationSetController=mConfigurationSetController;
@property(retain, nonatomic) KNMacPresenterDisplayConfigurationSet *activeConfigurationSet; // @synthesize activeConfigurationSet=mActiveConfigurationSet;
@property(nonatomic) unsigned long long p_showcastLoadingEventIndex; // @synthesize p_showcastLoadingEventIndex=mShowcastLoadingEventIndex;
@property(copy, nonatomic) NSUUID *p_showcastLoadingSlideNodeUUID; // @synthesize p_showcastLoadingSlideNodeUUID=mShowcastLoadingSlideNodeUUID;
@property(copy, nonatomic) NSError *p_showcastLoadingError; // @synthesize p_showcastLoadingError=mShowcastLoadingError;
@property(nonatomic) BOOL p_showcastLoading; // @synthesize p_showcastLoading=mShowcastLoading;
@property(retain, nonatomic) KNMacPlaybackPresentationWindowManager *p_playbackWindowManager; // @synthesize p_playbackWindowManager=mPlaybackWindowManager;
@property(readonly, nonatomic) KNRecordingPlaybackController *p_recordingPlaybackController; // @synthesize p_recordingPlaybackController=mRecordingPlaybackController;
@property(readonly, nonatomic, getter=p_isPresentationSuspended) BOOL p_presentationSuspended; // @synthesize p_presentationSuspended=mIsPresentationSuspended;
@property(retain, nonatomic) KNMacPlaybackContainerViewController *p_playbackContainerViewController; // @synthesize p_playbackContainerViewController=mPlaybackContainerViewController;
@property(readonly, nonatomic) NSDate *timerElapsedTimeStartDate; // @synthesize timerElapsedTimeStartDate=mTimerElapsedTimeStartDate;
@property(readonly, nonatomic) BOOL isOnlyAllowingPresenterDisplayCustomization; // @synthesize isOnlyAllowingPresenterDisplayCustomization=mIsOnlyAllowingPresenterDisplayCustomization;
@property(retain, nonatomic) KNMacPresenterDisplayViewController *primaryPresenterDisplayViewController; // @synthesize primaryPresenterDisplayViewController=mPrimaryPresenterDisplayViewController;
@property(copy, nonatomic) NSArray *presenterDisplayViewControllers; // @synthesize presenterDisplayViewControllers=mPresenterDisplayViewControllers;
@property(readonly, nonatomic) KNPlaybackController *playbackController; // @synthesize playbackController=mPlaybackController;
@property(readonly, nonatomic) long long presentationType; // @synthesize presentationType=mPresentationType;
@property(readonly, nonatomic) NSTouchBar *touchBar;
- (BOOL)playbackController:(id)arg1 canProcessHyperlinkURL:(id)arg2;
- (unsigned long long)p_showcastViewerCount;
- (BOOL)shouldPlaybackControllerEndShow:(id)arg1;
- (void)p_finishShowcastLoading;
- (void)showcastPresentationController:(id)arg1 didFailWithError:(id)arg2;
- (void)showcastPresentationControllerDidBecomeReadyToPlay:(id)arg1;
- (void)showcastPresentationControllerDidSynchronizeDocument:(id)arg1;
- (void)recordingSessionController:(id)arg1 recordingDidFailWithError:(id)arg2;
- (void)recordingSessionController:(id)arg1 shouldDeleteRecordingWithReplyHandler:(CDUnknownBlockType)arg2;
- (void)recordingSessionController:(id)arg1 shouldReplaceScopeOfRecording:(long long)arg2 replyHandler:(CDUnknownBlockType)arg3;
- (void)recordingSessionController:(id)arg1 shouldStartRecordingWithReplyHandler:(CDUnknownBlockType)arg2;
- (void)popoverDidClose:(id)arg1;
- (id)documentRoot;
- (void)overlaySessionControllerDidEndTelestrating:(id)arg1;
- (void)overlaySessionControllerDidBeginTelestrating:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)p_updatePresenterDisplayContentViewLockedStatus;
- (void)mouseMoved:(id)arg1;
- (void)mouseExited:(id)arg1;
- (void)mouseEntered:(id)arg1;
- (void)p_resetShowIfIdle:(id)arg1;
- (void)p_resetIdleTimer;
- (void)p_displaysDidChange;
- (void)p_mainWindowDidChange:(id)arg1;
- (void)p_windowDidBecomeMain:(id)arg1;
- (void)p_applicationDidHide:(id)arg1;
- (void)p_windowDidExitFullScreen:(id)arg1;
- (void)p_applicationDidBecomeActive:(id)arg1;
- (void)p_applicationWillBecomeActive:(id)arg1;
- (void)p_applicationDidResignActive:(id)arg1;
- (void)p_playbackControllerEventDidChange:(id)arg1;
- (id)p_presenterDisplayViewControllerForSelectionPath:(id)arg1 withFlags:(unsigned long long)arg2;
- (void)setSelectionPath:(id)arg1 withFlags:(unsigned long long)arg2;
- (BOOL)canSetSelectionPath:(id)arg1 withFlags:(unsigned long long)arg2;
- (id)p_presenterDisplayViewControllerForScrollingPresenterNotes;
- (void)scrollPresenterNotesPageDown:(id)arg1;
- (void)scrollPresenterNotesPageUp:(id)arg1;
- (void)toggleSlideNumberVisible:(id)arg1;
- (void)toggleShouldAlwaysShowCursor:(id)arg1;
- (void)toggleHelpWindowVisible:(id)arg1;
- (void)p_removeShowcastLoadingViewsAnimated:(BOOL)arg1;
- (void)p_updateShowcastLoadingViews;
- (void)p_addShowcastLoadingViewsIfNeeded;
- (void)endMetricsCustomization:(id)arg1;
- (void)cancelMetricsCustomization:(id)arg1;
- (void)enterMetricsCustomization:(id)arg1;
- (void)p_beginMetricsCustomizationForCustomizationOnlyMode;
- (void)p_beginMetricsCustomizationForPresenterDisplayConfigurationController:(id)arg1;
@property(readonly, nonatomic, getter=isConfiguringMetrics) BOOL configuringMetrics;
- (BOOL)p_currentSlideVisibleForScreenConfiguration:(id)arg1;
- (void)p_updateBaseAnimationLayerVisibileStatus:(BOOL)arg1;
- (void)p_updateWindowsToMatchScreenConfigurationFrom:(id)arg1 to:(id)arg2;
- (BOOL)p_isScreenConfigurationCustomizationViewCoveringPlaybackView;
- (void)p_endScreenConfiguration;
@property(readonly, nonatomic) KNMacPlaybackPresentationConfigurationEditor *p_playbackConfigurationEditor; // @synthesize p_playbackConfigurationEditor=mPlaybackConfigurationEditor;
- (void)p_setUpConfigurationPickerPopover;
- (void)customizeScreenConfigurationUsingFullscreenUI:(id)arg1;
- (BOOL)p_shouldShowSwapButton;
- (void)customizeScreenConfiguration:(id)arg1;
- (void)swapDisplays:(id)arg1;
@property(readonly, nonatomic) BOOL canSwapDisplays;
- (void)p_teardownTimerController;
- (void)resetPresenterDisplayTimer:(id)arg1;
- (void)p_startElapsedTimeIfNeeded;
- (void)p_updateTimerControllerTimebaseFromRecordingPlaybackControllerIfNeeded;
- (void)p_updateTimerControllerTimebaseFromRecordingSessionController;
- (void)p_updateTimerControllerTimebaseForElapsedTimeIfNeeded;
- (void)updateTimerControllerTimebase;
- (id)p_timerController;
- (void)p_teardownClockController;
- (id)p_clockController;
- (void)toggleSlideNavigatorVisible:(id)arg1;
@property(readonly, nonatomic) id <KNMacPlaybackSlideNavigatorContainer> slideNavigatorContainer;
- (void)resumeInteractiveNavigationIfPossible;
@property(readonly, nonatomic) BOOL canInteractivelyStopPresentation;
@property(readonly, nonatomic) BOOL canInteractivelyChangeSlides;
@property(readonly, nonatomic, getter=isNavigationInteractive) BOOL navigationInteractive;
- (BOOL)switchConfigurationForFunctionKey:(unsigned long long)arg1;
- (BOOL)p_shouldDisablePresenterDisplays;
- (void)p_updatePresenterDisplayControlsEnabled;
- (void)p_updateCursorVisibility;
- (void)p_updateKeyPlaybackWindow;
@property(readonly, nonatomic) KNMacPlaybackWindow *playbackWindow;
- (id)presenterDisplayViewControllerForScreen:(id)arg1;
- (id)presenterDisplayViewControllerForConfigurationController:(id)arg1;
- (void)p_removePresenterDisplayViewsFromWindows;
- (void)p_updatePresenterDisplayViewControllersForWindowControllers:(id)arg1;
- (void)p_removePlaybackViewFromWindowOrPresenterDisplay;
- (void)p_addPlaybackViewToPresenterDisplay:(id)arg1;
- (void)p_addPlaybackViewToWindow:(id)arg1;
@property(readonly, nonatomic) BOOL requiresShowcastConfirmationToExit;
@property(readonly, nonatomic) BOOL requiresPasswordToExit;
- (id)p_windowControllersForPresenterDisplays;
- (BOOL)p_isCurrentSlideVisibleOnPresenterDisplay;
- (void)p_updatePlaybackAndPresenterWindows;
- (void)p_resumePresentation;
- (void)p_suspendPresentation;
- (void)hide:(id)arg1;
@property(readonly, nonatomic) BOOL canHide;
- (void)orderPresentationFront;
- (void)removePlaybackShroudAndResume;
- (void)p_stopPreventingUserIdleDisplaySleep;
- (void)p_startPreventingUserIdleDisplaySleep;
- (void)p_hideApplicationIconBadge;
- (void)p_showApplicationIconBadge;
- (void)p_presentationDidEnd;
- (void)p_restoreDocumentWindowForEndingPresentation;
- (void)p_presentationWillEnd;
- (void)p_presentationDidStart;
- (void)p_playbackDidEnd;
- (void)p_startPreparedPlayback;
- (void)p_preparePlaybackAtSlideNode:(id)arg1 eventIndex:(unsigned long long)arg2;
- (void)stopPresentation;
- (void)startPresentationOverDocumentWindowController:(id)arg1 atSlideNode:(id)arg2 eventIndex:(unsigned long long)arg3 presentationType:(long long)arg4 customizePresenterDisplayOnly:(BOOL)arg5 completionHandler:(CDUnknownBlockType)arg6;
- (void)dealloc;
- (id)init;
- (id)initWithDocumentRoot:(id)arg1;
- (BOOL)p_isPlaybackWindowKey;
- (id)handleMoveSlideSwitcherBackwardScriptCommand:(id)arg1;
- (id)handleMoveSlideSwitcherForwardScriptCommand:(id)arg1;
- (id)handleAcceptSlideSwitcherScriptCommand:(id)arg1;
- (id)handleCancelSlideSwitcherScriptCommand:(id)arg1;
- (id)handleShowSlideSwitcherScriptCommand:(id)arg1;
- (void)gotoSlideNode:(id)arg1;
- (id)handlePreviousSlideScriptCommand:(id)arg1;
- (id)handleNextSlideScriptCommand:(id)arg1;
- (void)endShow;
@property(readonly, nonatomic) KNSlideNode *currentSlideNode;
@property(readonly, nonatomic, getter=isSlideNavigatorVisible) BOOL slideNavigatorVisible;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

