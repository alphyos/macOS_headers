//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <AppKit/NSView.h>

@class NSArray, NSLayoutConstraint, NSTimer, NSTrackingArea, TSKMacDividerView, TSUColor;
@protocol KNMacContentContainerSplitViewDelegate;

@interface KNMacContentContainerSplitView : NSView
{
    unsigned long long mAccessoryViewHiddenAnimationCount;
    TSKMacDividerView *mDividerView;
    NSArray *mConstraints;
    NSLayoutConstraint *mAccessoryViewSizeConstraint;
    NSLayoutConstraint *mAccessoryViewMinFixedEdgeConstraint;
    BOOL mIsInLayout;
    struct CGPoint mDividerDragStartLocation;
    double mDividerDragVisibleAccessoryViewSize;
    double mDividerDragVelocity;
    double mDividerDragPreviousOffset;
    double mDividerDragPreviousEventTimestamp;
    BOOL mIsDraggingDivider;
    BOOL mIsHidingAccessoryViewByDraggingDivider;
    NSTimer *mDividerSnapBackTimer;
    double mDividerSnapBackInitialDelta;
    double mDividerSnapBackStartTime;
    NSTrackingArea *mCursorTrackingArea;
    BOOL mIsAccessoryViewHidden;
    BOOL mCanHideAccessoryViewByDraggingDivider;
    double mTopContentInset;
    NSView *mMainView;
    NSView *mAccessoryView;
    double mMinMainViewSize;
    double mMinAccessoryViewSize;
    double mMaxAccessoryViewSize;
    double mUndersizedWindowFactor;
    double mSavedAccessoryViewSize;
    id <KNMacContentContainerSplitViewDelegate> mDelegate;
}

+ (BOOL)automaticallyNotifiesObserversOfAccessoryViewHidden;
+ (double)minimumDividerDragThickness;
+ (void)initialize;
@property(nonatomic) id <KNMacContentContainerSplitViewDelegate> delegate; // @synthesize delegate=mDelegate;
@property(readonly, nonatomic) double savedAccessoryViewSize; // @synthesize savedAccessoryViewSize=mSavedAccessoryViewSize;
@property(nonatomic) BOOL canHideAccessoryViewByDraggingDivider; // @synthesize canHideAccessoryViewByDraggingDivider=mCanHideAccessoryViewByDraggingDivider;
@property(nonatomic, getter=isAccessoryViewHidden) BOOL accessoryViewHidden; // @synthesize accessoryViewHidden=mIsAccessoryViewHidden;
@property(nonatomic) double undersizedWindowFactor; // @synthesize undersizedWindowFactor=mUndersizedWindowFactor;
@property(nonatomic) double maxAccessoryViewSize; // @synthesize maxAccessoryViewSize=mMaxAccessoryViewSize;
@property(nonatomic) double minAccessoryViewSize; // @synthesize minAccessoryViewSize=mMinAccessoryViewSize;
@property(nonatomic) double minMainViewSize; // @synthesize minMainViewSize=mMinMainViewSize;
@property(retain, nonatomic) NSView *accessoryView; // @synthesize accessoryView=mAccessoryView;
@property(retain, nonatomic) NSView *mainView; // @synthesize mainView=mMainView;
@property(nonatomic) double topContentInset; // @synthesize topContentInset=mTopContentInset;
- (void)p_stopDividerSnapBack;
- (void)p_updateDividerSnapBackAnimation:(id)arg1;
- (void)p_scheduleNextDividerSnapBackAnimationUpdate;
- (void)p_snapBackDividerToMinAccessoryViewSizeFromInitialVisibleAccessoryViewSize:(double)arg1;
- (void)p_updateCursorWithEvent:(id)arg1;
@property(readonly, nonatomic) struct CGRect p_dividerDragRect;
- (void)updateTrackingAreas;
- (void)cursorUpdate:(id)arg1;
- (void)mouseUp:(id)arg1;
- (void)p_updateDividerDragVisibleAccessoryViewSize;
- (void)mouseDragged:(id)arg1;
- (void)mouseDown:(id)arg1;
- (id)hitTest:(struct CGPoint)arg1;
- (void)layout;
- (void)updateConstraints;
- (void)restoreSavedAccessoryViewSize:(double)arg1;
@property(readonly, nonatomic) BOOL p_canDragDividerPastMinAccessoryViewSize;
@property(readonly, nonatomic) struct CGRect unhiddenAccessoryViewFrame;
@property(readonly, nonatomic) struct CGRect mainViewFrameForUnhiddenAccessoryView;
@property(readonly, nonatomic) double p_visibleAccessoryViewSize;
- (id)p_nextResponderForHiddenAccessoryView;
- (void)p_notifyDidHideAccessoryView;
- (void)p_notifyWillShowAccessoryView;
- (void)setAccessoryViewHidden:(BOOL)arg1 animated:(BOOL)arg2 notify:(BOOL)arg3;
- (void)setAccessoryViewHidden:(BOOL)arg1 animated:(BOOL)arg2;
- (struct CGSize)boundsSizeForMainViewSize:(struct CGSize)arg1;
- (double)p_adjustedMaxAccessoryViewSizeForUndersizedWindowFactor;
@property(readonly, nonatomic) double dividerThickness;
@property(copy, nonatomic) TSUColor *dividerColor;
@property(nonatomic, getter=isVertical) BOOL vertical;
- (void)dealloc;
- (void)p_commonInit;
- (id)initWithCoder:(id)arg1;
- (id)initWithFrame:(struct CGRect)arg1;

@end

