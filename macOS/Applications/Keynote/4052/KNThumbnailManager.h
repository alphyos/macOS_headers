//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "TSDThumbnailControllerDelegate-Protocol.h"
#import "TSDThumbnailProducer-Protocol.h"

@class KNDocumentRoot, NSArray, NSCondition, NSMutableDictionary, NSMutableSet, NSString, TSDThumbnailController, TSUPointerKeyDictionary;
@protocol KNVisibleSlideNodesProvider;

@interface KNThumbnailManager : NSObject <TSDThumbnailControllerDelegate, TSDThumbnailProducer>
{
    id <KNVisibleSlideNodesProvider> mVisibleSlideNodesProvider;
    BOOL mHasBeenTornDown;
    struct CGSize mSlideThumbnailSize;
    struct CGSize mMasterSlideThumbnailSize;
    TSDThumbnailController *mThumbnailController;
    KNDocumentRoot *mDocumentRoot;
    NSCondition *mCondition;
    NSMutableSet *mWaitedNodes;
    NSArray *mVisibleSlideNodes;
    NSMutableDictionary *mImageNamesInLocalStore;
    NSString *mPathnameForThumbnailDictionary;
    TSUPointerKeyDictionary *mReplacedBodyPlaceholdersForMasterSlideNodes;
    TSUPointerKeyDictionary *mReplacedTitlePlaceholdersForMasterSlideNodes;
}

@property(readonly, nonatomic) TSDThumbnailController *thumbnailController; // @synthesize thumbnailController=mThumbnailController;
@property(readonly, nonatomic) struct CGSize thumbnailSize; // @synthesize thumbnailSize=mSlideThumbnailSize;
@property(retain) NSArray *visibleSlideNodes; // @synthesize visibleSlideNodes=mVisibleSlideNodes;
@property(nonatomic) id <KNVisibleSlideNodesProvider> visibleSlideNodesProvider; // @synthesize visibleSlideNodesProvider=mVisibleSlideNodesProvider;
- (void)upgradeForUnity20IDChangeForSlideNodes:(id)arg1;
- (void)p_screensChanged:(id)arg1;
- (void)p_setThumbnailImageInLocalStore:(id)arg1 forSlideNode:(id)arg2;
- (id)p_thumbnailFileNameForSlideNode:(id)arg1 extension:(id)arg2;
- (id)p_getThumbnailFromLocalStoreForSlideNode:(id)arg1;
- (id)p_imageNamesInLocalStore;
- (void)p_updateVisibleSlideNodes;
- (void)documentCacheWasInvalidated;
- (void)didDownloadRemoteData:(id)arg1;
- (void)didDownloadDocumentResources:(id)arg1;
- (void)didDownloadDataWithDigestStrings:(id)arg1;
- (void)dirtySlideNodesForChanges:(id)arg1;
@property(nonatomic) double delayBeforeRedraw;
- (void)resumeThumbnailing;
- (void)suspendThumbnailing;
@property(nonatomic, getter=isEnabled) BOOL enabled;
- (void)waitUntilSlideNodesHaveThumbnails:(id)arg1;
- (void)thumbnail:(id)arg1 didChange:(id)arg2;
- (void)commitThumbnail:(id)arg1 identifier:(id)arg2 datasThatNeedDownload:(id)arg3;
- (BOOL)p_thumbnailCanBeJPEG:(id)arg1 slideNode:(id)arg2;
- (id)principalThumbnailIdentifiers;
- (void)configureImager:(id)arg1 forIdentifier:(id)arg2;
- (BOOL)shouldReuseBitmapContext;
- (BOOL)distortedToMatch;
- (BOOL)suppressOverlayLayerForIdentifier:(id)arg1;
- (struct CGRect)unscaledClipRectForIdentifier:(id)arg1;
- (struct CGSize)thumbnailSizeForIdentifierForDisplay:(id)arg1;
- (struct CGSize)thumbnailSizeForIdentifier:(id)arg1;
- (id)rootInfosForIdentifier:(id)arg1;
- (BOOL)p_isDocumentResourceLocatorForbidden:(id)arg1;
- (BOOL)p_slideNodeHasForbiddenAsset:(id)arg1;
- (void)dirtySlideNodesWithBadThumbnails;
- (void)noteSlideNodesWithBadThumbnails;
- (void)performBlockOnSlideNodesWithBadThumbnails:(CDUnknownBlockType)arg1;
- (void)redrawThumbnailImmediatelyForSlideNode:(id)arg1;
- (void)noteDirtySlideNode:(id)arg1;
- (void)p_noteDirtySlideNode:(id)arg1 withWriteLock:(BOOL)arg2;
- (id)thumbnailForSlideNode:(id)arg1 atSizeInPixels:(struct CGSize)arg2 waitIfNecessary:(BOOL)arg3;
- (id)thumbnailForSlideNode:(id)arg1;
- (id)p_thumbnailForSlideNodeWithoutSideEffects:(id)arg1 atSizeInPixels:(struct CGSize)arg2;
- (void)dealloc;
- (void)teardown;
- (void)loadedDocument;
- (void)p_setThumbnailSizesForShowSize:(struct CGSize)arg1;
- (struct CGSize)p_maxThumbnailSize;
- (double)p_thumbnailScale;
- (id)initWithDocumentRoot:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

