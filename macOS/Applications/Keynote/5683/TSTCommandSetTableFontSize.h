//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import "TSTTableCommand.h"

#import "GSSPAutoEncodable-Protocol.h"
#import "TSTCommandWrapping-Protocol.h"

@class TSTCellDiffMap;

@interface TSTCommandSetTableFontSize : TSTTableCommand <GSSPAutoEncodable, TSTCommandWrapping>
{
    TSTCellDiffMap *_cellDiffMap;
    BOOL _isIncrease;
    double _bodyFontSize;
    double _headerRowFontSize;
    double _headerColumnFontSize;
    double _footerRowFontSize;
    double _tableNameFontSize;
    BOOL _stylesContainerRefreshDone;
    int _fontSizeDiff;
    TSTCellDiffMap *_inverseCellDiffMap;
    double _inverseBodyFontSize;
    double _inverseHeaderRowFontSize;
    double _inverseHeaderColumnFontSize;
    double _inverseFooterRowFontSize;
    double _inverseTableNameFontSize;
}

@property(nonatomic) BOOL stylesContainerRefreshDone; // @synthesize stylesContainerRefreshDone=_stylesContainerRefreshDone;
@property(nonatomic) double inverseTableNameFontSize; // @synthesize inverseTableNameFontSize=_inverseTableNameFontSize;
@property(nonatomic) double inverseFooterRowFontSize; // @synthesize inverseFooterRowFontSize=_inverseFooterRowFontSize;
@property(nonatomic) double inverseHeaderColumnFontSize; // @synthesize inverseHeaderColumnFontSize=_inverseHeaderColumnFontSize;
@property(nonatomic) double inverseHeaderRowFontSize; // @synthesize inverseHeaderRowFontSize=_inverseHeaderRowFontSize;
@property(nonatomic) double inverseBodyFontSize; // @synthesize inverseBodyFontSize=_inverseBodyFontSize;
@property(retain, nonatomic) TSTCellDiffMap *inverseCellDiffMap; // @synthesize inverseCellDiffMap=_inverseCellDiffMap;
@property(nonatomic) double tableNameFontSize; // @synthesize tableNameFontSize=_tableNameFontSize;
@property(nonatomic) double footerRowFontSize; // @synthesize footerRowFontSize=_footerRowFontSize;
@property(nonatomic) double headerColumnFontSize; // @synthesize headerColumnFontSize=_headerColumnFontSize;
@property(nonatomic) double headerRowFontSize; // @synthesize headerRowFontSize=_headerRowFontSize;
@property(nonatomic) double bodyFontSize; // @synthesize bodyFontSize=_bodyFontSize;
@property(nonatomic) int fontSizeDiff; // @synthesize fontSizeDiff=_fontSizeDiff;
@property(retain, nonatomic) TSTCellDiffMap *cellDiffMap; // @synthesize cellDiffMap=_cellDiffMap;
@property(nonatomic) BOOL isIncrease; // @synthesize isIncrease=_isIncrease;
- (id)affectedArrayOfTableInfoForGSTCommandWrapper;
- (id)affectedArrayOfCellUIDListForGSTCommandWrapper;
- (void)saveToArchiver:(id)arg1;
- (void)loadFromUnarchiver:(id)arg1;
- (id)p_formatAndValueByFontSizeDiff:(int)arg1 toRichTextCell:(id)arg2;
- (void)p_changeFontSizeOfStorage:(id)arg1 byFontSizeDiff:(int)arg2;
- (void)p_changeFontSizeOfTableCellsByFontSizeDiff:(int)arg1;
- (void)p_changeFontSizeOfDefaultCellsToBodyFontSize:(double)arg1 headerRowFontSize:(double)arg2 headerColumnFontSize:(double)arg3 footerRowFontSize:(double)arg4 tableNameFontSize:(double)arg5;
- (double)p_updateStyleNetwork:(id)arg1 inTableArea:(unsigned long long)arg2 toFontSize:(double)arg3;
- (id)p_variantOfStyle:(id)arg1 settingFontSize:(double)arg2;
- (void)p_registerChanges;
- (id)makeInverse;
- (void)rollbackWork;
- (BOOL)isValidForCommit;
- (BOOL)supportsCollaboration;
- (void)redoWork;
- (void)undoWork;
- (void)commitWork;
- (id)actionString;
- (void)dealloc;
- (id)initWithTableInfo:(id)arg1 isIncrease:(BOOL)arg2 fontSizeDiff:(int)arg3 cellDiffMap:(id)arg4 bodyFontSize:(double)arg5 headerRowFontSize:(double)arg6 headerColumnFontSize:(double)arg7 footerRowFontSize:(double)arg8 tableNameFontSize:(double)arg9;
- (id)initWithTableInfo:(id)arg1 fontSizeDiff:(int)arg2;
- (void)populateGSSPCmdTableSetTableFontSize:(id)arg1 withEncodeContext:(struct GSSPEncodeConversionContext *)arg2;
- (void)populateGSSPMessageInstance:(id)arg1 withContext:(struct GSSPEncodeConversionContext *)arg2;
- (id)newGsspMessageInstance;
- (id)gsspMessageInstance;
- (int)gsspSharingFlag;
- (id)initWithGSSPMessage:(id)arg1 andContext:(struct GSSPDecodeConversionContext *)arg2;

@end

