//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AccountsSpotifyComRequestDelegate;

struct AppDelegateImpl {
    CDUnknownFunctionPointerType *_field1;
    struct scoped_connection _field2;
    struct vector<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool *_field6;
    struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> *_field7;
    struct BridgeDelegate *_field8;
};

struct AppKey {
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field1;
    basic_string_805fe43b _field2;
};

struct AppleSessionManager;

struct AppsHandler;

struct BridgeDelegate;

struct BridgeLogger;

struct BrowserAppReader;

struct BrowserClientMac {
    CDUnknownFunctionPointerType *_field1;
    CDUnknownFunctionPointerType *_field2;
    CDUnknownFunctionPointerType *_field3;
    CDUnknownFunctionPointerType *_field4;
    CDUnknownFunctionPointerType *_field5;
    CDUnknownFunctionPointerType *_field6;
    CDUnknownFunctionPointerType *_field7;
    struct scoped_refptr<spotify::desktop::TestBrowserDelegate> _field8;
    _Bool _field9;
    struct scoped_refptr<CefBrowser> _field10;
    struct scoped_refptr<CefDragHandler> _field11;
    struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> _field12;
    struct ProxyDef _field13;
    int _field14;
    _Bool _field15;
    _Bool _field16;
    basic_string_805fe43b _field17;
    struct PlayerState _field18;
    _Bool _field19;
    _Bool _field20;
    _Bool _field21;
    struct ViewOptions _field22;
    struct vector<scoped_refptr<spotify::desktop::ProcessMessageDelegate>, std::__1::allocator<scoped_refptr<spotify::desktop::ProcessMessageDelegate>>> _field23;
    struct scoped_refptr<spotify::desktop::AccountsSpotifyComRequestDelegate> _field24;
    struct vector<scoped_refptr<spotify::desktop::RequestDelegate>, std::__1::allocator<scoped_refptr<spotify::desktop::RequestDelegate>>> _field25;
    struct AppDelegateImpl _field26;
    _Bool _field27;
    basic_string_805fe43b _field28;
    struct PendingRequest _field29;
    _Bool _field30;
    struct ClientUpdateInfo _field31;
    struct shared_ptr<spotify::desktop::BrowserAppReader> _field32;
    struct shared_ptr<spotify::desktop::BrowserFileDownloader> _field33;
    struct shared_ptr<spotify::desktop::WidevineInstaller> _field34;
    struct shared_ptr<spotify::desktop::ClientUpdateHandler> _field35;
    struct shared_ptr<spotify::desktop::apps::AppsHandler> _field36;
    struct unordered_map<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>>> _field37;
    struct scoped_connection _field38;
    struct scoped_connection _field39;
    struct scoped_connection _field40;
    struct scoped_connection _field41;
    struct scoped_connection _field42;
    struct scoped_connection _field43;
    struct function<void ()> _field44;
    _Bool _field45;
    _Bool _field46;
    _Bool _field47;
    struct CefRefCount _field48;
    struct Lock _field49;
    struct NotificationBroadcaster _field50;
    vector_89351b1b _field51;
    struct PlayerState _field52;
    struct mutex _field53;
    id _field54;
};

struct BrowserFileDownloader;

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct CacheInfo {
    basic_string_805fe43b _field1;
    basic_string_805fe43b _field2;
    basic_string_805fe43b _field3;
    _Bool _field4;
};

struct CacheMigrator {
    struct vector<spotify::desktop::CacheMigrator::Step, std::__1::allocator<spotify::desktop::CacheMigrator::Step>> _field1;
    struct scoped_thread<boost::join_if_joinable, boost::thread> _field2;
    struct atomic<bool> _field3;
};

struct CefBrowser;

struct CefDragHandler;

struct CefDraggableRegion;

struct CefRefCount {
    int _field1;
};

struct ClientUpdateHandler;

struct ClientUpdateInfo {
    struct vector<unsigned char, std::__1::allocator<unsigned char>> _field1;
    _Bool _field2;
    int _field3;
    basic_string_805fe43b _field4;
    basic_string_805fe43b _field5;
};

struct ClientVersionInfo {
    unsigned int _field1;
    basic_string_805fe43b _field2;
    basic_string_805fe43b _field3;
    basic_string_805fe43b _field4;
};

struct CollectionFollowedArtistsHelper;

struct Core {
    CDUnknownFunctionPointerType *_field1;
};

struct CoreCreateOptions {
    struct CacheInfo _field1;
    struct DeviceInfo _field2;
    struct ClientVersionInfo _field3;
    struct AppKey _field4;
    int _field5;
    struct NetworkInfo _field6;
    basic_string_805fe43b _field7;
    basic_string_805fe43b _field8;
    basic_string_805fe43b _field9;
    struct function<void (const std::__1::basic_string<char>&)> _field10;
    _Bool _field11;
};

struct CoreHandler {
    CDUnknownFunctionPointerType *_field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    struct signal<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::function<void (const boost::signals2::connection &, std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::signals2::mutex> _field7;
    struct signal<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex> _field8;
    struct signal<void (const spotify::spos::SposDict &), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::spos::SposDict &)>, boost::function<void (const boost::signals2::connection &, const spotify::spos::SposDict &)>, boost::signals2::mutex> _field9;
    basic_string_805fe43b _field10;
    struct SposDict _field11;
    basic_string_805fe43b _field12;
    basic_string_805fe43b _field13;
    basic_string_805fe43b _field14;
    basic_string_805fe43b _field15;
    _Bool _field16;
    struct function<void (spotify::client::Core *)> _field17;
    struct unique_ptr<spotify::desktop::audio::DriverManager, std::__1::default_delete<spotify::desktop::audio::DriverManager>> _field18;
    struct unique_ptr<spotify::desktop::CollectionFollowedArtistsHelper, std::__1::default_delete<spotify::desktop::CollectionFollowedArtistsHelper>> _field19;
    struct shared_ptr<void> _field20;
    struct CoreCreateOptions _field21;
    struct shared_ptr<spotify::core::experimental::session::SessionFactory> _field22;
    shared_ptr_598bf325 _field23;
    struct unique_ptr<spotify::desktop::CoreSessionState, std::__1::default_delete<spotify::desktop::CoreSessionState>> _field24;
    struct unique_ptr<spotify::desktop::SessionStatePersister, std::__1::default_delete<spotify::desktop::SessionStatePersister>> _field25;
    struct function<std::__1::shared_ptr<void>(const spotify::cosmos::Request &, const std::__1::function<void (spotify::cosmos::Response)>&)> _field26;
    struct function<std::__1::shared_ptr<void>(const spotify::cosmos::Request &, const std::__1::function<void (spotify::cosmos::Response)>&)> _field27;
    struct unique_ptr<spotify::desktop::MicroCosmosResolvers, std::__1::default_delete<spotify::desktop::MicroCosmosResolvers>> _field28;
    struct unique_ptr<spotify::desktop::voice::VoiceController, std::__1::default_delete<spotify::desktop::voice::VoiceController>> _field29;
    struct unique_ptr<sp::BridgeLogger, std::__1::default_delete<sp::BridgeLogger>> _field30;
    struct unique_ptr<spotify::desktop::NetworkNotifier, std::__1::default_delete<spotify::desktop::NetworkNotifier>> _field31;
    struct scoped_connection _field32;
    struct unique_ptr<spotify::desktop::CoreRemoteControllerFactory, std::__1::default_delete<spotify::desktop::CoreRemoteControllerFactory>> _field33;
    struct unique_ptr<sp::ServiceInfoControllerFactory, std::__1::default_delete<sp::ServiceInfoControllerFactory>> _field34;
    struct unique_ptr<sp::CsrfControllerFactory, std::__1::default_delete<sp::CsrfControllerFactory>> _field35;
    struct shared_ptr<spotify::facebook::FacebookSSO> _field36;
    struct unique_ptr<spotify::desktop::FacebookWebLoginHandler, std::__1::default_delete<spotify::desktop::FacebookWebLoginHandler>> _field37;
    struct unique_ptr<spotify::desktop::BridgeDelegate, std::__1::default_delete<spotify::desktop::BridgeDelegate>> _field38;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field39;
    struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> _field40;
    struct map<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>>> _field41;
    struct optional<spotify::accesspoint::SerializableCredentials> _field42;
    struct io_service _field43;
    struct unique_ptr<boost::asio::io_service::work, std::__1::default_delete<boost::asio::io_service::work>> _field44;
    struct IoServiceScheduler _field45;
    struct scoped_thread<boost::join_if_joinable, boost::thread> _field46;
    struct scoped_connection _field47;
    struct scoped_connection _field48;
    struct scoped_connection _field49;
    struct scoped_connection _field50;
    struct scoped_connection _field51;
    struct scoped_connection _field52;
    struct scoped_connection _field53;
    struct scoped_connection _field54;
    struct scoped_connection _field55;
    struct scoped_connection _field56;
    struct scoped_connection _field57;
    struct scoped_connection _field58;
    struct scoped_connection _field59;
    struct scoped_connection _field60;
    struct scoped_connection _field61;
    struct scoped_connection _field62;
    struct scoped_connection _field63;
    struct shared_ptr<void> _field64;
    struct LoginManager _field65;
    struct mutex _field66;
    struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> _field67;
    struct mutex _field68;
    struct unique_ptr<spotify::abba::FeatureFlags, std::__1::default_delete<spotify::abba::FeatureFlags>> _field69;
    struct mutex _field70;
    struct unique_ptr<spotify::desktop::WebHelperManager, std::__1::default_delete<spotify::desktop::WebHelperManager>> _field71;
};

struct CoreRemoteControllerFactory;

struct CoreSessionState;

struct CsrfControllerFactory;

struct Data;

struct DeviceInfo {
    basic_string_805fe43b _field1;
    basic_string_805fe43b _field2;
    basic_string_805fe43b _field3;
};

struct DriverManager;

struct FacebookSSO;

struct FacebookWebLoginHandler;

struct FeatureFlags;

struct Impl;

struct InternalLoadMeasurementManager;

struct InternalSystemLoadMeasurerMac {
    id _field1;
    struct function<void (spotify::desktop::EventType, bool)> _field2;
};

struct IoServiceScheduler {
    CDUnknownFunctionPointerType *_field1;
    struct unique_ptr<spotify::async::IoServiceScheduler::Impl, std::__1::default_delete<spotify::async::IoServiceScheduler::Impl>> _field2;
};

struct Lock {
    struct LockImpl _field1;
};

struct LockImpl {
    struct _opaque_pthread_mutex_t _field1;
};

struct LoginCredentials {
    struct shared_ptr<spotify::accesspoint::LoginCredentials::Impl> _field1;
};

struct LoginManager {
    struct LoginCredentials _field1;
    basic_string_805fe43b _field2;
    struct optional<std::__1::pair<std::__1::basic_string<char>, std::__1::basic_string<char>>> _field3;
};

struct MdnsManagerInterface {
    CDUnknownFunctionPointerType *_field1;
};

struct MicroCosmosResolvers;

struct NetworkInfo {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
};

struct NetworkNotifier;

struct NotificationBroadcaster {
    struct SpotifyLink _field1;
    _Bool _field2;
};

struct ObjectStorage<std::__1::basic_string<char>> {
    unsigned char _field1[24];
};

struct ObjectStorage<std::__1::vector<spotify::spos::SposDictEntry, std::__1::allocator<spotify::spos::SposDictEntry>>> {
    unsigned char _field1[24];
};

struct ObjectStorage<std::__1::vector<spotify::spos::SposNode, std::__1::allocator<spotify::spos::SposNode>>> {
    unsigned char _field1[24];
};

struct OsxNetworkNotifier {
    CDUnknownFunctionPointerType *_field1;
    struct signal<void (spotify::network::ConnectionType), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::network::ConnectionType)>, boost::function<void (const boost::signals2::connection &, spotify::network::ConnectionType)>, boost::signals2::mutex> _field2;
    struct unique_ptr<spotify::desktop::OsxNetworkNotifier::Data, std::__1::default_delete<spotify::desktop::OsxNetworkNotifier::Data>> _field3;
};

struct PendingRequest {
    basic_string_805fe43b _field1;
    long long _field2;
    basic_string_805fe43b _field3;
};

struct PlayerState {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
    _Bool _field4;
    _Bool _field5;
    _Bool _field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    shared_ptr_8b48272b _field13;
    int _field14;
};

struct ProxyDef {
    int _field1;
    unsigned int _field2;
    basic_string_805fe43b _field3;
    basic_string_805fe43b _field4;
    basic_string_805fe43b _field5;
};

struct RuntimeUsageInfo;

struct ServiceInfoControllerFactory;

struct Session;

struct SessionFactory;

struct SessionStatePersister;

struct SposDict {
    union {
        unsigned char _field1;
        struct {
            unsigned char _field1;
            long long _field2;
        } _field2;
        struct {
            unsigned char _field1;
            double _field2;
        } _field3;
        struct {
            unsigned char _field1;
            struct ObjectStorage<std::__1::basic_string<char>> _field2;
        } _field4;
        struct {
            int _field1;
            struct ObjectStorage<std::__1::vector<spotify::spos::SposNode, std::__1::allocator<spotify::spos::SposNode>>> _field2;
        } _field5;
        struct {
            int _field1;
            struct ObjectStorage<std::__1::vector<spotify::spos::SposDictEntry, std::__1::allocator<spotify::spos::SposDictEntry>>> _field2;
        } _field6;
        struct {
            unsigned char _field1;
            char _field2[15];
        } _field7;
    } _field1;
};

struct SpotifyLink {
    int _field1;
    basic_string_805fe43b _field2;
    struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> _field3;
    unsigned int _field4;
    unsigned int _field5;
    int _field6;
    int _field7;
    union {
        struct gid<16, spotify::uri::detail::AlbumIdTag> _field1;
        struct gid<16, spotify::uri::detail::ArtistIdTag> _field2;
        struct gid<16, spotify::uri::detail::TrackIdTag> _field3;
        struct gid<16, spotify::uri::detail::PlaylistIdTag> _field4;
        int _field5;
        struct gid<16, spotify::uri::detail::AdIdTag> _field6;
        unsigned int _field7;
        unsigned long long _field8;
        basic_string_805fe43b *_field9;
        int _field10;
        struct gid<20, spotify::uri::detail::ImageIdTag> _field11;
        struct vector<spotify::uri::SpotifyLink, std::__1::allocator<spotify::uri::SpotifyLink>> *_field12;
        struct gid<16, spotify::uri::detail::ShowIdTag> _field13;
        struct gid<16, spotify::uri::detail::EpisodeIdTag> _field14;
        struct gid<16, spotify::uri::detail::DailyMixIdTag> _field15;
        struct gid<16, spotify::uri::detail::LicensorIdTag> _field16;
        int _field17;
        struct {
            struct vector<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>, std::__1::allocator<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>>> *_field1;
            int _field2;
        } _field18;
        struct {
            struct gid<20, spotify::uri::detail::FileIdTag> _field1;
            int _field2;
        } _field19;
        struct {
            int _field1;
            unsigned int _field2;
        } _field20;
        int _field21;
        int _field22;
    } _field8;
};

struct Step;

struct SystemLoadMeasurer;

struct TestBrowserDelegate;

struct TrackMetadata;

struct ViewOptions {
    _Bool _field1;
    _Bool _field2;
    _Bool _field3;
};

struct VoiceController;

struct WebHelperManager;

struct WidevineInstaller;

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*> *_field1;
};

struct __shared_weak_count;

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *_field1;
};

struct _opaque_pthread_mutex_t {
    long long _field1;
    char _field2[56];
};

struct a8;

struct aligned {
    unsigned char _field1;
};

struct aligned_storage<spotify::accesspoint::SerializableCredentials> {
    union dummy_u _field1;
};

struct aligned_storage<std::__1::pair<std::__1::basic_string<char>, std::__1::basic_string<char>>> {
    union dummy_u _field1;
};

struct atomic<bool> {
    struct aligned _field1;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
};

struct connection_body_base;

struct duration<long long, std::__1::ratio<1, 1000000>> {
    long long _field1;
};

struct function<std::__1::shared_ptr<void>(const spotify::cosmos::Request &, const std::__1::function<void (spotify::cosmos::Response)>&)> {
    struct type _field1;
    struct __base<std::__1::shared_ptr<void>(const spotify::cosmos::Request &, const std::__1::function<void (spotify::cosmos::Response)>&)> *_field2;
};

struct function<void ()> {
    struct type _field1;
    struct __base<void ()> *_field2;
};

struct function<void (const std::__1::basic_string<char>&)> {
    struct type _field1;
    struct __base<void (const std::__1::basic_string<char>&)> *_field2;
};

struct function<void (spotify::client::Core *)> {
    struct type _field1;
    struct __base<void (spotify::client::Core *)> *_field2;
};

struct function<void (spotify::desktop::EventType, bool)> {
    struct type _field1;
    struct __base<void (spotify::desktop::EventType, bool)> *_field2;
};

struct gid<16, spotify::uri::detail::AdIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::AlbumIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::ArtistIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::DailyMixIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::EpisodeIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::LicensorIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::PlaylistIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::ShowIdTag> {
    unsigned char _field1[16];
};

struct gid<16, spotify::uri::detail::TrackIdTag> {
    unsigned char _field1[16];
};

struct gid<20, spotify::uri::detail::FileIdTag> {
    unsigned char _field1[20];
};

struct gid<20, spotify::uri::detail::ImageIdTag> {
    unsigned char _field1[20];
};

struct in_addr {
    unsigned int _field1;
};

struct io_service {
    struct service_registry *_field1;
    struct task_io_service *_field2;
};

struct map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>>;

struct map<std::__1::basic_string<char>, bool, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, bool>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, bool>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, bool>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, bool>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, boost::optional<std::__1::basic_string<char>>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
    struct __tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>>> {
        struct __tree_end_node<std::__1::__tree_node_base<void *>*> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char>>, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct mutex {
    struct _opaque_pthread_mutex_t _field1;
};

struct optional<spotify::accesspoint::SerializableCredentials> {
    _Bool _field1;
    struct aligned_storage<spotify::accesspoint::SerializableCredentials> _field2;
};

struct optional<std::__1::pair<std::__1::basic_string<char>, std::__1::basic_string<char>>> {
    _Bool _field1;
    struct aligned_storage<std::__1::pair<std::__1::basic_string<char>, std::__1::basic_string<char>>> _field2;
};

struct scoped_connection {
    struct weak_ptr<boost::signals2::detail::connection_body_base> _weak_connection_body;
};

struct scoped_refptr<CefBrowser> {
    struct CefBrowser *_field1;
};

struct scoped_refptr<CefDragHandler> {
    struct CefDragHandler *_field1;
};

struct scoped_refptr<spotify::desktop::AccountsSpotifyComRequestDelegate> {
    struct AccountsSpotifyComRequestDelegate *_field1;
};

struct scoped_refptr<spotify::desktop::ProcessMessageDelegate>;

struct scoped_refptr<spotify::desktop::RequestDelegate>;

struct scoped_refptr<spotify::desktop::TestBrowserDelegate> {
    struct TestBrowserDelegate *_field1;
};

struct scoped_thread<boost::join_if_joinable, boost::thread> {
    struct thread _field1;
};

struct service_registry;

struct shared_count {
    struct sp_counted_base *_field1;
};

struct shared_ptr<boost::detail::thread_data_base> {
    struct thread_data_base *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex>> {
    struct signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (const spotify::spos::SposDict &), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::spos::SposDict &)>, boost::function<void (const boost::signals2::connection &, const spotify::spos::SposDict &)>, boost::signals2::mutex>> {
    struct signal_impl<void (const spotify::spos::SposDict &), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::spos::SposDict &)>, boost::function<void (const boost::signals2::connection &, const spotify::spos::SposDict &)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (spotify::network::ConnectionType), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::network::ConnectionType)>, boost::function<void (const boost::signals2::connection &, spotify::network::ConnectionType)>, boost::signals2::mutex>> {
    struct signal_impl<void (spotify::network::ConnectionType), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::network::ConnectionType)>, boost::function<void (const boost::signals2::connection &, spotify::network::ConnectionType)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<boost::signals2::detail::signal_impl<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::function<void (const boost::signals2::connection &, std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::signals2::mutex>> {
    struct signal_impl<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::function<void (const boost::signals2::connection &, std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::signals2::mutex> *_field1;
    struct shared_count _field2;
};

struct shared_ptr<const spotify::desktop::TrackMetadata> {
    struct TrackMetadata *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::accesspoint::LoginCredentials::Impl> {
    struct Impl *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::core::experimental::session::Session> {
    struct Session *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::core::experimental::session::SessionFactory> {
    struct SessionFactory *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::BrowserAppReader> {
    struct BrowserAppReader *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::BrowserFileDownloader> {
    struct BrowserFileDownloader *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::ClientUpdateHandler> {
    struct ClientUpdateHandler *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::InternalLoadMeasurementManager> {
    struct InternalLoadMeasurementManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::desktop::RuntimeUsageInfo> {
    struct RuntimeUsageInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::desktop::SystemLoadMeasurer> {
    struct SystemLoadMeasurer *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<spotify::desktop::WidevineInstaller> {
    struct WidevineInstaller *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::desktop::apps::AppsHandler> {
    struct AppsHandler *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::facebook::FacebookSSO> {
    struct FacebookSSO *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<spotify::http::AppleSessionManager> {
    struct AppleSessionManager *_field1;
    struct __shared_weak_count *_field2;
};

struct shared_ptr<std::__1::map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>>> {
    struct map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct shared_ptr<void> {
    void *_field1;
    struct __shared_weak_count *_field2;
};

struct signal<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex>> _field2;
};

struct signal<void (const spotify::spos::SposDict &), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::spos::SposDict &)>, boost::function<void (const boost::signals2::connection &, const spotify::spos::SposDict &)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (const spotify::spos::SposDict &), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::spos::SposDict &)>, boost::function<void (const boost::signals2::connection &, const spotify::spos::SposDict &)>, boost::signals2::mutex>> _field2;
};

struct signal<void (spotify::network::ConnectionType), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::network::ConnectionType)>, boost::function<void (const boost::signals2::connection &, spotify::network::ConnectionType)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (spotify::network::ConnectionType), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::network::ConnectionType)>, boost::function<void (const boost::signals2::connection &, spotify::network::ConnectionType)>, boost::signals2::mutex>> _field2;
};

struct signal<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::function<void (const boost::signals2::connection &, std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::signals2::mutex> {
    CDUnknownFunctionPointerType *_field1;
    struct shared_ptr<boost::signals2::detail::signal_impl<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::function<void (const boost::signals2::connection &, std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::signals2::mutex>> _field2;
};

struct signal_impl<void (), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void ()>, boost::function<void (const boost::signals2::connection &)>, boost::signals2::mutex>;

struct signal_impl<void (const spotify::spos::SposDict &), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (const spotify::spos::SposDict &)>, boost::function<void (const boost::signals2::connection &, const spotify::spos::SposDict &)>, boost::signals2::mutex>;

struct signal_impl<void (spotify::network::ConnectionType), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (spotify::network::ConnectionType)>, boost::function<void (const boost::signals2::connection &, spotify::network::ConnectionType)>, boost::signals2::mutex>;

struct signal_impl<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool), boost::signals2::optional_last_value<void>, int, std::__1::less<int>, boost::function<void (std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::function<void (const boost::signals2::connection &, std::__1::shared_ptr<spotify::core::experimental::session::Session>, spotify::hermes::HermesHandler *, const boost::system::error_code &, bool)>, boost::signals2::mutex>;

struct sockaddr_in {
    unsigned char _field1;
    unsigned char _field2;
    unsigned short _field3;
    struct in_addr _field4;
    char _field5[8];
};

struct sp_counted_base;

struct task_io_service;

struct thread {
    struct shared_ptr<boost::detail::thread_data_base> _field1;
};

struct thread_data_base;

struct time_point<std::__1::chrono::system_clock, std::__1::chrono::duration<long long, std::__1::ratio<1, 1000000>>> {
    struct duration<long long, std::__1::ratio<1, 1000000>> _field1;
};

struct type {
    unsigned char _field1[24];
};

struct unique_ptr<boost::asio::io_service::work, std::__1::default_delete<boost::asio::io_service::work>> {
    struct __compressed_pair<boost::asio::io_service::work *, std::__1::default_delete<boost::asio::io_service::work>> {
        struct work *_field1;
    } _field1;
};

struct unique_ptr<sp::BridgeLogger, std::__1::default_delete<sp::BridgeLogger>> {
    struct __compressed_pair<sp::BridgeLogger *, std::__1::default_delete<sp::BridgeLogger>> {
        struct BridgeLogger *_field1;
    } _field1;
};

struct unique_ptr<sp::CsrfControllerFactory, std::__1::default_delete<sp::CsrfControllerFactory>> {
    struct __compressed_pair<sp::CsrfControllerFactory *, std::__1::default_delete<sp::CsrfControllerFactory>> {
        struct CsrfControllerFactory *_field1;
    } _field1;
};

struct unique_ptr<sp::ServiceInfoControllerFactory, std::__1::default_delete<sp::ServiceInfoControllerFactory>> {
    struct __compressed_pair<sp::ServiceInfoControllerFactory *, std::__1::default_delete<sp::ServiceInfoControllerFactory>> {
        struct ServiceInfoControllerFactory *_field1;
    } _field1;
};

struct unique_ptr<spotify::abba::FeatureFlags, std::__1::default_delete<spotify::abba::FeatureFlags>> {
    struct __compressed_pair<spotify::abba::FeatureFlags *, std::__1::default_delete<spotify::abba::FeatureFlags>> {
        struct FeatureFlags *_field1;
    } _field1;
};

struct unique_ptr<spotify::async::IoServiceScheduler::Impl, std::__1::default_delete<spotify::async::IoServiceScheduler::Impl>> {
    struct __compressed_pair<spotify::async::IoServiceScheduler::Impl *, std::__1::default_delete<spotify::async::IoServiceScheduler::Impl>> {
        struct Impl *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::BridgeDelegate, std::__1::default_delete<spotify::desktop::BridgeDelegate>> {
    struct __compressed_pair<spotify::desktop::BridgeDelegate *, std::__1::default_delete<spotify::desktop::BridgeDelegate>> {
        struct BridgeDelegate *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::CollectionFollowedArtistsHelper, std::__1::default_delete<spotify::desktop::CollectionFollowedArtistsHelper>> {
    struct __compressed_pair<spotify::desktop::CollectionFollowedArtistsHelper *, std::__1::default_delete<spotify::desktop::CollectionFollowedArtistsHelper>> {
        struct CollectionFollowedArtistsHelper *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::CoreRemoteControllerFactory, std::__1::default_delete<spotify::desktop::CoreRemoteControllerFactory>> {
    struct __compressed_pair<spotify::desktop::CoreRemoteControllerFactory *, std::__1::default_delete<spotify::desktop::CoreRemoteControllerFactory>> {
        struct CoreRemoteControllerFactory *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::CoreSessionState, std::__1::default_delete<spotify::desktop::CoreSessionState>> {
    struct __compressed_pair<spotify::desktop::CoreSessionState *, std::__1::default_delete<spotify::desktop::CoreSessionState>> {
        struct CoreSessionState *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::FacebookWebLoginHandler, std::__1::default_delete<spotify::desktop::FacebookWebLoginHandler>> {
    struct __compressed_pair<spotify::desktop::FacebookWebLoginHandler *, std::__1::default_delete<spotify::desktop::FacebookWebLoginHandler>> {
        struct FacebookWebLoginHandler *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::MicroCosmosResolvers, std::__1::default_delete<spotify::desktop::MicroCosmosResolvers>> {
    struct __compressed_pair<spotify::desktop::MicroCosmosResolvers *, std::__1::default_delete<spotify::desktop::MicroCosmosResolvers>> {
        struct MicroCosmosResolvers *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::NetworkNotifier, std::__1::default_delete<spotify::desktop::NetworkNotifier>> {
    struct __compressed_pair<spotify::desktop::NetworkNotifier *, std::__1::default_delete<spotify::desktop::NetworkNotifier>> {
        struct NetworkNotifier *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::OsxNetworkNotifier::Data, std::__1::default_delete<spotify::desktop::OsxNetworkNotifier::Data>> {
    struct __compressed_pair<spotify::desktop::OsxNetworkNotifier::Data *, std::__1::default_delete<spotify::desktop::OsxNetworkNotifier::Data>> {
        struct Data *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::SessionStatePersister, std::__1::default_delete<spotify::desktop::SessionStatePersister>> {
    struct __compressed_pair<spotify::desktop::SessionStatePersister *, std::__1::default_delete<spotify::desktop::SessionStatePersister>> {
        struct SessionStatePersister *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::WebHelperManager, std::__1::default_delete<spotify::desktop::WebHelperManager>> {
    struct __compressed_pair<spotify::desktop::WebHelperManager *, std::__1::default_delete<spotify::desktop::WebHelperManager>> {
        struct WebHelperManager *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::audio::DriverManager, std::__1::default_delete<spotify::desktop::audio::DriverManager>> {
    struct __compressed_pair<spotify::desktop::audio::DriverManager *, std::__1::default_delete<spotify::desktop::audio::DriverManager>> {
        struct DriverManager *_field1;
    } _field1;
};

struct unique_ptr<spotify::desktop::voice::VoiceController, std::__1::default_delete<spotify::desktop::voice::VoiceController>> {
    struct __compressed_pair<spotify::desktop::voice::VoiceController *, std::__1::default_delete<spotify::desktop::voice::VoiceController>> {
        struct VoiceController *_field1;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unordered_map<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats, std::__1::hash<std::__1::basic_string<char>>, std::__1::equal_to<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>>> {
    struct __hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, std::__1::hash<std::__1::basic_string<char>>, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, std::__1::equal_to<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, std::__1::hash<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, spotify::desktop::BrowserClient::AppCrashStats>, std::__1::equal_to<std::__1::basic_string<char>>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct vector<CefDraggableRegion, std::__1::allocator<CefDraggableRegion>> {
    struct CefDraggableRegion *__begin_;
    struct CefDraggableRegion *__end_;
    struct __compressed_pair<CefDraggableRegion *, std::__1::allocator<CefDraggableRegion>> {
        struct CefDraggableRegion *__first_;
    } __end_cap_;
};

struct vector<scoped_refptr<spotify::desktop::ProcessMessageDelegate>, std::__1::allocator<scoped_refptr<spotify::desktop::ProcessMessageDelegate>>> {
    struct scoped_refptr<spotify::desktop::ProcessMessageDelegate> *_field1;
    struct scoped_refptr<spotify::desktop::ProcessMessageDelegate> *_field2;
    struct __compressed_pair<scoped_refptr<spotify::desktop::ProcessMessageDelegate>*, std::__1::allocator<scoped_refptr<spotify::desktop::ProcessMessageDelegate>>> {
        struct scoped_refptr<spotify::desktop::ProcessMessageDelegate> *_field1;
    } _field3;
};

struct vector<scoped_refptr<spotify::desktop::RequestDelegate>, std::__1::allocator<scoped_refptr<spotify::desktop::RequestDelegate>>> {
    struct scoped_refptr<spotify::desktop::RequestDelegate> *_field1;
    struct scoped_refptr<spotify::desktop::RequestDelegate> *_field2;
    struct __compressed_pair<scoped_refptr<spotify::desktop::RequestDelegate>*, std::__1::allocator<scoped_refptr<spotify::desktop::RequestDelegate>>> {
        struct scoped_refptr<spotify::desktop::RequestDelegate> *_field1;
    } _field3;
};

struct vector<spotify::desktop::CacheMigrator::Step, std::__1::allocator<spotify::desktop::CacheMigrator::Step>> {
    struct Step *_field1;
    struct Step *_field2;
    struct __compressed_pair<spotify::desktop::CacheMigrator::Step *, std::__1::allocator<spotify::desktop::CacheMigrator::Step>> {
        struct Step *_field1;
    } _field3;
};

struct vector<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>, std::__1::allocator<spotify::tl::gid<16, spotify::uri::detail::TrackIdTag>>>;

struct vector<spotify::uri::SpotifyLink, std::__1::allocator<spotify::uri::SpotifyLink>>;

struct vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char>>> {
    basic_string_805fe43b *_field1;
    basic_string_805fe43b *_field2;
    struct __compressed_pair<std::__1::basic_string<char>*, std::__1::allocator<std::__1::basic_string<char>>> {
        basic_string_805fe43b *_field1;
    } _field3;
};

struct vector<std::__1::function<void ()>, std::__1::allocator<std::__1::function<void ()>>> {
    struct function<void ()> *_field1;
    struct function<void ()> *_field2;
    struct __compressed_pair<std::__1::function<void ()>*, std::__1::allocator<std::__1::function<void ()>>> {
        struct function<void ()> *_field1;
    } _field3;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *_field1;
    char *_field2;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *_field1;
    } _field3;
};

struct weak_count {
    struct sp_counted_base *pi_;
};

struct weak_ptr<boost::signals2::detail::connection_body_base> {
    struct connection_body_base *px;
    struct weak_count pn;
};

struct weak_ptr<spotify::http::AppleSessionManager> {
    struct AppleSessionManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct work;

#pragma mark Typedef'd Structures

// Template types
typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    unsigned long long __cap_;
                    unsigned long long __size_;
                    char *__data_;
                } __l;
                struct __short {
                    union {
                        unsigned char __size_;
                        char __lx;
                    } ;
                    char __data_[23];
                } __s;
                struct __raw {
                    unsigned long long __words[3];
                } __r;
            } ;
        } __first_;
    } __r_;
} basic_string_805fe43b;

typedef struct shared_ptr<const spotify::desktop::TrackMetadata> {
    struct TrackMetadata *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8b48272b;

typedef struct shared_ptr<spotify::core::experimental::session::Session> {
    struct Session *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_598bf325;

typedef struct shared_ptr<spotify::desktop::InternalLoadMeasurementManager> {
    struct InternalLoadMeasurementManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_37b9480f;

typedef struct shared_ptr<spotify::desktop::RuntimeUsageInfo> {
    struct RuntimeUsageInfo *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_25c5fef7;

typedef struct shared_ptr<spotify::desktop::SystemLoadMeasurer> {
    struct SystemLoadMeasurer *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_539df0a8;

typedef struct shared_ptr<spotify::http::AppleSessionManager> {
    struct AppleSessionManager *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_d8673b2f;

typedef struct shared_ptr<std::__1::map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>>> {
    struct map<int, spotify::desktop::ProcessInfo, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, spotify::desktop::ProcessInfo>>> *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_8f5bfb0f;

typedef struct vector<CefDraggableRegion, std::__1::allocator<CefDraggableRegion>> {
    struct CefDraggableRegion *__begin_;
    struct CefDraggableRegion *__end_;
    struct __compressed_pair<CefDraggableRegion *, std::__1::allocator<CefDraggableRegion>> {
        struct CefDraggableRegion *__first_;
    } __end_cap_;
} vector_89351b1b;

typedef struct weak_ptr<spotify::http::AppleSessionManager> {
    struct AppleSessionManager *__ptr_;
    struct __shared_weak_count *__cntrl_;
} weak_ptr_a31af7f1;

#pragma mark Named Unions

union dummy_u {
    char _field1[16];
    struct a8 _field2;
};

