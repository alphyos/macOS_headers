//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <Mantle/MTLModel.h>

@class GHFileLocation, GHReadWriteQueue, NSSet, NSString, NSURL, OCTRepository, RACCommand, RACSignal, RACSubject;

@interface GHRepository : MTLModel
{
    RACSubject *_workingDirectoryUpdated;
    RACSubject *_HEADUpdated;
    RACSubject *_branchesUpdated;
    RACSubject *_remoteUpdated;
    RACSubject *_pushCompleted;
    RACSubject *_pullCompleted;
    RACSubject *_fetchCompleted;
    int _operationCount;
    BOOL _tutorial;
    BOOL _benchmarkingDisabled;
    OCTRepository *_gitHubRepository;
    GHFileLocation *_fileLocation;
    NSString *_defaultRemoteURLString;
    NSString *_localName;
    NSString *_displayName;
    NSString *_shortDisplayName;
    NSString *_defaultBranchName;
    NSSet *_openPullRequests;
    OCTRepository *_parentGitHubRepository;
    RACSignal *_empty;
    RACSignal *_onUnbornBranch;
    RACCommand *_syncCommand;
    RACCommand *_pushCommand;
    RACCommand *_pullCommand;
    RACCommand *_deleteBranchCommand;
    RACCommand *_mergeCommand;
    NSURL *_lastSeenFileURL;
    GHReadWriteQueue *_connectionQueue;
}

+ (id)addRawOutputToTaskError:(id)arg1;
+ (id)matchRemoteRejectionError:(id)arg1;
+ (id)remoteRejectionRegex;
+ (long long)errorCodeFromTranslation:(id)arg1;
+ (id)translatedGitError:(id)arg1 usingTranslationTable:(id)arg2 replacementDictionary:(id)arg3;
+ (id)reparsedErrorFromGitError:(id)arg1 connection:(id)arg2;
+ (id)dictionaryValueFromArchivedExternalRepresentation:(id)arg1 version:(unsigned long long)arg2;
+ (id)fileURLWithBookmarkData:(id)arg1;
+ (id)propertyKeys;
+ (unsigned long long)modelVersion;
+ (id)createEmptyRepositoryAtFileURL:(id)arg1;
@property(readonly, nonatomic) GHReadWriteQueue *connectionQueue; // @synthesize connectionQueue=_connectionQueue;
@property(nonatomic, getter=isBenchmarkingDisabled) BOOL benchmarkingDisabled; // @synthesize benchmarkingDisabled=_benchmarkingDisabled;
@property(copy) NSURL *lastSeenFileURL; // @synthesize lastSeenFileURL=_lastSeenFileURL;
@property(readonly, nonatomic) RACCommand *mergeCommand; // @synthesize mergeCommand=_mergeCommand;
@property(readonly, nonatomic) RACCommand *deleteBranchCommand; // @synthesize deleteBranchCommand=_deleteBranchCommand;
@property(readonly, nonatomic) RACCommand *pullCommand; // @synthesize pullCommand=_pullCommand;
@property(readonly, nonatomic) RACCommand *pushCommand; // @synthesize pushCommand=_pushCommand;
@property(readonly, nonatomic) RACCommand *syncCommand; // @synthesize syncCommand=_syncCommand;
@property(readonly, nonatomic) RACSignal *onUnbornBranch; // @synthesize onUnbornBranch=_onUnbornBranch;
@property(readonly, nonatomic) RACSignal *empty; // @synthesize empty=_empty;
@property(readonly, nonatomic) RACSignal *fetchCompleted; // @synthesize fetchCompleted=_fetchCompleted;
@property(readonly, nonatomic) RACSignal *pullCompleted; // @synthesize pullCompleted=_pullCompleted;
@property(readonly, nonatomic) RACSignal *pushCompleted; // @synthesize pushCompleted=_pushCompleted;
@property(readonly, nonatomic) RACSignal *remoteUpdated; // @synthesize remoteUpdated=_remoteUpdated;
@property(readonly, nonatomic) RACSignal *branchesUpdated; // @synthesize branchesUpdated=_branchesUpdated;
@property(readonly, nonatomic) RACSignal *HEADUpdated; // @synthesize HEADUpdated=_HEADUpdated;
@property(readonly, nonatomic) RACSignal *workingDirectoryUpdated; // @synthesize workingDirectoryUpdated=_workingDirectoryUpdated;
@property(getter=isTutorial) BOOL tutorial; // @synthesize tutorial=_tutorial;
@property(copy) OCTRepository *parentGitHubRepository; // @synthesize parentGitHubRepository=_parentGitHubRepository;
@property(copy) NSSet *openPullRequests; // @synthesize openPullRequests=_openPullRequests;
@property(readonly, copy) NSString *defaultBranchName; // @synthesize defaultBranchName=_defaultBranchName;
@property(readonly, copy) NSString *shortDisplayName; // @synthesize shortDisplayName=_shortDisplayName;
@property(readonly, copy) NSString *displayName; // @synthesize displayName=_displayName;
@property(readonly, copy) NSString *localName; // @synthesize localName=_localName;
@property(copy) NSString *defaultRemoteURLString; // @synthesize defaultRemoteURLString=_defaultRemoteURLString;
@property(copy) GHFileLocation *fileLocation; // @synthesize fileLocation=_fileLocation;
@property(retain) OCTRepository *gitHubRepository; // @synthesize gitHubRepository=_gitHubRepository;
- (void).cxx_destruct;
- (BOOL)isEqual:(id)arg1;
- (unsigned long long)hash;
- (id)description;
- (id)sanitizedBranchNameForName:(id)arg1;
- (id)validateBranchName:(id)arg1 withBranchNames:(id)arg2;
- (id)decodeFileURLWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)remoteURLString;
- (id)localBranchNameWithBranch:(id)arg1;
- (id)recentBranchNames;
- (id)submoduleRepositoryAtPath:(id)arg1;
- (id)commandWithExclusiveOperation:(CDUnknownBlockType)arg1;
- (id)createExclusiveOperation:(CDUnknownBlockType)arg1;
- (id)createConcurrentOperation:(CDUnknownBlockType)arg1;
- (id)operationWithConnectionClass:(Class)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (void)dealloc;
- (id)initWithFileURL:(id)arg1;
- (id)init;
- (id)resolvedPath;
@property(readonly, copy) NSURL *gitIgnoreURL;

@end

