//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "TSDCanvasEditor-Protocol.h"
#import "TSDKeyValueProxyVendingEditor-Protocol.h"
#import "TSDMacTouchBarAwareEditor-Protocol.h"

@class NSSet, NSString, TSDCanvasEditorHelper, TSDEditorController, TSDInteractiveCanvasController, TSDMacCanvasEditorTouchBarProvider, TSKDocumentRoot, TSKPasteboardController, TSKSelection;
@protocol TSDArrangeInspectorDelegate, TSDCanvasSelection, TSDInlineFloatingWrapInspectorDelegate, TSDTextSelection;

@interface TSDCanvasEditor : NSObject <TSDKeyValueProxyVendingEditor, TSDMacTouchBarAwareEditor, TSDCanvasEditor>
{
    TSDInteractiveCanvasController *mInteractiveCanvasController;
    TSDCanvasEditorHelper *mCanvasEditorHelper;
    NSObject<TSDArrangeInspectorDelegate> *mZOrderArranger;
    NSObject<TSDInlineFloatingWrapInspectorDelegate> *mInlineFloatingEditor;
    BOOL mPreventImageDataReplace;
    TSDMacCanvasEditorTouchBarProvider *mTouchBarProvider;
}

+ (CDUnknownBlockType)spatialInfoComparator;
+ (BOOL)physicalKeyboardIsSender:(id)arg1;
+ (Class)canvasEditorHelperClass;
+ (id)keysResolvedByKeyValueProxy;
- (void).cxx_destruct;
- (void)scrollToEndOfDocument:(id)arg1;
- (void)scrollToBeginningOfDocument:(id)arg1;
@property(readonly, nonatomic) id <TSDArrangeInspectorDelegate> arrangeInspectorDelegate;
- (id)createArrangeInspectorDelegate;
- (void)insertBacktab:(id)arg1;
- (void)insertTab:(id)arg1;
- (id)p_selectableInfosInInfos:(id)arg1;
- (id)p_spatiallySortedSelectableDrawables;
- (id)p_nextInfoInTabSequence:(int)arg1;
- (id)newMouseEventHandlerAtPoint:(struct CGPoint)arg1 withEvent:(id)arg2;
- (id)cursorAtPoint:(struct CGPoint)arg1 withEvent:(id)arg2;
- (struct CGPath *)newDragAndDropHighlightPathForOperation:(unsigned long long)arg1 atPoint:(struct CGPoint)arg2;
- (void)updateDragAndDropHighlightForOperation:(unsigned long long)arg1 atPoint:(struct CGPoint)arg2;
- (void)insertMathTypeEquation;
- (void)connectWithConnectionLine:(id)arg1;
- (id)infosToConnect;
- (id)commandForDeletingTemporaryShape:(id)arg1 below:(id)arg2;
- (BOOL)canGroupDrawable:(id)arg1;
- (void)ungroup:(id)arg1;
- (void)group:(id)arg1;
- (void)selectAll:(id)arg1;
@property(readonly, nonatomic) NSSet *infosForSelectAllInRoot;
- (void)select:(id)arg1;
- (void)pasteValues:(id)arg1;
- (void)pasteAsPlainText:(id)arg1;
- (void)paste:(id)arg1;
- (id)selectionBehaviorForDeletingDrawables:(id)arg1;
- (id)commandForDelete;
@property(readonly, nonatomic) NSSet *drawablesToDelete;
- (id)commandForInsertingUngroupedDrawables:(id)arg1 below:(id)arg2;
- (id)commandForInsertingGroup:(id)arg1 below:(id)arg2 withOffset:(unsigned long long)arg3;
- (id)commandForInsertingGroup:(id)arg1 below:(id)arg2;
- (id)commandForInsertingDrawables:(id)arg1 below:(id)arg2 withOffset:(unsigned long long)arg3;
- (id)commandForInsertingDrawables:(id)arg1 below:(id)arg2;
- (id)pasteNativeInfosFromPasteboard:(id)arg1 allowImageReplacement:(BOOL)arg2;
- (void)getDrawablesToInsert:(out id *)arg1 fromNativePasteboard:(id)arg2 blockToEnqueueCommandsToInsert:(out CDUnknownBlockType *)arg3;
- (void)pasteWithPasteboard:(id)arg1 selection:(id)arg2 forceMatchStyle:(BOOL)arg3 sender:(id)arg4 bakeFormulas:(BOOL)arg5;
- (id)commandForInsertingDrawable:(id)arg1 withInsertionContext:(id)arg2;
- (void)p_insertDrawables:(id)arg1 withInsertionContext:(id)arg2;
- (void)insertDrawables:(id)arg1 withInsertionContext:(id)arg2 postProcessBlock:(CDUnknownBlockType)arg3;
- (id)drawablesToInsertForDrawables:(id)arg1 withInsertionContext:(id)arg2 blockToEnqueueCommandsToInsert:(out CDUnknownBlockType *)arg3;
- (id)selectionBehaviorForInsertingDrawables:(id)arg1;
- (struct CGSize)sizeForInsertingMediaOfSize:(struct CGSize)arg1;
- (void)prepareGeometryForInsertingDrawables:(id)arg1 withInsertionContext:(id)arg2;
- (void)copyAsPDF:(id)arg1;
- (void)copy:(id)arg1;
- (void)copyToPasteboard:(id)arg1 withSender:(id)arg2;
- (void)copyInfos:(id)arg1 toPasteboard:(id)arg2 asPDF:(BOOL)arg3;
- (void)copyToPasteboard:(id)arg1 asPDF:(BOOL)arg2 withSender:(id)arg3;
- (void)deleteWordForward:(id)arg1;
- (void)deleteWordBackward:(id)arg1;
- (void)deleteToEndOfLine:(id)arg1;
- (void)deleteToBeginningOfLine:(id)arg1;
- (void)deleteForward:(id)arg1;
- (void)deleteBackward:(id)arg1;
- (void)addOrShowComment:(id)arg1;
- (BOOL)canAddOrShowComment;
- (BOOL)canSetTableWritingDirection;
- (BOOL)canSetDrawableWritingDirection:(long long)arg1;
- (int)canPerformEditorAction:(SEL)arg1 withSender:(id)arg2;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2 replacementRange:(struct _NSRange)arg3;
- (void)insertNewline:(id)arg1;
- (void)insertText:(id)arg1 replacementRange:(struct _NSRange)arg2;
- (BOOL)shouldPreventPanDragging;
- (BOOL)canvasEditorCanUngroupWithSender:(id)arg1;
- (BOOL)canUngroupWithSender:(id)arg1;
- (BOOL)canvasEditorCanGroupWithSender:(id)arg1;
- (BOOL)canGroupWithSender:(id)arg1;
- (BOOL)canvasEditorCanDeselectAllWithSender:(id)arg1;
- (BOOL)canvasEditorCanSelectAllWithSender:(id)arg1;
- (BOOL)canSelectAllWithSender:(id)arg1;
- (BOOL)canvasEditorCanOptionDragDuplicateWithSender:(id)arg1;
- (BOOL)canvasEditorCanDuplicateWithSender:(id)arg1;
- (BOOL)canvasEditorCanPasteValuesWithSender:(id)arg1;
- (BOOL)canvasEditorCanPasteAsPlainTextWithSender:(id)arg1;
- (BOOL)canvasEditorCanPasteWithSender:(id)arg1;
- (BOOL)canPasteWithSender:(id)arg1;
- (BOOL)canvasEditorCanCopyStyleWithSender:(id)arg1;
- (BOOL)canvasEditorCanCutWithSender:(id)arg1;
- (BOOL)canvasEditorCanCopyWithSender:(id)arg1;
- (BOOL)canvasEditorCanDeleteWithSender:(id)arg1;
- (BOOL)canCopyStyle;
- (BOOL)canHandleInsertionOfDrawables:(id)arg1 insertionContext:(id)arg2;
- (id)permittedSharedReadOnlyActions;
@property(readonly, nonatomic) TSKPasteboardController *pasteboardController;
- (void)addContextualMenuItemsToMenu:(id)arg1 clickAtPoint:(struct CGPoint)arg2 withEvent:(id)arg3;
- (void)selectionDidChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3;
- (id)selectionWillChangeFromSelection:(id)arg1 toSelection:(id)arg2 withFlags:(unsigned long long)arg3 inSelectionPath:(id)arg4 withNewEditors:(id)arg5;
@property(readonly, retain, nonatomic) TSKSelection<TSDTextSelection> *textInputSelection;
- (BOOL)wantsToReceiveTextInput;
- (id)nextEditorForSelection:(id)arg1 withNewEditorStack:(id)arg2 selectionPath:(id)arg3;
- (BOOL)shouldRemainOnEditorStackForSelection:(id)arg1 inSelectionPath:(id)arg2 withNewEditors:(id)arg3;
- (id)drawables;
- (unsigned long long)countOfDrawables;
- (BOOL)shouldUseAlternateSelectionHighlight;
- (Class)editorClassForSelection;
- (id)p_filterNonDisplayedInfos:(id)arg1;
- (void)repWasCreated:(id)arg1;
- (void)canvasInfosDidChange;
- (id)selectionPathForDraggingSelectionPath:(id)arg1;
- (id)selectionPathWithInfos:(id)arg1;
- (id)selectionPathWithInfo:(id)arg1;
- (BOOL)currentSelectionContainsInfo:(id)arg1;
- (id)allSelectedInfos;
@property(readonly, nonatomic) TSKSelection<TSDCanvasSelection> *canvasSelection;
@property(readonly, nonatomic) TSDInteractiveCanvasController *interactiveCanvasController;
@property(readonly, nonatomic) TSKDocumentRoot *documentRoot;
@property(readonly, nonatomic) TSDCanvasEditorHelper *canvasEditorHelper;
@property(retain, nonatomic) TSDEditorController *editorController;
- (id)makeTouchBarProvider;
- (id)existingTouchBarProvider;
- (id)touchBarProvider;
- (void)teardown;
- (id)init;
- (id)initWithInteractiveCanvasController:(id)arg1;
- (id)guidePasteboard;
- (void)pasteUserDefinedGuides:(id)arg1;
- (void)copyUserDefinedGuides:(id)arg1;
- (void)clearGuides:(id)arg1;
- (void)deleteGuide:(id)arg1;
- (void)presentMediaCompatibilityAlertForUnsupportedMediaOfType:(long long)arg1 forSingleMediaObject:(BOOL)arg2 completionHandler:(CDUnknownBlockType)arg3;
- (void)deleteComment:(id)arg1;
- (BOOL)canDeleteComment;
- (void)arrowKeyReceivedInDirection:(int)arg1 withModifierKeys:(int)arg2;
- (id)commandForDeletingDrawablesForReplacement:(id)arg1;
- (id)commandForDeletingDrawables:(id)arg1;
- (void)selectParent:(id)arg1;
- (void)sendToBack:(id)arg1;
- (void)sendBackward:(id)arg1;
- (void)bringForward:(id)arg1;
- (void)bringToFront:(id)arg1;
- (void)distributeDrawablesEvenly:(id)arg1;
- (void)distributeDrawablesVertically:(id)arg1;
- (void)distributeDrawablesHorizontally:(id)arg1;
- (void)alignDrawablesByHorizontalCenter:(id)arg1;
- (void)alignDrawablesByBottomEdge:(id)arg1;
- (void)alignDrawablesByTopEdge:(id)arg1;
- (void)alignDrawablesByVerticalCenter:(id)arg1;
- (void)alignDrawablesByRightEdge:(id)arg1;
- (void)alignDrawablesByLeftEdge:(id)arg1;
- (BOOL)insertInfosFromDragAndDrop:(id)arg1 fromNativePasteboard:(BOOL)arg2 atPoint:(struct CGPoint)arg3 preferredCenterRequired:(BOOL)arg4 alreadyPositionedInputInfos:(BOOL)arg5 onRep:(id)arg6 targetZOrder:(unsigned long long)arg7;
- (BOOL)wantsToHighlightRep:(id)arg1 forDragOperationWithSender:(id)arg2 atPoint:(struct CGPoint)arg3 withPromisedTypes:(id)arg4 allowNonPlaceholderReplacement:(BOOL)arg5;
- (BOOL)handleDragOperation:(unsigned long long)arg1 withSender:(id)arg2 atPoint:(struct CGPoint)arg3 withPromisedFiles:(id)arg4;
- (unsigned long long)dragOperationForSender:(id)arg1 atPoint:(struct CGPoint)arg2 withPromisedTypes:(id)arg3;
- (void)reduceFileSizeForSelectedImages:(id)arg1;
- (void)reduceDocumentFileSize:(id)arg1;
- (void)updateStateForUserInterfaceItem:(id)arg1;
- (void)maskWithShapeType:(id)arg1;
- (void)maskWithShape:(id)arg1;
- (void)mask:(id)arg1;
- (void)maskWithSelection:(id)arg1;
- (void)duplicate:(id)arg1;
- (BOOL)isRepSelectable:(id)arg1;
- (void)deselectAll:(id)arg1;
- (void)unlock:(id)arg1;
- (void)lock:(id)arg1;
- (void)cut:(id)arg1;
- (void)delete:(id)arg1;
- (id)canvasSelectionWithInfos:(id)arg1;
@property(readonly) BOOL wantsRawArrowKeyEvents;
- (void)setSelectionWithRange:(struct _NSRange)arg1 endOfLine:(BOOL)arg2;
- (id)selectionWithRange:(struct _NSRange)arg1;
- (void)clearMarkedRange;
- (struct _NSRange)rangeOfWordEnclosingCharIndex:(unsigned long long)arg1 backward:(BOOL)arg2;
- (void)replaceRange:(struct _NSRange)arg1 withText:(id)arg2;
- (void)extendSelectionForward;
- (void)extendSelectionBackward;
- (void)deleteForward;
- (void)deleteBackward;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;
- (id)selectionRectsForRange:(struct _NSRange)arg1;
- (struct CGRect)firstRectForRange:(struct _NSRange)arg1 wantsEndOfLine:(BOOL)arg2;
- (id)textInRange:(struct _NSRange)arg1;
- (unsigned long long)textLength;
- (BOOL)textIsVerticalAtCharIndex:(unsigned long long)arg1;
- (void)endEditing;
- (struct _NSRange)editRange;
@property(readonly, nonatomic) struct _NSRange markedRange;
- (unsigned long long)characterIndexForPoint:(struct CGPoint)arg1;
- (struct CGRect)firstRectForCharacterRange:(struct _NSRange)arg1 actualRange:(struct _NSRange *)arg2;
- (id)validAttributesForMarkedText;
- (id)attributedSubstringForProposedRange:(struct _NSRange)arg1 actualRange:(struct _NSRange *)arg2;
- (void)insertText:(id)arg1;
- (BOOL)wantsKeyboard;
- (id)keyValueProxy;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingCalloutAttributes;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingConnectionLineAttributes;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingEndpoints;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingFill;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingOpacity;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingReflection;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingResize;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingShadow;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingShrinkTextToFit;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingSmartShapeAttributes;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingStroke;
@property(readonly, nonatomic) NSSet *selectedObjectsSupportingTextInset;
@property(retain, nonatomic) TSKSelection<TSDTextSelection> *selectionForArrowKeys;
@property(readonly) Class superclass;

@end

