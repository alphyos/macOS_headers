//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import "TSDDrawableInfo.h"

#import "TSCECalculationEngineRegistration-Protocol.h"
#import "TSCEFormulaOwning-Protocol.h"
#import "TSCEReferenceResolving-Protocol.h"
#import "TSCETableModeling-Protocol.h"
#import "TSDCompatibilityAwareMediaContainer-Protocol.h"
#import "TSDContainerInfo-Protocol.h"
#import "TSDKeyValueProxyVending-Protocol.h"
#import "TSDMixing-Protocol.h"
#import "TSDReducibleImageContainer-Protocol.h"
#import "TSDReplaceableMediaContainer-Protocol.h"
#import "TSDUndoObjectAdditionalCopying-Protocol.h"
#import "TSKCollaborationConvergenceChecking-Protocol.h"
#import "TSKCustomFormatContainingInfo-Protocol.h"
#import "TSKModel-Protocol.h"
#import "TSKSearchable-Protocol.h"
#import "TSSPresetSource-Protocol.h"
#import "TSSStyleClient-Protocol.h"
#import "TSTCustomStrokeProviding-Protocol.h"
#import "TSTStyleProviding-Protocol.h"
#import "TSTTableHiddenRowColumnProviding-Protocol.h"
#import "TSTTableInternalGeometryProviding-Protocol.h"
#import "TSTTableMergeRangeProviding-Protocol.h"
#import "TSTTableStrokeProviding-Protocol.h"
#import "TSWPStorageParent-Protocol.h"
#import "TSWPTextStatisticsTrackerProvider-Protocol.h"
#import "TSWPTextualEquivalentProvider-Protocol.h"

@class NSArray, NSDictionary, NSObject, NSString, NSUUID, TSCECalculationEngine, TSCECellCoordinateVector, TSCEOwnerFormulaMap, TSCEOwnerUidMapper, TSDFill, TSDInfoGeometry, TSDStroke, TSPObject, TSTActionVerifier, TSTCell, TSTCellDictionary, TSTCellStyle, TSTConditionalStyleFormulaOwner, TSTEditingState, TSTHiddenStateFormulaOwner, TSTHiddenStateIndexSet, TSTImportWarningSetByCoordinateMap, TSTMasterLayout, TSTMergeOwner, TSTSortRuleReferenceTracker, TSTStrokeSidecar, TSTTableFilterSet, TSTTableModel, TSTTablePartitioner, TSTTableSortOrder, TSTTableStyle, TSTTableStylePreset, TSWPParagraphStyle, TSWPShapeStyle, TSWPStorage;
@protocol TSDContainerInfo, TSDOwningAttachment;

@interface TSTInfo : TSDDrawableInfo <TSDReplaceableMediaContainer, TSDReducibleImageContainer, TSDCompatibilityAwareMediaContainer, TSCEReferenceResolving, TSDKeyValueProxyVending, TSWPTextualEquivalentProvider, TSCECalculationEngineRegistration, TSCEFormulaOwning, TSCETableModeling, TSKCustomFormatContainingInfo, TSDContainerInfo, TSDMixing, TSKModel, TSKSearchable, TSSPresetSource, TSSStyleClient, TSTCustomStrokeProviding, TSTStyleProviding, TSTTableHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding, TSTTableStrokeProviding, TSDUndoObjectAdditionalCopying, TSKCollaborationConvergenceChecking, TSWPStorageParent, TSWPTextStatisticsTrackerProvider>
{
    BOOL _hasReference;
    BOOL _migratingStylesOnly;
    TSTTablePartitioner *_partitioner;
    TSTMasterLayout *_masterLayout;
    TSTActionVerifier *_actionVerifier;
    TSTEditingState *_editingState;
    TSWPStorage *_tableNameEditingStorage;
    TSTTableModel *_tableModel;
}

+ (unsigned long long)tableAreaForCellID:(struct TSUCellCoord)arg1 inTableWithHeaderColumns:(unsigned short)arg2 headerRows:(unsigned short)arg3 footerRows:(unsigned short)arg4 totalRows:(unsigned short)arg5;
+ (struct TSUCellRect)cellRangeForTableArea:(unsigned long long)arg1 givenTableSize:(CDStruct_d65e47c4)arg2 numberOfHeaderRows:(unsigned short)arg3 numberOfFooterRows:(unsigned short)arg4 numberOfHeaderColumns:(unsigned short)arg5;
+ (void)ensureAllTablesAreRegisteredInDocumentRoot:(id)arg1;
+ (void)performRewritesForInsertedTableInfos:(id)arg1;
+ (BOOL)validateNewName:(id)arg1 forTable:(id)arg2;
+ (id)presetKinds;
+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3 reservedCount:(unsigned long long)arg4;
+ (void)bootstrapPresetsOfKind:(id)arg1 inTheme:(id)arg2 alternate:(int)arg3;
+ (BOOL)canPartition;
+ (BOOL)needsObjectUUID;
+ (id)tablePrototypeWithIndex:(long long)arg1 context:(id)arg2 geometry:(id)arg3 styles:(id)arg4 forTableInsertOnly:(BOOL)arg5;
+ (id)tablePrototypeWithIndex:(long long)arg1 context:(id)arg2 geometry:(id)arg3 styles:(id)arg4;
+ (id)geometryForPrototypeIndex:(long long)arg1 withCanvasPoint:(struct CGPoint)arg2;
+ (unsigned short)numberOfColumnsForProtoIndex:(unsigned long long)arg1;
+ (unsigned short)numberOfRowsForProtoIndex:(unsigned long long)arg1;
+ (id)localizedDescriptionForProtoIndex:(unsigned long long)arg1;
+ (struct TSCETableReference)makeCellReferenceInSameTable:(const struct TSCETableReference *)arg1 cellID:(struct TSUCellCoord)arg2;
+ (void)prefetchData:(struct TSCEReferenceValue *)arg1 fromVectorObject:(struct TSCETableReferenceVector *)arg2 cellID:(struct TSUCellCoord)arg3;
+ (struct TSCETableReferenceVector)makeReferenceVectorWithReference:(const struct TSCETableReference *)arg1 rangeContext:(unsigned char)arg2 apparentRangePtr:(struct TSCERangeCoordinate *)arg3;
+ (struct TSCETableReference)canonicalCellReferenceForReference:(const struct TSCETableReference *)arg1;
+ (id)resolverMatchingNameWithContextContainer:(id)arg1 inDocumentRoot:(id)arg2 contextContainerName:(id)arg3;
+ (id)resolverMatchingName:(id)arg1 inDocumentRoot:(id)arg2 contextResolver:(id)arg3;
+ (id)resolverContainerMatchingName:(id)arg1 inDocumentRoot:(id)arg2;
+ (int)getHidingAction:(const struct TSCETableReference *)arg1;
+ (struct TSCERangeRef)getRangeReference:(const struct TSCETableReference *)arg1;
+ (struct TSCERangeCoordinate)getRange:(const struct TSCETableReference *)arg1;
+ (struct TSCEFormat)format:(const struct TSCETableReference *)arg1 fromCell:(struct TSUCellCoord)arg2;
+ (struct TSCEFormat)formatFromVector:(const struct TSCETableReferenceVector *)arg1 atIndex:(unsigned long long)arg2;
+ (int)mergeReferences:(struct TSCETableReference *)arg1 left:(const struct TSCETableReference *)arg2 right:(const struct TSCETableReference *)arg3;
+ (struct TSCEValue)scalarValue:(const struct TSCETableReference *)arg1 fromCell:(struct TSUCellCoord)arg2 permitAccessInsideMergeRegions:(_Bool)arg3 fetchRichTextAttributesIfPlainText:(_Bool)arg4;
+ (struct TSUCellCoord)resolvedCellIDForScalarAccess:(struct TSCETableReference)arg1 fromCell:(struct TSUCellCoord)arg2;
+ (struct TSCEValue)valueForTable:(id)arg1 cellID:(struct TSUCellCoord)arg2 fetchRichTextAttributesIfPlainText:(_Bool)arg3;
+ (id)listStyleWithContext:(id)arg1 stylesheet:(id)arg2;
+ (id)paragraphStyleWithContext:(id)arg1 stylesheet:(id)arg2;
+ (id)shapeStyleWithContext:(id)arg1 stylesheet:(id)arg2;
@property(nonatomic) BOOL migratingStylesOnly; // @synthesize migratingStylesOnly=_migratingStylesOnly;
@property(retain, nonatomic) TSTTableModel *tableModel; // @synthesize tableModel=_tableModel;
@property(retain, nonatomic) TSWPStorage *tableNameEditingStorage; // @synthesize tableNameEditingStorage=_tableNameEditingStorage;
@property(retain, nonatomic) TSTEditingState *editingState; // @synthesize editingState=_editingState;
@property(nonatomic) BOOL hasReference; // @synthesize hasReference=_hasReference;
@property(retain, nonatomic) TSTMasterLayout *masterLayout; // @synthesize masterLayout=_masterLayout;
@property(retain, nonatomic) TSTTablePartitioner *partitioner; // @synthesize partitioner=_partitioner;
- (void).cxx_destruct;
- (void)validate;
- (void)adoptStylesheet:(id)arg1 withMapper:(id)arg2;
- (void)updateTableRowColumnStylesWithBlock:(CDUnknownBlockType)arg1;
- (void)mapTableStylesToStylesheet:(id)arg1 withMapper:(id)arg2;
- (id)cellRegionForUIDRange:(const struct TSTCellUIDRange *)arg1;
- (struct TSTCellUIDRange)cellUIDRangeForCellRange:(struct TSUCellRect)arg1;
- (struct TSUCellRect)cellRangeForUIDRange:(const struct TSTCellUIDRange *)arg1;
- (id)cellRegionFromCellUIDList:(id)arg1;
- (id)cellUIDListFromCellRegion:(id)arg1;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2 notFoundUIDs:(id)arg3;
- (id)mutableIndexesForUIDSet:(id)arg1 isRows:(BOOL)arg2;
- (id)UIDSetForIndexes:(id)arg1 isRows:(BOOL)arg2;
- (vector_dadc1b26)prunedRowUIDsFromRowUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)prunedColumnUIDsFromColumnUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)columnUIDsForColumnRange:(struct _NSRange)arg1;
- (id)mutableColumnIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (id)columnIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)columnUIDsForColumnIndexes:(id)arg1;
- (unsigned char)columnIndexForColumnUID:(const UUIDData_5fbc143e *)arg1;
- (UUIDData_5fbc143e)columnUIDForColumnIndex:(unsigned char)arg1;
- (vector_dadc1b26)rowUIDsForRowRange:(struct _NSRange)arg1;
- (id)mutableRowIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (id)rowIndexesForUIDs:(const vector_dadc1b26 *)arg1;
- (vector_dadc1b26)rowUIDsForRowIndexes:(id)arg1;
- (unsigned short)rowIndexForRowUID:(const UUIDData_5fbc143e *)arg1;
- (UUIDData_5fbc143e)rowUIDForRowIndex:(unsigned short)arg1;
- (BOOL)writeCellIDsInCellUIDList:(id)arg1 toVector:(vector_13f93596 *)arg2;
- (id)prunedCellUIDListFromCellUIDList:(id)arg1 allowMergeFragment:(BOOL)arg2 addingPrunedIndicesToIndexSet:(id)arg3;
- (struct TSUCellCoord)cellIDForCellUID:(const struct TSTCellUID *)arg1;
- (struct TSTCellUID)cellUIDforCellID:(const struct TSUCellCoord *)arg1;
- (struct TSUCellCoord)cellIDForCellContainingRichTextStorage:(id)arg1;
- (BOOL)findChartableRangesFromTableRange:(struct TSCERangeCoordinate)arg1 getBodyRange:(out struct TSCERangeCoordinate *)arg2 headerColumnRange:(out struct TSCERangeCoordinate *)arg3 headerRowRange:(out struct TSCERangeCoordinate *)arg4;
- (void)upgradeFromPreUFF;
- (struct TSUCellRect)minPopulatedCellRange;
- (BOOL)cellWasModifiedInCurrentRecalcCycle:(struct TSUCellCoord)arg1;
- (struct TSCERangeRef)referenceToHiddenStateFromColumn:(unsigned char)arg1 toColumn:(unsigned char)arg2;
- (struct TSCERangeRef)referenceToHiddenStateFromRow:(unsigned short)arg1 toRow:(unsigned short)arg2;
- (void)registerAllFormulasWithCalculationEngine:(id)arg1;
- (void)reassignPasteboardCustomFormatKeys;
- (void)addPasteboardCustomFormatsToDocumentAndUpdateCells;
- (void)remapTableUIDsInFormulasWithMap:(const UUIDMap_727ee07e *)arg1 calcEngine:(id)arg2 bakeForBadRefs:(BOOL)arg3;
- (void)setFormulaOwnerUIDsWithMap:(id)arg1 shouldStealReferences:(BOOL)arg2;
- (id)cellRegionWithConditionalStyleMatchingCell:(struct TSUCellCoord)arg1;
- (BOOL)hasCellID:(struct TSUCellCoord)arg1;
- (void)getValue:(out struct TSCEValue *)arg1 fromIteratorData:(id)arg2 fetchRichTextAttributesIfPlainText:(BOOL)arg3;
- (int)getValue:(out struct TSCEValue *)arg1 atCellID:(struct TSUCellCoord)arg2 fetchRichTextAttributesIfPlainText:(BOOL)arg3;
- (id)strokeLayerForBottomOfRow:(unsigned short)arg1;
- (id)strokeLayerForTopOfRow:(unsigned short)arg1;
- (id)strokeLayerForRightSideOfColumn:(unsigned char)arg1;
- (id)strokeLayerForLeftSideOfColumn:(unsigned char)arg1;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3 rowRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3 columnRange:(struct TSTSimpleRange)arg4;
- (void)setStroke:(id)arg1 forRightOfColumn:(unsigned char)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forLeftOfColumn:(unsigned char)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forBottomOfRow:(unsigned short)arg2 order:(int)arg3;
- (void)setStroke:(id)arg1 forTopOfRow:(unsigned short)arg2 order:(int)arg3;
- (id)cellBorderAtCellID:(struct TSUCellCoord)arg1;
- (int)maxStrokeOrder;
- (id)strokeExporterReturningDefaultStrokes:(BOOL)arg1;
@property(readonly, nonatomic) TSDStroke *footerRowSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *footerRowBorderStroke;
@property(readonly, nonatomic) TSDStroke *headerRowSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *headerRowBorderStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnSeparatorStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBodyRowStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *headerColumnBorderStroke;
@property(readonly, nonatomic) TSDStroke *bodyRowStrokeEvenIfNotVisible;
@property(readonly, nonatomic) TSDStroke *bodyRowStroke;
@property(readonly, nonatomic) TSDStroke *bodyColumnStroke;
@property(readonly, nonatomic) TSDStroke *defaultHorizontalBorderStrokeEvenIfNotVisible;
@property(readonly, nonatomic) TSDStroke *defaultVerticalBorderStroke;
@property(readonly, nonatomic) TSDStroke *defaultHorizontalBorderStroke;
- (id)fillForColumn:(unsigned char)arg1;
- (id)fillForRow:(unsigned short)arg1;
@property(readonly, nonatomic) TSDFill *footerRowsFill;
@property(readonly, nonatomic) TSDFill *headerRowsFill;
@property(readonly, nonatomic) TSDFill *headerColumnsFill;
@property(readonly, nonatomic) TSDFill *bodyFill;
@property(readonly, nonatomic) TSDFill *backgroundFill;
- (id)expandCellRegionToCoverMergedCells:(id)arg1;
- (struct TSUCellRect)expandCellRangeToCoverMergedCells:(struct TSUCellRect)arg1;
- (id)mergesIntersectingCellRegion:(id)arg1;
- (id)mergesIntersectingRange:(struct TSUCellRect)arg1;
- (id)mergeRangesForCellRegion:(id)arg1;
- (id)mergeRangesForCellRange:(struct TSUCellRect)arg1;
- (id)regionForValueOrCommentCellsInRange:(struct TSUCellRect)arg1;
- (id)mergedGridIndicesForDirection:(long long)arg1;
- (BOOL)hasMergeRangesIntersectingCellRegion:(id)arg1;
- (BOOL)hasMergeFragmentAtCellID:(struct TSUCellCoord)arg1;
- (BOOL)mergeRangesPartiallyIntersectingCellRange:(struct TSUCellRect)arg1;
- (BOOL)isSingleCellOrMergeRange:(struct TSUCellRect)arg1;
- (struct TSUCellRect)mergeRangeAtCellID:(struct TSUCellCoord)arg1;
- (BOOL)unmergeCellRange:(struct TSUCellRect)arg1;
- (BOOL)mergeCellRange:(struct TSUCellRect)arg1;
- (id)fontColorAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (id)stringAtCellID:(struct TSUCellCoord)arg1 optionalCell:(id)arg2;
- (BOOL)anyHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (unsigned char)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnAfterColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned char)arg1;
- (unsigned short)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowAfterRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowBeforeRowAtIndex:(unsigned short)arg1;
- (BOOL)hasHiddenColumnAtIndex:(unsigned char)arg1;
- (BOOL)hasHiddenRowAtIndex:(unsigned short)arg1;
@property(readonly, nonatomic) unsigned short numberOfVisibleBodyColumns;
@property(readonly, nonatomic) unsigned short numberOfUserVisibleBodyRows;
@property(readonly, nonatomic) unsigned short numberOfVisibleBodyRows;
- (BOOL)isCellRangeHidden:(struct TSUCellRect)arg1;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect)arg1 forAction:(unsigned char)arg2;
- (unsigned char)hidingActionForColumnAtIndex:(unsigned char)arg1;
- (unsigned char)hidingActionForRowAtIndex:(unsigned short)arg1;
- (id)indexesOfVisibleRowsInRowRange:(id)arg1;
- (id)indexesOfUserVisibleRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfVisibleRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfUserHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfVisibleColumnsInColumnRange:(id)arg1;
- (id)indexesOfVisibleColumnsInCellRange:(struct TSUCellRect)arg1;
- (id)indexesOfHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)hasHiddenColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2;
- (BOOL)hasHiddenRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (BOOL)showColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2;
- (BOOL)showRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (unsigned short)numberOfHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (unsigned short)numberOfUserHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (unsigned short)numberOfHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)hideColumnAtIndex:(unsigned char)arg1 forAction:(unsigned char)arg2;
- (BOOL)hideRowAtIndex:(unsigned short)arg1 forAction:(unsigned char)arg2;
- (void)swapRowAtIndex:(unsigned short)arg1 withRowAtIndex:(unsigned short)arg2;
- (void)moveColumnRange:(struct _NSRange)arg1 toColumnIndex:(unsigned char)arg2;
- (void)moveRowRange:(struct _NSRange)arg1 toRowIndex:(unsigned short)arg2;
- (void)removeColumnsAtIndexes:(id)arg1;
- (void)removeRowsAtIndexes:(id)arg1;
- (void)removeColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2;
- (void)removeRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2;
- (int)insertColumnsInRange:(struct _NSRange)arg1 uids:(const vector_dadc1b26 *)arg2 metadata:(id)arg3;
- (void)insertColumnsAtIndex:(unsigned char)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3;
- (int)insertRowsInRange:(struct _NSRange)arg1 uids:(const vector_dadc1b26 *)arg2 metadata:(id)arg3 unsetFilterHidingAction:(BOOL)arg4;
- (int)insertRowsInRange:(struct _NSRange)arg1 uids:(const vector_dadc1b26 *)arg2 metadata:(id)arg3;
- (void)insertRowsAtIndex:(unsigned short)arg1 count:(unsigned short)arg2 addBefore:(BOOL)arg3;
- (struct TSUCellRect)bottomCornerRange;
- (struct TSUCellRect)topCornerRange;
- (struct TSUCellRect)footerRowRange;
- (struct TSUCellRect)actualHeaderColumnRange;
- (struct TSUCellRect)headerColumnRange;
- (struct TSUCellRect)headerRowRange;
- (struct TSUCellRect)bodyRowRange;
- (struct TSUCellRect)bodyColumnRange;
- (struct TSUCellRect)bodyRange;
- (struct TSUCellRect)range;
- (double)computeDefaultFontHeightForTableArea:(unsigned long long)arg1;
- (void)computeDefaultRowHeight;
@property NSArray *rowHeights;
@property NSArray *columnWidths;
- (void)setWidth:(double)arg1 ofColumnAtIndex:(unsigned char)arg2;
- (void)setHeight:(double)arg1 ofRowAtIndex:(unsigned short)arg2;
- (double)widthOfColumnAtIndex:(unsigned char)arg1 isDefault:(out char *)arg2;
- (double)heightOfRowAtIndex:(unsigned short)arg1 isDefault:(out char *)arg2;
- (struct TSUCellCoord)cellIDBelowCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDAboveCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDRightOfCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellCoord)cellIDLeftOfCellID:(struct TSUCellCoord)arg1;
- (unsigned int)numberOfCells;
- (id)rowNameForCellID:(struct TSUCellCoord)arg1 cellRangeContainingName:(struct TSUCellRect *)arg2 restrictToBodyRange:(BOOL)arg3;
- (id)columnNameForCellID:(struct TSUCellCoord)arg1 cellRangeContainingName:(struct TSUCellRect *)arg2 restrictToBodyRange:(BOOL)arg3;
- (id)conditionalStyleSetAtCellID:(struct TSUCellCoord)arg1;
- (id)textStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (id)cellStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (int)setTextStyle:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (int)setCellStyle:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (BOOL)textStyle:(id)arg1 isEqualToDefaultTextStyleForCellID:(struct TSUCellCoord)arg2;
- (BOOL)cellStyle:(id)arg1 isEqualToDefaultCellStyleForCellID:(struct TSUCellCoord)arg2;
- (id)textStyleForCellWithEmptyStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (id)defaultTextStyleForTableArea:(unsigned long long)arg1;
- (id)defaultTextStyleForCellID:(struct TSUCellCoord)arg1;
- (id)cellStyleForCellWithEmptyStyleAtCellID:(struct TSUCellCoord)arg1 isDefault:(out char *)arg2;
- (id)defaultCellStyleForTableArea:(unsigned long long)arg1;
- (id)defaultCellStyleForCellID:(struct TSUCellCoord)arg1;
- (id)textStyleOfColumnAtIndex:(unsigned char)arg1 isDefault:(out char *)arg2;
- (id)cellStyleOfColumnAtIndex:(unsigned char)arg1 isDefault:(out char *)arg2;
- (int)setTextStyle:(id)arg1 ofColumnAtIndex:(unsigned char)arg2;
- (int)setCellStyle:(id)arg1 ofColumnAtIndex:(unsigned char)arg2;
- (id)textStyleOfRowAtIndex:(unsigned short)arg1 isDefault:(out char *)arg2;
- (id)cellStyleOfRowAtIndex:(unsigned short)arg1 isDefault:(out char *)arg2;
- (int)setTextStyle:(id)arg1 ofRowAtIndex:(unsigned short)arg2;
- (int)setCellStyle:(id)arg1 ofRowAtIndex:(unsigned short)arg2;
- (int)cellValueTypeAtCellID:(struct TSUCellCoord)arg1;
- (id)formatAtCellID:(struct TSUCellCoord)arg1 formatIsImplicitOut:(char *)arg2;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 holdingReadLockWithAccessController:(id)arg3;
- (id)cellMapForRegion:(id)arg1 uidBased:(BOOL)arg2 suppressMergeContent:(BOOL)arg3;
- (int)setCellsWithCellMap:(id)arg1 ignoreFormulas:(BOOL)arg2 skipDirtyingNonFormulaCells:(BOOL)arg3 calculationEngine:(id)arg4;
- (int)setCellsWithCellMap:(id)arg1 calculationEngine:(id)arg2;
- (struct TSCEFormula *)formulaAtCellID:(struct TSUCellCoord)arg1;
- (int)updateCalculationEngineForFormula:(struct TSCEFormula *)arg1 inCellID:(struct TSUCellCoord)arg2;
- (int)setCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 ignoreFormula:(BOOL)arg3 clearImportWarnings:(BOOL)arg4 calculationEngine:(id)arg5;
- (int)setCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 clearWarnings:(BOOL)arg3;
- (int)setCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)convertFormulasToUidForm:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)convertFormulasToUidForm:(id)arg1 atCellID:(struct TSUCellCoord)arg2 preserveHostCell:(BOOL)arg3;
- (BOOL)hasFormulaAtCellID:(struct TSUCellCoord)arg1;
- (id)cellAtCellID:(struct TSUCellCoord)arg1;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (int)getCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 suppressCellBorder:(BOOL)arg3;
- (BOOL)cellExistsAtCellID:(struct TSUCellCoord)arg1;
- (int)getDefaultCell:(out id)arg1 forCellID:(struct TSUCellCoord)arg2;
- (int)getDefaultCell:(id)arg1 forTableArea:(unsigned long long)arg2;
- (id)tableAreasForCellRange:(struct TSUCellRect)arg1;
- (unsigned long long)tableAreaForColumn:(unsigned char)arg1;
- (unsigned long long)tableAreaForRow:(unsigned short)arg1;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord)arg1;
- (struct TSUCellRect)cellRangeForTableArea:(unsigned long long)arg1;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3 avoidNames:(id)arg4;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2 needsNewName:(BOOL)arg3;
- (void)chooseUniqueNameInContainer:(id)arg1 forPaste:(BOOL)arg2;
- (int)parseNumberFromTableName:(id)arg1;
- (id)bandedFillObject;
- (BOOL)useBandedFill;
- (BOOL)canTranspose;
- (BOOL)hasFilterRulesInColumns:(id)arg1;
- (void)dirtyFilterState;
- (void)filterSetUpdated;
- (BOOL)hasActiveFilters;
- (void)setFilterSetType:(int)arg1;
- (void)enableFilterSet:(BOOL)arg1;
- (void)mutateFormulaFiltersUsingBlock:(CDUnknownBlockType)arg1;
- (void)setNeedsFilterFormulaRewriteForImport:(BOOL)arg1;
- (BOOL)needsFilterFormulaRewriteForImport;
- (id)duplicateFilterSetInUidForm;
- (id)duplicateFilterSet;
- (void)resetSortRuleReferenceTrackerForInsert;
- (id)metadataForColumnIndex:(unsigned char)arg1;
- (id)metadataForRowIndex:(unsigned short)arg1;
- (void)getTextPropertiesWithCell:(id)arg1 cellID:(struct TSUCellCoord)arg2 wraps:(char *)arg3 alignment:(int *)arg4 verticalAlignment:(int *)arg5 padding:(id *)arg6;
- (void)applyWritingDirection:(int)arg1 toCell:(id)arg2 cellID:(struct TSUCellCoord)arg3;
- (int)writingDirectionForCellwithTableDefault:(id)arg1;
@property(readonly, nonatomic) TSCEOwnerUidMapper *identityOwnerUIDMapper;
@property(readonly, nonatomic) TSCEOwnerUidMapper *ownerUIDMapper;
- (void)bakeFormulas;
- (void)setDrawableIsBeingCopied:(BOOL)arg1;
- (void)setStylesheetForUpgradeToSingleStylesheet:(id)arg1;
- (void)upgradeDuringDocumentUpgradeIfNeeded:(unsigned long long)arg1;
- (void)setupDefaultCells;
- (void)resetStyles:(id)arg1;
- (id)allAnnotations;
- (id)commentHostingAtCellID:(struct TSUCellCoord)arg1;
- (id)commentHostingAtCellID:(struct TSUCellCoord)arg1 forCommentStorage:(id)arg2;
- (void)clearCommentHostingMapForCommentStorage:(id)arg1;
- (void)postCommentNotificationForStorage:(id)arg1 atCellID:(struct TSUCellCoord)arg2 notificationKey:(id)arg3;
- (int)removeCommentStorageAtCellID:(struct TSUCellCoord)arg1;
- (int)setCommentStorage:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (BOOL)hasCommentAtCellID:(struct TSUCellCoord)arg1;
- (id)commandToRemoveHyperlinkInRange:(struct _NSRange)arg1 fromCellStorage:(id)arg2;
- (BOOL)isEquivalentForCrossDocumentPasteMasterComparison:(id)arg1 styleComparisonBlock:(CDUnknownBlockType)arg2;
- (void)upgradeFormatsForCustomFormatListU2_0;
- (id)commandToReplaceCustomFormat:(id)arg1 withReplacementFormat:(id)arg2;
- (id)changeDetailsForCustomFormatListDidUpdateToCustomFormat:(id)arg1;
- (void)prepareForPasteWithSourceOffset:(CDStruct_1ef3fb1f)arg1;
- (void)didReplaceTextsInStoragesWithPlaceHolderString;
- (void)p_initializeDefaultHeight:(double)arg1 andWidth:(double)arg2;
- (BOOL)textIsLinked;
- (BOOL)textIsVertical;
- (BOOL)autoListTermination;
- (BOOL)autoListRecognition;
- (void)didCopy;
- (void)willCopyWithOtherDrawables:(id)arg1;
@property(readonly, nonatomic) struct TSUCellRect editingCellRange;
- (void)assertCollaborationConvergence;
- (id)commandForTransformingByTransform:(struct CGAffineTransform)arg1 context:(id)arg2 transformedObjects:(id)arg3 inBounds:(struct CGRect)arg4;
- (BOOL)shouldCancelScrollingToSelectionPath:(id)arg1 forChanges:(id)arg2;
- (id)presetKind;
- (id)collaboratorCursorForSelectionPath:(id)arg1;
- (BOOL)prohibitsModificationToChildren;
- (id)infoForSelectionPath:(id)arg1;
- (id)childInfos;
- (id)trackerForController:(id)arg1;
- (id)mergedContainedStorages;
- (id)promisedDataForType:(id)arg1;
- (id)typesToPromiseWhenCopyingSingleDrawable;
- (id)descriptionForPasteboardWithSource:(id)arg1;
- (id)descriptionForPasteboard;
- (id)p_descriptionOfGeneralInformation;
- (id)p_descriptionOfHeaderFooterAreas;
- (id)p_descriptionOfTableID;
- (void)replaceReferencedStylesUsingBlock:(CDUnknownBlockType)arg1;
- (id)referencedStyles;
- (id)childCommandForReplaceAllCommand:(id)arg1;
- (void)enumerateAllAnnotationsInModelWithHitBlock:(CDUnknownBlockType)arg1;
- (id)searchForAnnotationsWithHitBlock:(CDUnknownBlockType)arg1;
- (id)searchForString:(id)arg1 options:(unsigned long long)arg2 searchCanvasDelegate:(id)arg3 onHit:(CDUnknownBlockType)arg4;
- (void)acceptVisitor:(id)arg1;
- (id)childEnumerator;
- (void)wasRemovedFromDocumentRoot:(id)arg1;
- (void)willBeRemovedFromDocumentRoot:(id)arg1;
- (void)wasAddedToDocumentRoot:(id)arg1 dolcContext:(id)arg2;
- (void)willBeAddedToDocumentRoot:(id)arg1 dolcContext:(id)arg2;
- (BOOL)canAspectRatioLockBeChangedByUser;
- (void)scaleInfoGeometry:(struct CGSize)arg1;
@property(nonatomic) long long contentWritingDirection;
@property(copy, nonatomic) TSDInfoGeometry *geometry; // @dynamic geometry;
- (void)setPrimitiveGeometry:(id)arg1;
- (id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2;
- (void)p_bakeMixedCellStrokesIntoTable:(id)arg1 outgoingTable:(id)arg2 incomingTable:(id)arg3 fraction:(double)arg4;
- (long long)mixingTypeWithObject:(id)arg1 context:(id)arg2;
- (BOOL)suppliesFinalTextures;
- (BOOL)requiresStagesBuildingInReverse;
- (unsigned long long)textureDeliveryStyleFromDeliveryString:(id)arg1;
- (id)textureDeliveryStylesLocalized:(BOOL)arg1 animationFilter:(id)arg2;
- (unsigned long long)chunkCountForTextureDeliveryStyle:(unsigned long long)arg1 animationFilter:(id)arg2;
- (void)p_performCommentStorageDOLC:(id)arg1;
- (id)applyCellDiff:(id)arg1 atCellID:(struct TSUCellCoord)arg2 migrationMap:(id)arg3 inverseCellDiff:(id)arg4 defaultCellStyle:(id)arg5 defaultTextStyle:(id)arg6;
- (id)applyCellDiff:(id)arg1 atCellID:(struct TSUCellCoord)arg2 migrationMap:(id)arg3;
@property(copy, nonatomic) TSTTableFilterSet *filterSet;
- (vector_dadc1b26)columnUIDs;
- (vector_dadc1b26)rowUIDs;
- (id)allRichTextPayloadStorages;
- (BOOL)hasFormulas;
- (id)grabAllMergeRanges;
- (id)allMergeRanges;
- (BOOL)hasMergeRanges;
- (unsigned int)numberOfPopulatedCells;
- (id)newCell;
- (unsigned long long)numberOfComments;
- (Class)dataStoreIteratorClass;
- (Class)editorClass;
- (Class)layoutClass;
- (Class)repClass;
@property(nonatomic) BOOL wasUnarchivedFromAProvidedTable;
@property(nonatomic) BOOL presetNeedsStrongOwnership;
@property(readonly, nonatomic) TSTStrokeSidecar *strokeSidecar;
@property(readonly, nonatomic) TSTHiddenStateIndexSet *hiddenColumns;
@property(readonly, nonatomic) TSTHiddenStateIndexSet *userHiddenRows;
@property(readonly, nonatomic) TSTHiddenStateIndexSet *hiddenRows;
@property(readonly, nonatomic) TSTSortRuleReferenceTracker *sortRuleReferenceTracker;
@property(copy, nonatomic) TSTTableSortOrder *sortOrder;
@property(readonly, nonatomic) TSTHiddenStateFormulaOwner *hiddenStateFormulaOwnerForColumns;
@property(readonly, nonatomic) TSTHiddenStateFormulaOwner *hiddenStateFormulaOwnerForRows;
@property(readonly, nonatomic) TSTMergeOwner *mergeOwner;
@property(readonly, nonatomic) UUIDData_5fbc143e conditionalStyleFormulaOwnerUID;
@property(readonly, nonatomic) TSTConditionalStyleFormulaOwner *conditionalStyleFormulaOwner;
@property(readonly, nonatomic) TSCECellCoordinateVector *cellsToInvalidateNonoverflowingAfterRecalc;
@property(readonly, nonatomic) TSCECellCoordinateVector *cellsToInvalidateAfterRecalc;
@property(readonly, nonatomic) TSTCellDictionary *cellsPendingWrite;
@property(retain, nonatomic) TSTImportWarningSetByCoordinateMap *warningSetsForUndo;
@property(retain, nonatomic) TSCEOwnerFormulaMap *formulasForUndo;
@property(readonly, nonatomic) TSTCell *defaultFooterRowCell;
@property(readonly, nonatomic) TSTCell *defaultHeaderColumnCell;
@property(readonly, nonatomic) TSTCell *defaultHeaderRowCell;
@property(readonly, nonatomic) TSTCell *defaultBodyCell;
@property(retain, nonatomic) TSWPShapeStyle *tableNameShapeStyle;
@property(retain, nonatomic) TSWPParagraphStyle *tableNameStyle;
@property(retain, nonatomic) TSWPParagraphStyle *footerRowTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *headerColumnTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *headerRowTextStyle;
@property(retain, nonatomic) TSWPParagraphStyle *bodyTextStyle;
@property(retain, nonatomic) TSTCellStyle *footerRowCellStyle;
@property(retain, nonatomic) TSTCellStyle *headerColumnCellStyle;
@property(retain, nonatomic) TSTCellStyle *headerRowCellStyle;
@property(retain, nonatomic) TSTCellStyle *bodyCellStyle;
@property(retain, nonatomic) TSTTableStyle *tableStyle;
@property(retain, nonatomic) TSTTableStylePreset *tableStylePreset;
@property(nonatomic) BOOL styleApplyClearsAll;
@property(readonly, nonatomic) BOOL hasAlternatingRows;
@property(readonly, nonatomic) BOOL hasTableBorder;
@property(readonly, nonatomic) int tableWritingDirection;
@property(nonatomic) BOOL repeatingHeaderColumnsEnabled;
@property(nonatomic) BOOL repeatingHeaderRowsEnabled;
@property(readonly, nonatomic) TSDStroke *tableNameBorderStroke;
@property(nonatomic) BOOL tableNameBorderEnabled;
@property(nonatomic) double tableNameHeight;
@property(nonatomic) BOOL tableNameEnabled;
@property(retain, nonatomic) NSString *tableName;
@property(nonatomic) double defaultColumnWidth;
@property(nonatomic) double defaultRowHeight;
@property(readonly, nonatomic) unsigned short numberOfFilteredRows;
@property(readonly, nonatomic) unsigned short numberOfUserHiddenColumns;
@property(readonly, nonatomic) unsigned short numberOfUserHiddenRows;
@property(readonly, nonatomic) unsigned short numberOfHiddenColumns;
@property(readonly, nonatomic) unsigned short numberOfHiddenRows;
@property(nonatomic) BOOL headerColumnsFrozen;
@property(nonatomic) BOOL headerRowsFrozen;
@property(nonatomic) unsigned short numberOfFooterRows;
@property(nonatomic) unsigned short numberOfHeaderColumns;
@property(nonatomic) unsigned short numberOfHeaderRows;
@property(nonatomic) unsigned short numberOfColumns;
@property(nonatomic) unsigned short numberOfRows;
@property(nonatomic) BOOL wasCut;
@property(readonly, nonatomic) NSUUID *nsTableUID;
- (void)clearFromTableUID;
@property(nonatomic) UUIDData_5fbc143e fromTableUID;
@property(nonatomic) UUIDData_5fbc143e tableUID;
@property(nonatomic) TSCECalculationEngine *calcEngine;
@property(readonly, nonatomic) BOOL supportsRichTextUndo;
- (BOOL)supportsAttachedComments;
- (int)elementKind;
@property(readonly, nonatomic) TSTActionVerifier *actionVerifier; // @synthesize actionVerifier=_actionVerifier;
- (id)p_masterLayoutCreateIfNeeded:(BOOL)arg1;
- (void)clearPartitioner;
- (BOOL)isSelectable;
- (BOOL)supportsHyperlinks;
@property(readonly, nonatomic) struct TSUCellCoord previousEditingCellID;
@property(nonatomic) struct TSUCellCoord editingCellID;
- (Class)drawableSelectionTransformerClass;
- (Class)tableModelClass;
- (BOOL)isSafeToConvertToText;
- (BOOL)isSafeToConvertToAttributedString;
- (BOOL)isSafeToConvertToImageForImagePaste;
- (BOOL)isSafeToConvertToImage;
- (double)masterLayoutEffectiveTableNameHeight;
- (void)shiftGeometryToIncludeTableNameHeight;
- (id)componentRootObject;
- (id)additionalObjectsToCopy;
- (id)p_negativeImageFill;
- (id)p_positiveImageFill;
- (void)p_setFillOnCell:(id)arg1 positive:(BOOL)arg2;
- (void)p_setFormula:(struct TSCEFormula)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)p_setFormulaWithSymbolString:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)p_setFormulaWithSymbolCellCoord:(struct TSUCellCoord)arg1 andAttributeCellCoord:(struct TSUCellCoord)arg2 atCellID:(struct TSUCellCoord)arg3;
- (void)p_setPopupMenuOnCell:(id)arg1 withItems:(id)arg2 andSelectedIndex:(double)arg3;
- (id)p_popupItemsForStrings:(id)arg1;
- (id)p_stockAttributesForDisplayArray;
- (void)p_setCell:(id)arg1 atColumn:(unsigned char)arg2 andRow:(unsigned short)arg3;
- (void)p_setupTableModelforStockPrototype;
- (void)p_setupTableModelforStockSwatch;
- (void)setupTableModelForPrototypeIndex:(long long)arg1 forTableInsertOnly:(BOOL)arg2;
@property(readonly, copy) NSString *description;
- (id)copyWithContext:(id)arg1;
- (void)dealloc;
- (void)willClose;
- (void)releaseMasterLayout;
- (id)initWithContext:(id)arg1 fromSourceInfo:(id)arg2 cellRegion:(id)arg3 tableModel:(id)arg4 waitForCalcEngine:(BOOL)arg5;
- (id)initWithContext:(id)arg1 fromSourceInfo:(id)arg2 cellRegion:(id)arg3 waitForCalcEngine:(BOOL)arg4;
- (id)initWithContext:(id)arg1 otherTableInfo:(id)arg2;
- (id)initWithContext:(id)arg1 geometry:(id)arg2;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 styles:(id)arg3;
- (id)initForTestingWithContext:(id)arg1 rows:(unsigned short)arg2 columns:(unsigned char)arg3;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4 stylePreset:(id)arg5;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4 styles:(id)arg5;
- (id)initWithContext:(id)arg1 geometry:(id)arg2 rows:(unsigned short)arg3 columns:(unsigned short)arg4 stylePreset:(id)arg5 styles:(id)arg6;
- (id)bandedFillForSourceRowNumber:(int)arg1 sourceCellFill:(id)arg2;
- (id)newCellAtID:(struct TSUCellCoord)arg1;
- (id)compatibilityConverterForData:(id)arg1 associatedHint:(id)arg2 desiredCompatibilityLevel:(long long)arg3;
- (long long)mediaCompatibilityTypeForData:(id)arg1 associatedHint:(id)arg2;
- (id)compatibilityCheckerForData:(id)arg1 associatedHint:(id)arg2;
- (id)commandsForReplacingMediaInOldToNewDictionary:(id)arg1 associatedHints:(id)arg2;
- (id)p_combinedTableInfoHintFromReplacementDictionary:(id)arg1 andHintsDictionary:(id)arg2;
- (id)p_propertyMapForReplacingImageFill:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (struct CGSize)targetSizeForImageData:(id)arg1 associatedHint:(id)arg2;
@property(readonly, nonatomic) NSDictionary *datasForReplacingMediaContentsWithAssociatedHints;
- (id)p_imageFillAtCellID:(struct TSUCellCoord)arg1;
- (id)mergedStorageRepresentation;
- (id)cellTextStyle:(struct TSUCellCoord)arg1;
- (struct TSCERangeCoordinate)preMergeRangeFromUidTract:(id)arg1;
- (struct TSCERangeCoordinate)resolverExpandCellRangeToCoverMergedCells:(struct TSCERangeCoordinate)arg1;
- (id)UIDSetForRange:(struct _NSRange)arg1 isRows:(BOOL)arg2;
- (vector_dadc1b26)UIDsForRange:(struct _NSRange)arg1 isRows:(BOOL)arg2;
- (id)indexesForUIDs:(const vector_dadc1b26 *)arg1 isRows:(BOOL)arg2;
- (vector_dadc1b26)UIDsForIndexes:(id)arg1 isRows:(BOOL)arg2;
- (unsigned short)indexForUID:(const UUIDData_5fbc143e *)arg1 isRows:(BOOL)arg2;
- (UUIDData_5fbc143e)UIDForIndex:(unsigned short)arg1 isRows:(BOOL)arg2;
- (vector_dadc1b26)allColumnUIDs;
- (vector_dadc1b26)allRowUIDs;
- (BOOL)hasNamesInHeaders;
- (void)resetAllFormulaDependenciesForCell:(struct TSUCellCoord)arg1;
- (void)resetDependenciesForCell:(struct TSUCellCoord)arg1;
- (BOOL)cellWasModifiedInThisRecalcCycle:(struct TSUCellCoord)arg1;
- (struct TSCERangeCoordinate)apparentRangeForRange:(struct TSCERangeCoordinate)arg1 rangeContext:(unsigned char)arg2;
- (struct TSCERangeCoordinate)footerRangeCoordinate;
- (struct TSCERangeCoordinate)tableRangeCoordinate;
- (struct TSCERangeCoordinate)bodyRangeCoordinate;
- (struct TSCETableReference)makeReference:(struct TSUCellCoord)arg1 bottomRight:(struct TSUCellCoord)arg2;
- (id)cellRangeName:(struct TSCERangeCoordinate)arg1 stickyBits:(unsigned char)arg2 suppressIdenticalEndReference:(BOOL)arg3 quoteComponents:(BOOL)arg4 forceEscaping:(BOOL)arg5 rangeNameContainsColumnOrRowName:(out char *)arg6;
- (id)sheetName;
- (UUIDData_5fbc143e)mergeOwnerUID;
- (BOOL)resolverIsATable;
- (UUIDData_5fbc143e)resolverUID;
- (id)stringAtCellID:(struct TSUCellCoord)arg1;
- (id)conditionalStyleFormulaDescriptionAtCellID:(struct TSUCellCoord)arg1;
- (id)formulaDescriptionAtCellID:(struct TSUCellCoord)arg1;
- (void)setConditionalStyleWithCellRef:(const struct TSCECellRef *)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)setConditionalStyleSet:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)setString:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)setDate:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)setCurrency:(double)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)setDouble:(double)arg1 atCellID:(struct TSUCellCoord)arg2;
- (void)setFormula:(struct TSCEFormulaCreator)arg1 atCellID:(struct TSUCellCoord)arg2;
- (id)newProxyWithEditor:(id)arg1 documentRoot:(id)arg2;
- (void)coalesceChanges:(id)arg1;
- (id)tableTileSliceIdAtIndex:(unsigned long long)arg1;
- (id)tabularTextRepresentation;
- (void)iterateCellsInRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 clampingRange:(struct TSUCellRect)arg4 usingBlock:(CDUnknownBlockType)arg5;
- (void)iterateCellsInRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)iterateCellsInRange:(struct TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)iterateCellsWithFlags:(unsigned long long)arg1 searchFlags:(unsigned long long)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (void)p_iterateCellsAndTerminateWithIterator:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)cellIteratorWithRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 clampingRange:(struct TSUCellRect)arg4;
- (id)cellIteratorWithRegion:(id)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3;
- (id)cellIteratorWithRange:(struct TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3;
- (id)cellIteratorWithFlags:(unsigned long long)arg1 searchFlags:(unsigned long long)arg2;
- (id)textualEquivalent;
- (id)webArchiveRepresentationWithPromise:(id)arg1;
- (id)htmlRepresentationWithPromise:(id)arg1;
- (id)rtfdRepresentationWithPromise:(id)arg1;
- (id)rtfRepresentationWithPromise:(id)arg1;
- (id)p_representationWithPromise:(id)arg1 includingInlineDrawables:(BOOL)arg2 usingBlock:(CDUnknownBlockType)arg3;
- (id)p_attributedStringRepresentationIncludingInlineDrawables:(BOOL)arg1;
- (id)p_attributedStringForCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 mergeRange:(struct TSUCellRect)arg3 layout:(id)arg4 textTable:(id)arg5 includingInlineDrawables:(BOOL)arg6 attributedStringCache:(id)arg7;
- (void)p_mapTextBlockBorderStyle:(id)arg1 fromCellRange:(struct TSUCellRect)arg2;
- (id)p_attributedStringForCellContentsAtCellID:(struct TSUCellCoord)arg1;
- (id)p_attributedStringForCellContents:(id)arg1 atCellID:(struct TSUCellCoord)arg2 includingInlineDrawables:(BOOL)arg3 attributedStringCache:(id)arg4;
- (void)updateCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 fromAttributedString:(id)arg3 andTextTableBlock:(id)arg4 pasteSource:(int)arg5 styleMapper:(id)arg6 pasteAsPlainTextRules:(BOOL)arg7;
- (void)updateCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2 fromAttributedString:(id)arg3 styleMapper:(id)arg4 pasteAsPlainTextRules:(BOOL)arg5;
- (id)objectToArchiveInDependencyTracker;
- (id)endRewriteForCalculationEngine:(id)arg1 spec:(id)arg2;
- (void)beginRewriteForCalculationEngine:(id)arg1 spec:(id)arg2;
- (void)rewriteForCalculationEngine:(id)arg1 formulaID:(CDStruct_ed6d627d)arg2 rewriteSpec:(id)arg3;
- (void)invalidateForCalculationEngine:(id)arg1;
- (void)writeResultsForCalculationEngine:(id)arg1;
- (CDStruct_2c3aca9f)recalculateForCalculationEngine:(id)arg1 formulaID:(CDStruct_ed6d627d)arg2 isInCycle:(BOOL)arg3 hasCalculatedPrecedents:(BOOL)arg4;
- (void)notifyTableOfNewResults;
- (void)performReadForOneOffFormulaEvaluation:(id)arg1 forCellID:(struct TSUCellCoord *)arg2;
- (void)unregisterFromCalculationEngine:(id)arg1;
- (int)registerWithCalculationEngine:(id)arg1;
- (BOOL)isRegisteredWithCalculationEngine:(id)arg1;
- (BOOL)registerLast;
- (UUIDData_5fbc143e)formulaOwnerUID;
- (void)registerWithCalculationEngineForDocumentLoad:(id)arg1;
- (_Bool)isCellInBandedRow:(int)arg1;
- (_Bool)isHeaderColumn:(int)arg1;
- (_Bool)isFooterRow:(int)arg1;
- (_Bool)isHeaderRow:(int)arg1;
- (int)cellTypeForRow:(int)arg1 column:(int)arg2;

// Remaining properties
@property(readonly, nonatomic, getter=isAnchoredToText) BOOL anchoredToText; // @dynamic anchoredToText;
@property(readonly, nonatomic, getter=isAttachedToBodyText) BOOL attachedToBodyText;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, nonatomic, getter=isFloatingAboveText) BOOL floatingAboveText; // @dynamic floatingAboveText;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic, getter=isInlineWithText) BOOL inlineWithText; // @dynamic inlineWithText;
@property(nonatomic) BOOL matchesObjectPlaceholderGeometry;
@property(nonatomic) TSPObject<TSDOwningAttachment> *owningAttachment; // @dynamic owningAttachment;
@property(readonly, nonatomic) TSPObject<TSDOwningAttachment> *owningAttachmentNoRecurse; // @dynamic owningAttachmentNoRecurse;
@property(nonatomic) NSObject<TSDContainerInfo> *parentInfo; // @dynamic parentInfo;
@property(readonly) Class superclass;

@end

