//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import "TSKSelection.h"

#import "TSDTextSelection-Protocol.h"

@class NSString, TSTCellRegion;

@interface TSTCellSelection : TSKSelection <TSDTextSelection>
{
    long long mSelectionType;
    struct TSUCellCoord mAnchorCellID;
    TSTCellRegion *mCellRegion;
    TSTCellRegion *mBaseRegion;
    struct TSUCellCoord mCursorCellID;
    struct _NSRange mSearchReferenceRange;
}

+ (Class)archivedSelectionClass;
+ (id)selectionWithTableModel:(id)arg1 columnIndices:(id)arg2;
+ (id)selectionWithTableModel:(id)arg1 rowIndices:(id)arg2;
+ (id)selectionWithTableModel:(id)arg1 cellRegion:(id)arg2;
+ (id)selectionWithTableModel:(id)arg1 cellUID:(const struct TSTCellUID *)arg2;
+ (id)selectionWithTableModel:(id)arg1 cellID:(struct TSUCellCoord)arg2;
@property(nonatomic) struct _NSRange searchReferenceRange; // @synthesize searchReferenceRange=mSearchReferenceRange;
@property(readonly, nonatomic) struct TSUCellCoord cursorCellID; // @synthesize cursorCellID=mCursorCellID;
@property(readonly, nonatomic) TSTCellRegion *baseRegion; // @synthesize baseRegion=mBaseRegion;
@property(readonly, nonatomic) struct TSUCellCoord anchorCellID; // @synthesize anchorCellID=mAnchorCellID;
@property(readonly, nonatomic) long long selectionType; // @synthesize selectionType=mSelectionType;
@property(readonly, nonatomic) TSTCellRegion *cellRegion; // @synthesize cellRegion=mCellRegion;
@property(readonly, nonatomic) BOOL isAtEndOfLine;
@property(readonly, nonatomic) struct _NSRange range;
- (BOOL)intersectsPartialMergeRangeInTable:(id)arg1;
@property(readonly, copy) NSString *description;
- (BOOL)canEditWithControlCellSubselectionInTable:(id)arg1;
- (BOOL)canEditWithCellSubselectionInTable:(id)arg1;
- (BOOL)containsSingleCellOrMergeInTable:(id)arg1;
- (BOOL)containsCell:(struct TSUCellCoord)arg1;
- (BOOL)containsSelection:(id)arg1;
- (BOOL)areCellsInTheSameRegionInTable:(id)arg1;
- (BOOL)isEqualToSelection:(id)arg1;
- (BOOL)isEqual:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)remove:(long long)arg1 atIndex:(unsigned short)arg2 count:(unsigned short)arg3;
- (void)insert:(long long)arg1 atIndex:(unsigned short)arg2 count:(unsigned short)arg3;
- (void)setCellRange:(struct TSUCellRect)arg1;
- (id)selectionAdjustedForGeometryInTableInfo:(id)arg1;
- (id)selectionAdjustedForColumnVisibilityInTableInfo:(id)arg1;
- (id)selectionAdjustedForRowVisibilityInTableInfo:(id)arg1;
- (id)p_cellSelectionByMovingInTableInfo:(id)arg1 inDirection:(int)arg2 withModifierKeys:(int)arg3 forReferenceMove:(BOOL)arg4 suppressWrap:(BOOL)arg5 outAddControlCellSelection:(char *)arg6;
- (id)selectionsByMovingInTableInfo:(id)arg1 inDirection:(int)arg2 withModifierKeys:(int)arg3 forReferenceMove:(BOOL)arg4 suppressWrap:(BOOL)arg5;
- (id)selectionsByMovingInTableInfo:(id)arg1 inDirection:(int)arg2 withModifierKeys:(int)arg3 forReferenceMove:(BOOL)arg4;
- (id)selectionByRemovingCellRange:(struct TSUCellRect)arg1 inTable:(id)arg2 withAnchor:(struct TSUCellCoord)arg3 cursor:(struct TSUCellCoord)arg4 selectionType:(long long)arg5;
- (id)selectionByAddingCellRange:(struct TSUCellRect)arg1 inTable:(id)arg2 withAnchor:(struct TSUCellCoord)arg3 cursor:(struct TSUCellCoord)arg4 selectionType:(long long)arg5;
- (id)selectionByExtendingWithCellRange:(struct TSUCellRect)arg1 inTable:(id)arg2 selectionType:(long long)arg3 cursorCell:(struct TSUCellCoord)arg4;
- (void)saveToArchive:(struct SelectionArchive *)arg1 archiver:(id)arg2;
- (id)initWithArchive:(const struct SelectionArchive *)arg1 unarchiver:(id)arg2;
@property(readonly, nonatomic) unsigned long long cellCount; // @dynamic cellCount;
- (void)dealloc;
- (id)initWithTableModel:(id)arg1 columnIndices:(id)arg2;
- (id)initWithTableModel:(id)arg1 rowIndices:(id)arg2;
- (id)initWithTableModel:(id)arg1 cellRegion:(id)arg2;
- (id)initWithTableModel:(id)arg1 andPreviousSelection:(id)arg2 offsetBy:(CDStruct_1ef3fb1f)arg3;
- (id)initWithTableModel:(id)arg1 rowOrColumn:(long long)arg2 index:(unsigned int)arg3 count:(unsigned int)arg4;
- (id)initWithTableModel:(id)arg1 startingColumnIndex:(unsigned short)arg2 numberOfColumns:(unsigned short)arg3;
- (id)initWithTableModel:(id)arg1 startingRowIndex:(unsigned short)arg2 numberOfRows:(unsigned short)arg3;
- (id)initWithTableModel:(id)arg1 andCellID:(struct TSUCellCoord)arg2;
- (id)initWithTableModel:(id)arg1 cellID:(struct TSUCellCoord)arg2 selectionType:(long long)arg3;
- (id)initWithTableModel:(id)arg1 andCellRange:(struct TSUCellRect)arg2;
- (id)initWithTableModel:(id)arg1 selectionType:(long long)arg2;
- (id)initWithTableModel:(id)arg1 cellRange:(struct TSUCellRect)arg2 type:(long long)arg3 anchorCellID:(struct TSUCellCoord)arg4 cursorCellID:(struct TSUCellCoord)arg5;
- (id)initWithTableModel:(id)arg1 cellRegion:(id)arg2 anchorCellID:(struct TSUCellCoord)arg3 cursorCellID:(struct TSUCellCoord)arg4;
- (id)initWithTableModel:(id)arg1 cellRegion:(id)arg2 anchorCellID:(struct TSUCellCoord)arg3 cursorCellID:(struct TSUCellCoord)arg4 selectionType:(long long)arg5;
- (id)initWithTableModel:(id)arg1 cellRegion:(id)arg2 anchorCellID:(struct TSUCellCoord)arg3 cursorCellID:(struct TSUCellCoord)arg4 baseRegion:(id)arg5;
- (id)initWithTableModel:(id)arg1 cellRegion:(id)arg2 anchorCellID:(struct TSUCellCoord)arg3 cursorCellID:(struct TSUCellCoord)arg4 baseRegion:(id)arg5 selectionType:(long long)arg6;
- (id)p_cellSelectionWithTableModel:(id)arg1 cellRange:(struct TSUCellRect)arg2 cursorCellID:(struct TSUCellCoord)arg3;
- (struct TSUCellRect)p_adjustedCellRangeForTableArea:(unsigned long long)arg1 inTable:(id)arg2;
- (id)p_adjustedTableAreasForCellRange:(struct TSUCellRect)arg1 inTable:(id)arg2;
- (unsigned long long)p_adjustedTableAreaForCellID:(struct TSUCellCoord)arg1 inTable:(id)arg2;
- (unsigned long long)p_tableAreaForExtendingToEndOfCellRange:(struct TSUCellRect)arg1 inTable:(id)arg2;
- (unsigned long long)p_tableAreaForExtendingToStartOfCellRange:(struct TSUCellRect)arg1 inTable:(id)arg2;
- (unsigned long long)p_tableAreaForExtendingToHorizontalBoundOfCellRange:(struct TSUCellRect)arg1 inTable:(id)arg2 priorityBlock:(CDUnknownBlockType)arg3;
- (BOOL)p_tableAreasContainHeaderColumnOrBody:(id)arg1;
- (BOOL)p_tableAreasContainBodyAndHeaderColumnCells:(id)arg1;
- (unsigned long long)p_fillAxisForCurrentRange:(struct TSUCellRect)arg1 proposedRange:(struct TSUCellRect)arg2;
- (BOOL)p_canFillHorizontalWithSelectedTableAreas:(id)arg1;
- (BOOL)p_canFillVerticalWithSelectedTableAreas:(id)arg1;
- (BOOL)p_selectedRange:(struct TSUCellRect)arg1 isEligibleForFillInAxis:(unsigned long long)arg2 inTable:(id)arg3;
- (BOOL)p_isValidNextFillModeSelection:(id)arg1 inTable:(id)arg2;
- (id)p_selectionByExtendingToEndOfAreaInTable:(id)arg1;
- (id)fillModeSelectionByExtendingToEndOfAreaInTable:(id)arg1;
- (BOOL)canExtendToEndOfAreaInTable:(id)arg1;
- (id)p_selectionByExtendingToStartOfAreaInTable:(id)arg1;
- (id)fillModeSelectionByExtendingToStartOfAreaInTable:(id)arg1;
- (BOOL)canExtendToStartOfAreaInTable:(id)arg1;
- (id)p_selectionByExtendingToTopOfAreaInTable:(id)arg1;
- (id)fillModeSelectionByExtendingToTopOfAreaInTable:(id)arg1;
- (BOOL)canExtendToTopOfAreaInTable:(id)arg1;
- (id)p_selectionByExtendingToBottomOfAreaInTable:(id)arg1;
- (id)fillModeSelectionByExtendingToBottomOfAreaInTable:(id)arg1;
- (BOOL)canExtendToBottomOfAreaInTable:(id)arg1;
- (id)p_selectionByAppendingColumnInTable:(id)arg1;
- (id)fillModeSelectionByAppendingColumnInTable:(id)arg1;
- (BOOL)canAppendColumnInTable:(id)arg1;
- (id)p_selectionByPrependingColumnInTable:(id)arg1;
- (id)fillModeSelectionByPrependingColumnInTable:(id)arg1;
- (BOOL)canPrependColumnInTable:(id)arg1;
- (id)p_selectionByAppendingRowInTable:(id)arg1;
- (id)fillModeSelectionByAppendingRowInTable:(id)arg1;
- (BOOL)canAppendRowInTable:(id)arg1;
- (id)p_selectionByPrependingRowInTable:(id)arg1;
- (id)fillModeSelectionByPrependingRowInTable:(id)arg1;
- (BOOL)canPrependRowInTable:(id)arg1;
- (BOOL)isValidForFillModeInTable:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

