//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Jun  9 2015 22:53:21).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2014 by Steve Nygard.
//

#import <objc/NSObject.h>

#import "TSDKeyValueProxyVending-Protocol.h"
#import "TSKChangeSourceObserver-Protocol.h"
#import "TSTTableHiddenRowColumnProviding-Protocol.h"
#import "TSTTableInternalGeometryProviding-Protocol.h"
#import "TSTTableMergeRangeProviding-Protocol.h"

@class NSIndexSet, NSMutableArray, NSMutableSet, NSPointerArray, NSString, TSDFill, TSDInfoGeometry, TSDLayoutGeometry, TSKChangeNotifier, TSTCellRegion, TSTCellSelection, TSTConcurrentMutableIndexSet, TSTDupContentCache, TSTHiddenRowsColumnsCache, TSTInfo, TSTLayout, TSTLayoutDynamicResizeInfo, TSTMergeRangeSortedSet, TSTRWRetainedPointerKeyDictionary, TSTStrokeDefaultVendor, TSTStrokeWidthCache, TSTTableModel, TSTWPColumnCache, TSTWidthHeightCache, TSUColor, TSUWidthLimitedQueue;
@protocol OS_dispatch_group, TSTLayoutDynamicCellFillProtocol, TSTLayoutDynamicColumnMoveProtocol, TSTLayoutDynamicContentProtocol, TSTLayoutDynamicRowMoveProtocol;

@interface TSTMasterLayout : NSObject <TSDKeyValueProxyVending, TSTTableHiddenRowColumnProviding, TSTTableInternalGeometryProviding, TSTTableMergeRangeProviding, TSKChangeSourceObserver>
{
    TSKChangeNotifier *mChangeNotifier;
    int mReferenceCount;
    TSTInfo *mTableInfo;
    TSTWPColumnCache *mCellIDToWPColumnCache;
    TSTDupContentCache *mDupContentCache;
    TSTWPColumnCache *mTempWPColumnCache;
    TSTWidthHeightCache *mWidthHeightCache;
    TSTHiddenRowsColumnsCache *mHiddenRowsColumnsCache;
    NSMutableArray *mChangeDescriptors;
    NSObject<OS_dispatch_group> *mLayoutInFlight;
    TSUWidthLimitedQueue *mLayoutQueue;
    unsigned int mMaxConcurrentTasks;
    unsigned int mNumCellsPerTask;
    BOOL mHeaderColumnsFrozen;
    BOOL mHeaderRowsFrozen;
    BOOL mHeaderColumnsRepeat;
    BOOL mHeaderRowsRepeat;
    BOOL mTableNameEnabled;
    struct CGRect mTableNameBounds;
    double mCachedTableNameHeight;
    BOOL mTableNameHeightValid;
    unsigned short mCachedNumberOfHeaderColumns;
    unsigned long long mCachedMaxNumberOfColumns;
    unsigned short mCachedNumberOfHeaderRows;
    unsigned short mCachedNumberOfFooterRows;
    unsigned long long mCachedMaxNumberOfRows;
    TSTStrokeDefaultVendor *mStrokesDefaultVendor;
    NSPointerArray *mTopRowStrokes;
    NSPointerArray *mBottomRowStrokes;
    NSPointerArray *mLeftColumnStrokes;
    NSPointerArray *mRightColumnStrokes;
    TSTConcurrentMutableIndexSet *mSpillStrokeColumns;
    TSTCellRegion *mCellRegionForClearedMergeStrokes;
    struct _opaque_pthread_rwlock_t mStrokesRWLock;
    TSTStrokeWidthCache *mColumnToStrokeWidthCache;
    TSTStrokeWidthCache *mRowToStrokeHeightCache;
    TSTRWRetainedPointerKeyDictionary *mParaStyleToHeightCache;
    struct _opaque_pthread_rwlock_t mContentRWLock;
    NSMutableSet *mContentReadingThreads;
    BOOL mBandedFillIsValid;
    BOOL mUseBandedFill;
    TSDFill *mBandedFillObject;
    int mTableEnvironment;
    int mTableRowsBehavior;
    BOOL mTableDefaultFontHeightsAreValid;
    double mTableDefaultFontHeightForArea[5];
    BOOL mInDynamicLayoutMode;
    NSMutableSet *mDynamicLayoutParticipants;
    double mDynamicAddOrRemoveColumnElementSize;
    double mDynamicAddOrRemoveRowElementSize;
    BOOL mDynamicBandedFill;
    BOOL mDynamicBandedFillSetting;
    int mDynamicColumnAdjustment;
    id <TSTLayoutDynamicColumnMoveProtocol> mDynamicColumnMoveDelegate;
    double mDynamicColumnTabSize;
    id <TSTLayoutDynamicContentProtocol> mDynamicContentDelegate;
    TSUColor *mDynamicFontColor;
    struct TSUCellRect mDynamicFontColorCellRange;
    struct TSUCellRect mDynamicHidingRowsCols;
    long long mDynamicHidingRowsColsDirection;
    struct TSUCellRect mDynamicHidingContent;
    struct TSUCellRect mDynamicHidingText;
    TSDInfoGeometry *mDynamicInfoGeometry;
    BOOL mDynamicRepResize;
    BOOL mDynamicRepressFrozenHeaderRows;
    BOOL mDynamicRepressFrozenHeaderColumns;
    BOOL mDynamicResizingColumns;
    struct TSUCellRect mDynamicResizingColumnRange;
    double mDynamicResizingColumnAdjustment;
    BOOL mDynamicResizingRows;
    struct TSUCellRect mDynamicResizingRowRange;
    double mDynamicResizingRowAdjustment;
    struct TSUCellRect mDynamicRevealingRowsCols;
    long long mDynamicRevealingRowsColsDirection;
    int mDynamicRowAdjustment;
    id <TSTLayoutDynamicRowMoveProtocol> mDynamicRowMoveDelegate;
    double mDynamicRowTabSize;
    TSDLayoutGeometry *mDynamicSavedLayoutGeometry;
    TSTCellSelection *mDynamicSelection;
    double mDynamicWidthResize;
    double mDynamicHeightResize;
    double mDynamicTableNameResize;
    TSTLayoutDynamicResizeInfo *mDynamicResizeInfo;
    struct TSUCellCoord mDynamicSuppressingConditionalStylesCellID;
    id <TSTLayoutDynamicCellFillProtocol> mDynamicCellFillDelegate;
    BOOL mEmptyFilteredTable;
    TSTMergeRangeSortedSet *mMergeRanges;
    BOOL mProcessHiddenRowsForExport;
    struct CGSize mMaximumPartitionSize;
}

+ (int)tableRowsBehaviorForTable:(id)arg1 andEnvironment:(int)arg2;
+ (double)effectiveTableNameHeightForModel:(id)arg1;
+ (struct CGSize)tableNameTextSize:(id)arg1;
+ (id)tableNameTextEngine:(id)arg1;
@property(retain, nonatomic) TSKChangeNotifier *changeNotifier; // @synthesize changeNotifier=mChangeNotifier;
@property(nonatomic) struct CGSize maximumPartitionSize; // @synthesize maximumPartitionSize=mMaximumPartitionSize;
@property(nonatomic) BOOL processHiddenRowsForExport; // @synthesize processHiddenRowsForExport=mProcessHiddenRowsForExport;
@property(retain, nonatomic) TSTMergeRangeSortedSet *mergeRanges; // @synthesize mergeRanges=mMergeRanges;
@property(readonly, nonatomic) NSMutableArray *changeDescriptors; // @synthesize changeDescriptors=mChangeDescriptors;
@property(readonly, nonatomic) struct TSUCellCoord dynamicSuppressingConditionalStylesCellID; // @synthesize dynamicSuppressingConditionalStylesCellID=mDynamicSuppressingConditionalStylesCellID;
@property(readonly, nonatomic) double dynamicTableNameResize; // @synthesize dynamicTableNameResize=mDynamicTableNameResize;
@property(readonly, nonatomic) TSTCellSelection *dynamicSelection; // @synthesize dynamicSelection=mDynamicSelection;
@property(copy, nonatomic) TSDLayoutGeometry *dynamicSavedLayoutGeometry; // @synthesize dynamicSavedLayoutGeometry=mDynamicSavedLayoutGeometry;
@property(readonly, nonatomic) double dynamicRowTabSize; // @synthesize dynamicRowTabSize=mDynamicRowTabSize;
@property(readonly, nonatomic) int dynamicRowAdjustment; // @synthesize dynamicRowAdjustment=mDynamicRowAdjustment;
@property(readonly, nonatomic) struct TSUCellRect dynamicResizingRowRange; // @synthesize dynamicResizingRowRange=mDynamicResizingRowRange;
@property(readonly, nonatomic) double dynamicResizingRowAdjustment; // @synthesize dynamicResizingRowAdjustment=mDynamicResizingRowAdjustment;
@property(readonly, nonatomic) BOOL dynamicResizingRows; // @synthesize dynamicResizingRows=mDynamicResizingRows;
@property(readonly, nonatomic) struct TSUCellRect dynamicResizingColumnRange; // @synthesize dynamicResizingColumnRange=mDynamicResizingColumnRange;
@property(readonly, nonatomic) double dynamicResizingColumnAdjustment; // @synthesize dynamicResizingColumnAdjustment=mDynamicResizingColumnAdjustment;
@property(readonly, nonatomic) BOOL dynamicResizingColumns; // @synthesize dynamicResizingColumns=mDynamicResizingColumns;
@property(nonatomic) double dynamicWidthResize; // @synthesize dynamicWidthResize=mDynamicWidthResize;
@property(nonatomic) double dynamicHeightResize; // @synthesize dynamicHeightResize=mDynamicHeightResize;
@property(readonly, nonatomic) TSDInfoGeometry *dynamicInfoGeometry; // @synthesize dynamicInfoGeometry=mDynamicInfoGeometry;
@property(nonatomic) BOOL dynamicRepResize; // @synthesize dynamicRepResize=mDynamicRepResize;
@property(readonly, nonatomic) struct TSUCellRect dynamicFontColorCellRange; // @synthesize dynamicFontColorCellRange=mDynamicFontColorCellRange;
@property(readonly, nonatomic) TSUColor *dynamicFontColor; // @synthesize dynamicFontColor=mDynamicFontColor;
@property(readonly, nonatomic) double dynamicColumnTabSize; // @synthesize dynamicColumnTabSize=mDynamicColumnTabSize;
@property(readonly, nonatomic) int dynamicColumnAdjustment; // @synthesize dynamicColumnAdjustment=mDynamicColumnAdjustment;
@property(readonly, nonatomic) BOOL dynamicBandedFillSetting; // @synthesize dynamicBandedFillSetting=mDynamicBandedFillSetting;
@property(readonly, nonatomic) BOOL dynamicBandedFill; // @synthesize dynamicBandedFill=mDynamicBandedFill;
@property(readonly, nonatomic) double dynamicAddOrRemoveRowElementSize; // @synthesize dynamicAddOrRemoveRowElementSize=mDynamicAddOrRemoveRowElementSize;
@property(readonly, nonatomic) double dynamicAddOrRemoveColumnElementSize; // @synthesize dynamicAddOrRemoveColumnElementSize=mDynamicAddOrRemoveColumnElementSize;
@property(readonly, nonatomic) NSMutableSet *dynamicLayoutParticipants; // @synthesize dynamicLayoutParticipants=mDynamicLayoutParticipants;
@property(readonly, nonatomic, getter=isInDynamicLayoutMode) BOOL inDynamicLayoutMode; // @synthesize inDynamicLayoutMode=mInDynamicLayoutMode;
@property(nonatomic) unsigned int numCellsPerTask; // @synthesize numCellsPerTask=mNumCellsPerTask;
@property(nonatomic) unsigned int maxConcurrentTasks; // @synthesize maxConcurrentTasks=mMaxConcurrentTasks;
@property(readonly, nonatomic) int tableRowsBehavior; // @synthesize tableRowsBehavior=mTableRowsBehavior;
@property(nonatomic) int tableEnvironment; // @synthesize tableEnvironment=mTableEnvironment;
@property(readonly, nonatomic) TSDFill *bandedFillObject; // @synthesize bandedFillObject=mBandedFillObject;
@property(readonly, nonatomic) TSTHiddenRowsColumnsCache *hiddenRowsColumnsCache; // @synthesize hiddenRowsColumnsCache=mHiddenRowsColumnsCache;
@property(readonly, nonatomic) TSTWidthHeightCache *widthHeightCache; // @synthesize widthHeightCache=mWidthHeightCache;
@property(readonly, nonatomic) TSTWPColumnCache *tempWPColumnCache; // @synthesize tempWPColumnCache=mTempWPColumnCache;
@property(readonly, nonatomic) TSTDupContentCache *dupContentCache; // @synthesize dupContentCache=mDupContentCache;
@property(readonly, nonatomic) TSTWPColumnCache *cellIDToWPColumnCache; // @synthesize cellIDToWPColumnCache=mCellIDToWPColumnCache;
@property(readonly, nonatomic) TSTStrokeDefaultVendor *strokesDefaultVendor; // @synthesize strokesDefaultVendor=mStrokesDefaultVendor;
@property(nonatomic) TSTInfo *tableInfo; // @synthesize tableInfo=mTableInfo;
- (void)readSafelyUsingBlock:(CDUnknownBlockType)arg1;
- (void)modifySafelyUsingBlock:(CDUnknownBlockType)arg1;
- (double)fontHeightOfParagraphStyle:(id)arg1;
- (struct NSEdgeInsets)defaultPaddingForCellID:(struct TSUCellCoord)arg1;
- (struct NSEdgeInsets)paddingForCellID:(struct TSUCellCoord)arg1;
- (struct NSEdgeInsets)edgeInsetsFromPadding:(id)arg1;
- (id)accountingParagraphStylePropertyMapForCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (id)newTextEngineForCell:(id)arg1 atCellID:(struct TSUCellCoord)arg2;
- (id)unwrappedFittingWidthsForColumnsInCellRegion:(id)arg1;
- (double)unwrappedFittingWidthsForColumnInCellRegionWorker:(id)arg1;
- (void)waitForLayoutToComplete;
- (void)processLayoutTask:(id)arg1;
- (void)measureTextForLayoutState:(id)arg1;
- (void)queueCellForValidation:(struct TSUCellRect)arg1 cell:(id)arg2 modelMergeRange:(struct TSUCellRect)arg3 wrap:(BOOL)arg4 verticalAlignment:(int)arg5 padding:(id)arg6 prop:(BOOL)arg7 layoutCacheFlags:(int)arg8 layoutTask:(id)arg9;
- (id)validateCellForDrawing:(struct TSUCellCoord)arg1 cell:(id)arg2 contents:(id)arg3 wrap:(BOOL)arg4 verticalAlignment:(int)arg5 padding:(id)arg6 layoutCacheFlags:(int)arg7 pageNumber:(unsigned long long)arg8 pageCount:(unsigned long long)arg9;
- (void)validateFittingWidthsForRegion:(id)arg1;
- (void)validateFittingInfoForChangeDescriptors:(id)arg1 rowsNeedingFittingInfo:(id)arg2;
- (BOOL)p_deferredMergeExpansionForChangeDescriptorType:(int)arg1;
- (id)p_validationFittingForChangeDescriptorType:(int)arg1 regionFromChangeDescriptor:(id)arg2 currentRegionToValidate:(id)arg3;
- (id)p_validationFittingCellRegionForStrokesChanged:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForRangeMergeUnmerge:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForRowsMovedFrom:(id)arg1 toRowIndex:(unsigned short)arg2 currentRegionToValidate:(id)arg3;
- (id)p_validationFittingCellRegionForRowsInserted:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForRowsDeleted:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForColumnsMovedFrom:(id)arg1 toColumnIndex:(unsigned char)arg2 currentRegionToValidate:(id)arg3;
- (id)p_validationFittingCellRegionForColumnsVisibility:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForColumnsInserted:(id)arg1 currentRegionToValidate:(id)arg2;
- (id)p_validationFittingCellRegionForColumnsDeleted:(id)arg1 currentRegionToValidate:(id)arg2;
- (void)p_validateFittingInfoForEmptyMergeRange:(struct TSUCellRect)arg1;
- (struct TSUCellCoord)p_validateFittingInfoForEmptyCellsBetween:(struct TSUCellCoord)arg1 andCellID:(struct TSUCellCoord)arg2 inRange:(struct TSUCellRect)arg3 widthHeightCollection:(id)arg4;
- (void)p_validateFittingInfoForEmptyCellsOnSingleRowBetween:(struct TSUCellCoord)arg1 andEndCellID:(struct TSUCellCoord)arg2 widthHeightCollection:(id)arg3;
- (void)validateFittingInfoWithCellRange:(struct TSUCellRect)arg1;
- (void)validateFittingInfoWithCellRangeWorker:(struct TSUCellRect)arg1;
- (void)validateFittingInfoForCell:(id)arg1 cellID:(struct TSUCellCoord)arg2 mergeRange:(struct TSUCellRect)arg3 setFitting:(BOOL)arg4 layoutTask:(id)arg5 widthHeightCollection:(id)arg6;
- (void)validateRowVisibility:(id)arg1;
- (void)updateWHCForMergeRanges;
- (void)validateChangeDescriptorQueue;
- (void)validateMasterLayoutForChangeDescriptors:(id)arg1;
- (void)validate;
- (void)wasRemovedFromDocumentRootMigratingStyles:(BOOL)arg1;
- (void)wasRemovedFromDocumentRoot;
- (void)willBeAddedToDocumentRoot:(id)arg1;
- (void)addChangeDescriptor:(id)arg1;
- (void)addChangeDescriptorWithType:(int)arg1 andCellRange:(struct TSUCellRect)arg2 andStrokeRange:(struct TSUCellRect)arg3;
- (void)addChangeDescriptorWithType:(int)arg1 andCellRange:(struct TSUCellRect)arg2;
- (void)preprocessChanges:(id)arg1 forChangeSource:(id)arg2;
- (void)p_processChange:(id)arg1 forChangeSource:(id)arg2;
- (id)p_commandToCommitDynamicTableResizeForTargetGeometry:(id)arg1 commitImmediately:(BOOL)arg2 shouldClearObjectPlaceholderFlag:(BOOL)arg3;
- (void)performInternalResizeForTargetGeometry:(id)arg1;
- (id)commandToCommitDynamicTableResizeForTargetGeometry:(id)arg1 shouldClearObjectPlaceholderFlag:(BOOL)arg2;
- (id)commandToCommitDynamicTableResizeForTargetGeometry:(id)arg1;
@property(readonly, nonatomic) BOOL isGrouped;
- (id)adjustedDynamicSavedLayoutGeometry;
- (struct CGAffineTransform)transformForTargetSize:(struct CGSize)arg1 withAdjustableTableSize:(struct CGSize)arg2 andFixedSize:(struct CGSize)arg3;
- (void)updateDynamicResizeForTargetGeometry:(id)arg1;
- (void)updateDynamicResizeForTargetGeometry:(id)arg1 withAdjustableTableSize:(struct CGSize)arg2 andFixedSize:(struct CGSize)arg3;
- (void)validateDynamicResizeInfo;
- (void)invalidateDynamicResizeInfo;
- (void)updateDynamicResizeInfo:(id)arg1;
- (void)captureDynamicResizeInfo;
- (BOOL)isDynamicallyMovingColumns;
@property(readonly, nonatomic) id <TSTLayoutDynamicColumnMoveProtocol> dynamicColumnMoveDelegate; // @synthesize dynamicColumnMoveDelegate=mDynamicColumnMoveDelegate;
- (BOOL)isDynamicallyMovingRows;
@property(readonly, nonatomic) id <TSTLayoutDynamicRowMoveProtocol> dynamicRowMoveDelegate; // @synthesize dynamicRowMoveDelegate=mDynamicRowMoveDelegate;
- (BOOL)isDynamicallyChangingFontColorOfCellID:(struct TSUCellCoord)arg1;
- (BOOL)isDynamicallyChangingContent;
@property(readonly, nonatomic) id <TSTLayoutDynamicContentProtocol> dynamicContentDelegate; // @synthesize dynamicContentDelegate=mDynamicContentDelegate;
- (BOOL)isDynamicallyChangingCellFill;
@property(readonly, nonatomic) id <TSTLayoutDynamicCellFillProtocol> dynamicCellFillDelegate;
- (void)updateDynamicCellFillDelegate:(id)arg1;
- (void)updateDynamicSuppressingConditionalStylesCellID:(struct TSUCellCoord)arg1;
- (void)updateDynamicColumnMoveDelegate:(id)arg1;
- (void)updateDynamicRowMoveDelegate:(id)arg1;
- (void)updateDynamicFontColor:(id)arg1 andRange:(struct TSUCellRect)arg2;
- (void)updateDynamicContentDelegate:(id)arg1;
- (void)modifyOrUpdateDynamicRevealingRowsCol:(long long)arg1 revealingCellRange:(struct TSUCellRect)arg2 growth:(unsigned short)arg3;
- (void)updateDynamicRevealingRowsCols:(long long)arg1 revealingCellRange:(struct TSUCellRect)arg2;
- (void)updateDynamicInfoGeometry:(id)arg1;
- (void)updateDynamicHidingText:(struct TSUCellRect)arg1;
- (void)updateDynamicHidingContent:(struct TSUCellRect)arg1;
- (void)updateDynamicHidingRowsCols:(long long)arg1 hidingCellRange:(struct TSUCellRect)arg2;
- (void)updateDynamicRepressFrozenHeaderColumns:(BOOL)arg1;
- (void)updateDynamicRepressFrozenHeaderRows:(BOOL)arg1;
- (void)updateDynamicBandedFill:(BOOL)arg1 setting:(BOOL)arg2;
- (void)updateDynamicRowTabSize:(double)arg1;
- (void)updateDynamicColumnTabSize:(double)arg1;
- (BOOL)updateDynamicRowCount:(int)arg1 newlyAddedRowSize:(double)arg2 columnCount:(int)arg3 newlyAddedColumnSize:(double)arg4;
- (BOOL)isDynamicallyRepressingFrozenHeaderColumns;
- (BOOL)isDynamicallyRepressingFrozenHeaderRows;
- (BOOL)isDynamicallySettingBandedFill;
- (BOOL)isDynamicallyRowTabResizing;
- (BOOL)isDynamicallyColumnTabResizing;
- (BOOL)isDynamicallyChangingSelection;
- (void)updateDynamicSelection:(id)arg1;
- (BOOL)isDynamicallyChangingRowOrColumnCount;
- (BOOL)isDynamicallyChangingColumnCount;
- (BOOL)isDynamicallyChangingRowCount;
- (BOOL)isDynamicallyResizingTableName;
- (void)updateDynamicTableNameSize:(double)arg1;
- (BOOL)isDynamicallyRevealingRowsCols:(long long)arg1 rowColIndex:(unsigned short)arg2;
- (BOOL)isDynamicallyRevealingRowsCols;
- (void)updateDynamicResize:(long long)arg1 resizingRange:(struct TSUCellRect)arg2 resizeAdjustment:(double)arg3;
- (BOOL)isDynamicallyChangingInfoGeometry;
- (BOOL)isDynamicallyHidingTextOfCellID:(struct TSUCellCoord)arg1;
- (BOOL)isDynamicallyHidingContentOfCellID:(struct TSUCellCoord)arg1;
- (BOOL)isDynamicallyHidingRowsColsCellID:(struct TSUCellCoord)arg1;
- (BOOL)isDynamicallyHidingRowsCols:(long long)arg1 rowColIndex:(unsigned short)arg2;
- (BOOL)isDynamicallyHidingRowsCols;
@property(readonly, nonatomic) TSTLayout *dynamicLayout;
- (BOOL)containsAnyContentInRange:(struct TSUCellRect)arg1;
- (unsigned short)firstEmptyBodyRow;
- (struct TSUCellRect)expandCellRangeToVisibleNeighbors:(struct TSUCellRect)arg1;
@property(readonly, nonatomic) NSIndexSet *hiddenColumnIndices;
@property(readonly, nonatomic) NSIndexSet *hiddenRowIndices;
@property(readonly, nonatomic) NSIndexSet *visibleColumnIndices;
@property(readonly, nonatomic) NSIndexSet *visibleRowIndices;
- (unsigned char)indexOfVisibleColumnAfterAndIncludingColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnAfterColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnBeforeAndIncludingColumnAtIndex:(unsigned char)arg1;
- (unsigned char)indexOfVisibleColumnBeforeColumnAtIndex:(unsigned char)arg1;
- (unsigned short)nonUserHiddenRowAfterAndIncludingRow:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowAfterAndIncludingRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowAfterRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowBeforeAndIncludingRowAtIndex:(unsigned short)arg1;
- (unsigned short)indexOfVisibleRowBeforeRowAtIndex:(unsigned short)arg1;
- (BOOL)anyHiddenColumnsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)anyRowsUserHiddenInCellRange:(struct TSUCellRect)arg1;
- (BOOL)anyHiddenRowsInCellRange:(struct TSUCellRect)arg1;
- (BOOL)isEntireCellRangeHidden:(struct TSUCellRect)arg1;
- (BOOL)hasHiddenColumnAtIndex:(unsigned char)arg1;
- (BOOL)isRowUserHidden:(unsigned short)arg1;
- (BOOL)hasHiddenRowAtIndex:(unsigned short)arg1;
- (BOOL)isDynamicallyResizingCellID:(struct TSUCellCoord)arg1;
- (BOOL)isDynamicallyResizing:(long long)arg1 rowColIndex:(unsigned short)arg2;
- (BOOL)isDynamicallyResizing:(long long)arg1;
- (id)layoutCellRegionForModelCellRegion:(id)arg1;
- (struct TSUCellCoord)layoutCellIDForModelCellID:(struct TSUCellCoord)arg1;
- (unsigned char)layoutColumnForModelColumn:(unsigned char)arg1;
- (unsigned short)layoutRowForModelRow:(unsigned short)arg1;
- (id)modelCellRegionForLayoutCellRegion:(id)arg1;
- (struct TSUCellCoord)modelCellIDForLayoutCellID:(struct TSUCellCoord)arg1;
- (unsigned char)modelColumnForLayoutColumn:(unsigned char)arg1;
- (unsigned short)modelRowForLayoutRow:(unsigned short)arg1;
- (BOOL)cell:(id *)arg1 forCellID:(struct TSUCellCoord)arg2;
- (void)removeDynamicLayoutParticipantEndIfNecessary:(id)arg1;
- (void)addDynamicLayoutParticipantBeginIfNecessary:(id)arg1;
- (void)endDynamicMode;
- (void)cancelDynamicModeChanges;
- (void)p_cancelDynamicRowColCountChanges;
- (void)beginDynamicMode:(id)arg1;
- (void)calculateAdjustableTableSize:(struct CGSize *)arg1 andFixedSize:(struct CGSize *)arg2;
- (void)validateDefaultFontHeights;
- (void)invalidateDefaultFontHeights;
- (void)validateBandedFill;
- (void)invalidateBandedFill;
- (BOOL)shouldRowUseBandedFill:(unsigned short)arg1;
@property(readonly, nonatomic) BOOL useBandedFill;
- (void)p_validateStrokesForRegion:(id)arg1;
- (void)validateStrokesForChangeDescriptors:(id)arg1;
- (void)p_clearStrokesForMergesInCellRegion:(id)arg1;
- (void)p_invalidateClearedStrokesForCellRegion:(id)arg1;
- (void)enumerateMergedStrokesAndCapsForGridRow:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumerateMergedStrokesAndCapsForGridColumn:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumerateMergedStrokesForGridRow:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)enumerateMergedStrokesForGridColumn:(unsigned int)arg1 from:(unsigned int)arg2 to:(unsigned int)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)clearDynamicStrokesForCellRange:(struct TSUCellRect)arg1;
- (void)strokesForCellID:(struct TSUCellCoord)arg1 top:(id *)arg2 left:(id *)arg3 bottom:(id *)arg4 right:(id *)arg5;
- (void)setDynamicCellBorder:(id)arg1 forCellID:(struct TSUCellCoord)arg2;
- (double)strokeHeightOfGridRow:(unsigned int)arg1 atColumnIndex:(unsigned int)arg2;
- (double)strokeHeightOfGridRow:(unsigned int)arg1 beginColumn:(unsigned int)arg2 endColumn:(unsigned int)arg3;
- (id)mergedStrokesForGridRow:(unsigned int)arg1;
- (id)p_strokesForGridRow:(unsigned int)arg1 isTop:(BOOL)arg2 takeStrokeWriteLock:(BOOL)arg3;
- (BOOL)adjustGridRowForVisibility:(unsigned int *)arg1 isTop:(BOOL)arg2;
- (void)p_setDynamicStroke:(id)arg1 strokeOrder:(int)arg2 forGridRow:(unsigned int)arg3 isTop:(BOOL)arg4 beginColumn:(unsigned int)arg5 endColumn:(unsigned int)arg6;
- (double)strokeWidthOfGridColumn:(unsigned int)arg1 atRowIndex:(unsigned int)arg2;
- (double)strokeWidthOfGridColumn:(unsigned int)arg1 beginRow:(unsigned int)arg2 endRow:(unsigned int)arg3;
- (id)mergedStrokesForGridColumn:(unsigned int)arg1;
- (id)p_strokesForGridColumn:(unsigned int)arg1 isLeft:(BOOL)arg2 takeStrokeWriteLock:(BOOL)arg3;
- (BOOL)adjustGridColumnForVisibility:(unsigned int *)arg1 isLeft:(BOOL)arg2;
- (void)setClearedStrokeForGridRow:(unsigned int)arg1 beginColumn:(unsigned int)arg2 endColumn:(unsigned int)arg3;
- (void)setClearedStrokeForGridColumn:(unsigned int)arg1 beginRow:(unsigned int)arg2 endRow:(unsigned int)arg3;
- (BOOL)hasStrokeSpillForLeftGridColumn:(unsigned int)arg1 inRow:(unsigned int)arg2;
- (void)setStrokeSpillForRightGridColumn:(unsigned int)arg1 leftGridColumn:(unsigned int)arg2 inRow:(unsigned int)arg3;
- (void)p_setDynamicStroke:(id)arg1 strokeOrder:(int)arg2 forGridColumn:(unsigned int)arg3 isLeft:(BOOL)arg4 beginRow:(unsigned int)arg5 endRow:(unsigned int)arg6;
- (void)validateStrokesArrays;
- (void)invalidateStrokeSpills;
- (void)invalidateStrokeDefaults;
- (id)expandCellRegionToCoverMergedCells:(id)arg1;
- (struct TSUCellRect)expandCellRangeToCoverMergedCells:(struct TSUCellRect)arg1;
- (id)mergesIntersectingCellRegion:(id)arg1;
- (id)mergesIntersectingRange:(struct TSUCellRect)arg1;
- (id)mergeRangesProppingRowHeightsInRegion:(id)arg1;
@property(readonly, nonatomic) unsigned short numberOfHeaderColumns;
@property(readonly, nonatomic) unsigned short numberOfFooterRows;
@property(readonly, nonatomic) unsigned short numberOfHeaderRows;
@property(readonly, nonatomic) unsigned short numberOfColumns;
@property(readonly, nonatomic) unsigned short numberOfRows;
- (unsigned long long)tableAreaForCellID:(struct TSUCellCoord)arg1;
- (void)validateTableNameHeight;
- (void)invalidateTableNameHeight;
- (double)calculatedTableNameHeightIncludingDynamicResize:(BOOL)arg1;
- (double)calculatedTableNameHeight;
- (double)tableNameHeight;
- (struct CGSize)tableNameTextSize;
- (id)tableNameTextEngine;
- (void)clearModelHeightWidthCacheForCellRange:(struct TSUCellRect)arg1;
- (void)resetModelHeightWidthCache;
- (BOOL)validateLayoutHint:(id)arg1;
- (BOOL)hintIsValid:(id)arg1;
- (id)newLayoutHint;
- (id)customStrokeProvider;
- (id)tableStrokeProvider;
@property(readonly, nonatomic) TSTTableModel *tableModel;
@property(readonly, copy) NSString *description;
- (void)dealloc;
- (id)initWithInfo:(id)arg1;
@property(readonly, nonatomic) BOOL emptyFilteredTable; // @synthesize emptyFilteredTable=mEmptyFilteredTable;
- (id)newProxyWithEditor:(id)arg1 documentRoot:(id)arg2;
- (void)iterateCellsInRange:(struct TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3 usingBlock:(CDUnknownBlockType)arg4;
- (void)iterateCellsAndTerminateWithIterator:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;
- (id)cellIteratorWithRange:(struct TSUCellRect)arg1 flags:(unsigned long long)arg2 searchFlags:(unsigned long long)arg3;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

