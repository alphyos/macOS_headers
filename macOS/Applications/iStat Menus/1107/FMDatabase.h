//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class NSDateFormatter, NSMutableDictionary, NSMutableSet, NSString, NSURL;

@interface FMDatabase : NSObject
{
    void *_db;
    BOOL _isExecutingStatement;
    double _startBusyRetryTime;
    NSMutableSet *_openResultSets;
    NSMutableSet *_openFunctions;
    NSDateFormatter *_dateFormat;
    BOOL _shouldCacheStatements;
    BOOL _traceExecution;
    BOOL _checkedOut;
    BOOL _crashOnErrors;
    BOOL _logsErrors;
    BOOL _isInTransaction;
    BOOL _shouldCacheUpdateStatements;
    double _maxBusyRetryTimeInterval;
    NSMutableDictionary *_cachedStatements;
    NSString *_databasePath;
}

+ (id)storeableDateFormat:(id)arg1;
+ (BOOL)isSQLiteThreadSafe;
+ (id)sqliteLibVersion;
+ (int)FMDBVersion;
+ (id)FMDBUserVersion;
+ (id)databaseWithURL:(id)arg1;
+ (id)databaseWithPath:(id)arg1;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(nonatomic) BOOL shouldCacheUpdateStatements; // @synthesize shouldCacheUpdateStatements=_shouldCacheUpdateStatements;
@property(readonly, nonatomic) BOOL isInTransaction; // @synthesize isInTransaction=_isInTransaction;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
@property BOOL logsErrors; // @synthesize logsErrors=_logsErrors;
@property BOOL crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
@property BOOL checkedOut; // @synthesize checkedOut=_checkedOut;
@property BOOL traceExecution; // @synthesize traceExecution=_traceExecution;
- (void).cxx_destruct;
- (void)resultErrorTooBigInContext:(void *)arg1;
- (void)resultErrorNoMemoryInContext:(void *)arg1;
- (void)resultErrorCode:(int)arg1 context:(void *)arg2;
- (void)resultError:(id)arg1 context:(void *)arg2;
- (void)resultString:(id)arg1 context:(void *)arg2;
- (void)resultData:(id)arg1 context:(void *)arg2;
- (void)resultDouble:(double)arg1 context:(void *)arg2;
- (void)resultLong:(long long)arg1 context:(void *)arg2;
- (void)resultInt:(int)arg1 context:(void *)arg2;
- (void)resultNullInContext:(void *)arg1;
- (id)valueString:(void *)arg1;
- (id)valueData:(void *)arg1;
- (double)valueDouble:(void *)arg1;
- (long long)valueLong:(void *)arg1;
- (int)valueInt:(void *)arg1;
- (int)valueType:(void *)arg1;
- (void)makeFunctionNamed:(id)arg1 arguments:(int)arg2 block:(CDUnknownBlockType)arg3;
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(CDUnknownBlockType)arg3;
@property(nonatomic) BOOL shouldCacheStatements; // @synthesize shouldCacheStatements=_shouldCacheStatements;
- (id)inSavePoint:(CDUnknownBlockType)arg1;
- (BOOL)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;
- (BOOL)releaseSavePointWithName:(id)arg1 error:(id *)arg2;
- (BOOL)startSavePointWithName:(id)arg1 error:(id *)arg2;
- (BOOL)interrupt;
- (BOOL)inTransaction;
- (BOOL)beginTransaction;
- (BOOL)beginDeferredTransaction;
- (BOOL)commit;
- (BOOL)rollback;
- (BOOL)update:(id)arg1 withErrorAndBindings:(id *)arg2;
- (BOOL)executeUpdate:(id)arg1 withErrorAndBindings:(id *)arg2;
- (BOOL)executeStatements:(id)arg1 withResultBlock:(CDUnknownBlockType)arg2;
- (BOOL)executeStatements:(id)arg1;
- (BOOL)executeUpdateWithFormat:(id)arg1;
- (BOOL)executeUpdate:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;
- (BOOL)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;
- (BOOL)executeUpdate:(id)arg1 values:(id)arg2 error:(id *)arg3;
- (BOOL)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;
- (BOOL)executeUpdate:(id)arg1;
- (BOOL)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(struct __va_list_tag [1])arg5;
- (id)executeQuery:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;
- (id)executeQuery:(id)arg1 values:(id)arg2 error:(id *)arg3;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;
- (id)executeQueryWithFormat:(id)arg1;
- (id)executeQuery:(id)arg1;
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(struct __va_list_tag [1])arg4;
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;
- (void)extractSQL:(id)arg1 argumentsList:(struct __va_list_tag [1])arg2 intoString:(id)arg3 arguments:(id)arg4;
- (void)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;
@property(readonly, nonatomic) int changes;
@property(readonly, nonatomic) long long lastInsertRowId;
- (id)lastError;
- (id)errorWithMessage:(id)arg1;
- (int)lastExtendedErrorCode;
- (int)lastErrorCode;
- (BOOL)hadError;
- (id)lastErrorMessage;
- (BOOL)databaseExists;
- (void)warnInUse;
@property(readonly, nonatomic) BOOL goodConnection;
- (id)stringFromDate:(id)arg1;
- (id)dateFromString:(id)arg1;
- (void)setDateFormat:(id)arg1;
- (BOOL)hasDateFormatter;
- (BOOL)setKeyWithData:(id)arg1;
- (BOOL)setKey:(id)arg1;
- (BOOL)rekeyWithData:(id)arg1;
- (BOOL)rekey:(id)arg1;
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;
- (id)cachedStatementForQuery:(id)arg1;
- (void)clearCachedStatements;
- (void)resultSetDidClose:(id)arg1;
- (void)closeOpenResultSets;
@property(readonly, nonatomic) BOOL hasOpenResultSets;
- (void)setBusyRetryTimeout:(int)arg1;
- (int)busyRetryTimeout;
@property(nonatomic) double maxBusyRetryTimeInterval; // @synthesize maxBusyRetryTimeInterval=_maxBusyRetryTimeInterval;
- (BOOL)close;
- (BOOL)openWithFlags:(int)arg1 vfs:(id)arg2;
- (BOOL)openWithFlags:(int)arg1;
- (BOOL)open;
- (const char *)sqlitePath;
@property(readonly, nonatomic) void *sqliteHandle;
@property(readonly, nonatomic) NSURL *databaseURL;
- (void)dealloc;
- (id)initWithPath:(id)arg1;
- (id)initWithURL:(id)arg1;
- (id)init;
- (BOOL)isDatabaseValid;
- (BOOL)validateSQL:(id)arg1 error:(id *)arg2;
- (BOOL)columnExists:(id)arg1 columnName:(id)arg2;
@property(nonatomic) unsigned int userVersion;
@property(retain, nonatomic) NSString *applicationIDString;
@property(nonatomic) unsigned int applicationID;
- (BOOL)columnExists:(id)arg1 inTableWithName:(id)arg2;
- (id)getTableSchema:(id)arg1;
- (id)getSchema;
- (BOOL)tableExists:(id)arg1;
- (id)dateForQuery:(id)arg1;
- (id)dataForQuery:(id)arg1;
- (double)doubleForQuery:(id)arg1;
- (BOOL)boolForQuery:(id)arg1;
- (long long)longForQuery:(id)arg1;
- (int)intForQuery:(id)arg1;
- (id)stringForQuery:(id)arg1;

@end

